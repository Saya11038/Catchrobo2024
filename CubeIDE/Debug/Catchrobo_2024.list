
Catchrobo_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  080097d8  080097d8  0000a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce0  08009ce0  0000b314  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce0  08009ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ce8  08009ce8  0000b314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ce8  08009ce8  0000ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009cf0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08009ec4  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08009f64  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00002bac  20000314  0800a004  0000b314  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20002ec0  0800a004  0000bec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000b314  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016bf4  00000000  00000000  0000b342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000311e  00000000  00000000  00021f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001118  00000000  00000000  00025058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d21  00000000  00000000  00026170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a744  00000000  00000000  00026e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014542  00000000  00000000  000515d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff63d  00000000  00000000  00065b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00165154  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005584  00000000  00000000  00165198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0016a71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	080097c0 	.word	0x080097c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	080097c0 	.word	0x080097c0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <PushTx8Bytes>:
CANTxBuf buffer[CAN_TXBUFFER_SIZE];
uint32_t readpoint = 0;
uint32_t writepoint = 0;
uint8_t isfull = 0;

HAL_StatusTypeDef PushTx8Bytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){
 80005e0:	b480      	push	{r7}
 80005e2:	b087      	sub	sp, #28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	buffer[writepoint].DLC = size;
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <PushTx8Bytes+0xa0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <PushTx8Bytes+0xa4>)
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	4413      	add	r3, r2
 80005f6:	3304      	adds	r3, #4
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
	buffer[writepoint].ExtId = ExtId;
 80005fc:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <PushTx8Bytes+0xa0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	@ (8000684 <PushTx8Bytes+0xa4>)
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	4413      	add	r3, r2
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++)buffer[writepoint].bytes[i] = bytes[i];
 800060a:	2300      	movs	r3, #0
 800060c:	75fb      	strb	r3, [r7, #23]
 800060e:	e010      	b.n	8000632 <PushTx8Bytes+0x52>
 8000610:	7dfb      	ldrb	r3, [r7, #23]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	18d1      	adds	r1, r2, r3
 8000616:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <PushTx8Bytes+0xa0>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	7dfb      	ldrb	r3, [r7, #23]
 800061c:	7808      	ldrb	r0, [r1, #0]
 800061e:	4919      	ldr	r1, [pc, #100]	@ (8000684 <PushTx8Bytes+0xa4>)
 8000620:	0112      	lsls	r2, r2, #4
 8000622:	440a      	add	r2, r1
 8000624:	4413      	add	r3, r2
 8000626:	3308      	adds	r3, #8
 8000628:	4602      	mov	r2, r0
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	3301      	adds	r3, #1
 8000630:	75fb      	strb	r3, [r7, #23]
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	429a      	cmp	r2, r3
 8000638:	d8ea      	bhi.n	8000610 <PushTx8Bytes+0x30>

	if (isfull == 1)readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <PushTx8Bytes+0xa8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d106      	bne.n	8000650 <PushTx8Bytes+0x70>
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <PushTx8Bytes+0xac>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800064c:	4a0f      	ldr	r2, [pc, #60]	@ (800068c <PushTx8Bytes+0xac>)
 800064e:	6013      	str	r3, [r2, #0]
	writepoint = (writepoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <PushTx8Bytes+0xa0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3301      	adds	r3, #1
 8000656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <PushTx8Bytes+0xa0>)
 800065c:	6013      	str	r3, [r2, #0]

	if (writepoint == readpoint){
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <PushTx8Bytes+0xa0>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <PushTx8Bytes+0xac>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	429a      	cmp	r2, r3
 8000668:	d102      	bne.n	8000670 <PushTx8Bytes+0x90>
		isfull = 1;
 800066a:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <PushTx8Bytes+0xa8>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20002610 	.word	0x20002610
 8000684:	2000060c 	.word	0x2000060c
 8000688:	20002614 	.word	0x20002614
 800068c:	2000260c 	.word	0x2000260c

08000690 <PopSendTx8Bytes>:

HAL_StatusTypeDef PopSendTx8Bytes(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 800069a:	2304      	movs	r3, #4
 800069c:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 80006a2:	e035      	b.n	8000710 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <PopSendTx8Bytes+0xa0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d105      	bne.n	80006b8 <PopSendTx8Bytes+0x28>
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <PopSendTx8Bytes+0xa8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d034      	beq.n	8000722 <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 80006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <PopSendTx8Bytes+0xac>)
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	4413      	add	r3, r2
 80006c2:	3304      	adds	r3, #4
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <PopSendTx8Bytes+0xac>)
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	4413      	add	r3, r2
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <PopSendTx8Bytes+0xb0>)
 80006d8:	6818      	ldr	r0, [r3, #0]
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	011b      	lsls	r3, r3, #4
 80006e0:	3308      	adds	r3, #8
 80006e2:	4a16      	ldr	r2, [pc, #88]	@ (800073c <PopSendTx8Bytes+0xac>)
 80006e4:	441a      	add	r2, r3
 80006e6:	463b      	mov	r3, r7
 80006e8:	1d39      	adds	r1, r7, #4
 80006ea:	f002 f821 	bl	8002730 <HAL_CAN_AddTxMessage>
 80006ee:	4603      	mov	r3, r0
 80006f0:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 80006f2:	7ffb      	ldrb	r3, [r7, #31]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <PopSendTx8Bytes+0x6c>
 80006f8:	7ffb      	ldrb	r3, [r7, #31]
 80006fa:	e014      	b.n	8000726 <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000706:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <PopSendTx8Bytes+0xa4>)
 8000708:	6013      	str	r3, [r2, #0]
		isfull = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <PopSendTx8Bytes+0xa0>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <PopSendTx8Bytes+0xb0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f8db 	bl	80028d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1c1      	bne.n	80006a4 <PopSendTx8Bytes+0x14>
 8000720:	e000      	b.n	8000724 <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 8000722:	bf00      	nop
	}

	return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20002614 	.word	0x20002614
 8000734:	2000260c 	.word	0x2000260c
 8000738:	20002610 	.word	0x20002610
 800073c:	2000060c 	.word	0x2000060c
 8000740:	20000330 	.word	0x20000330

08000744 <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000748:	f7ff ffa2 	bl	8000690 <PopSendTx8Bytes>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 8000754:	f7ff ff9c 	bl	8000690 <PopSendTx8Bytes>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 800075c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000760:	b08e      	sub	sp, #56	@ 0x38
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	f107 0218 	add.w	r2, r7, #24
 8000770:	2100      	movs	r1, #0
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f002 f8e1 	bl	800293a <HAL_CAN_GetRxMessage>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 800077e:	486e      	ldr	r0, [pc, #440]	@ (8000938 <WhenCANRxFifo0MsgPending+0x1dc>)
 8000780:	f007 f8b4 	bl	80078ec <iprintf>
		Error_Handler();
 8000784:	f001 f972 	bl	8001a6c <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	2200      	movs	r2, #0
 800078c:	4698      	mov	r8, r3
 800078e:	4691      	mov	r9, r2
 8000790:	4640      	mov	r0, r8
 8000792:	4649      	mov	r1, r9
 8000794:	f000 fdf4 	bl	8001380 <Extract_CAN_Device>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	733a      	strb	r2, [r7, #12]
 800079e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80007a2:	737a      	strb	r2, [r7, #13]
 80007a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80007a8:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	2200      	movs	r2, #0
 80007ae:	461c      	mov	r4, r3
 80007b0:	4615      	mov	r5, r2
 80007b2:	4620      	mov	r0, r4
 80007b4:	4629      	mov	r1, r5
 80007b6:	f000 fe2f 	bl	8001418 <Extract_CAN_CMD>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if(extracted_cmd == AWAKE_CMD){
 80007c0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d139      	bne.n	800083c <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80007ce:	e013      	b.n	80007f8 <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 80007d0:	7b3b      	ldrb	r3, [r7, #12]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80007d8:	4958      	ldr	r1, [pc, #352]	@ (800093c <WhenCANRxFifo0MsgPending+0x1e0>)
 80007da:	4603      	mov	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	1a1b      	subs	r3, r3, r0
 80007e0:	440b      	add	r3, r1
 80007e2:	4413      	add	r3, r2
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	7c3b      	ldrb	r3, [r7, #16]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f000 80a0 	beq.w	800092e <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 80007ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80007f2:	3301      	adds	r3, #1
 80007f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80007f8:	7b3b      	ldrb	r3, [r7, #12]
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b50      	ldr	r3, [pc, #320]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 80007fe:	5c9b      	ldrb	r3, [r3, r2]
 8000800:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000804:	429a      	cmp	r2, r3
 8000806:	d3e3      	bcc.n	80007d0 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000808:	7b3b      	ldrb	r3, [r7, #12]
 800080a:	4619      	mov	r1, r3
 800080c:	7b3b      	ldrb	r3, [r7, #12]
 800080e:	461a      	mov	r2, r3
 8000810:	4b4b      	ldr	r3, [pc, #300]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000812:	5c9b      	ldrb	r3, [r3, r2]
 8000814:	461c      	mov	r4, r3
 8000816:	7c38      	ldrb	r0, [r7, #16]
 8000818:	4a48      	ldr	r2, [pc, #288]	@ (800093c <WhenCANRxFifo0MsgPending+0x1e0>)
 800081a:	460b      	mov	r3, r1
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a5b      	subs	r3, r3, r1
 8000820:	4413      	add	r3, r2
 8000822:	4423      	add	r3, r4
 8000824:	4602      	mov	r2, r0
 8000826:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000828:	7b3b      	ldrb	r3, [r7, #12]
 800082a:	461a      	mov	r2, r3
 800082c:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 800082e:	5c9b      	ldrb	r3, [r3, r2]
 8000830:	7b3a      	ldrb	r2, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	b2d9      	uxtb	r1, r3
 8000836:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000838:	5499      	strb	r1, [r3, r2]
 800083a:	e04a      	b.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 800083c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000840:	2b01      	cmp	r3, #1
 8000842:	d146      	bne.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 8000844:	7b3b      	ldrb	r3, [r7, #12]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10d      	bne.n	8000866 <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 800084a:	7b7b      	ldrb	r3, [r7, #13]
 800084c:	7bba      	ldrb	r2, [r7, #14]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	4a3b      	ldr	r2, [pc, #236]	@ (8000944 <WhenCANRxFifo0MsgPending+0x1e8>)
 8000856:	4413      	add	r3, r2
 8000858:	461a      	mov	r2, r3
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	cb03      	ldmia	r3!, {r0, r1}
 8000860:	6010      	str	r0, [r2, #0]
 8000862:	6051      	str	r1, [r2, #4]
 8000864:	e035      	b.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 8000866:	7b3b      	ldrb	r3, [r7, #12]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d10d      	bne.n	8000888 <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	7bba      	ldrb	r2, [r7, #14]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	4a34      	ldr	r2, [pc, #208]	@ (8000948 <WhenCANRxFifo0MsgPending+0x1ec>)
 8000878:	4413      	add	r3, r2
 800087a:	461a      	mov	r2, r3
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	cb03      	ldmia	r3!, {r0, r1}
 8000882:	6010      	str	r0, [r2, #0]
 8000884:	6051      	str	r1, [r2, #4]
 8000886:	e024      	b.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d10d      	bne.n	80008aa <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	7bba      	ldrb	r2, [r7, #14]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	4a2c      	ldr	r2, [pc, #176]	@ (800094c <WhenCANRxFifo0MsgPending+0x1f0>)
 800089a:	4413      	add	r3, r2
 800089c:	461a      	mov	r2, r3
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	cb03      	ldmia	r3!, {r0, r1}
 80008a4:	6010      	str	r0, [r2, #0]
 80008a6:	6051      	str	r1, [r2, #4]
 80008a8:	e013      	b.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 80008aa:	7b3b      	ldrb	r3, [r7, #12]
 80008ac:	2b06      	cmp	r3, #6
 80008ae:	d10d      	bne.n	80008cc <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	7bba      	ldrb	r2, [r7, #14]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	4a25      	ldr	r2, [pc, #148]	@ (8000950 <WhenCANRxFifo0MsgPending+0x1f4>)
 80008bc:	4413      	add	r3, r2
 80008be:	461a      	mov	r2, r3
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	cb03      	ldmia	r3!, {r0, r1}
 80008c6:	6010      	str	r0, [r2, #0]
 80008c8:	6051      	str	r1, [r2, #4]
 80008ca:	e002      	b.n	80008d2 <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 80008cc:	4821      	ldr	r0, [pc, #132]	@ (8000954 <WhenCANRxFifo0MsgPending+0x1f8>)
 80008ce:	f007 f80d 	bl	80078ec <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008d4:	785a      	ldrb	r2, [r3, #1]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d128      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008e0:	789a      	ldrb	r2, [r3, #2]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d122      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008ec:	78da      	ldrb	r2, [r3, #3]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d11c      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 80008f8:	791a      	ldrb	r2, [r3, #4]
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	78db      	ldrb	r3, [r3, #3]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d116      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000904:	795a      	ldrb	r2, [r3, #5]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 800090a:	429a      	cmp	r2, r3
 800090c:	d110      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000910:	799a      	ldrb	r2, [r3, #6]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	795b      	ldrb	r3, [r3, #5]
 8000916:	429a      	cmp	r2, r3
 8000918:	d10a      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <WhenCANRxFifo0MsgPending+0x1e4>)
 800091c:	7a5a      	ldrb	r2, [r3, #9]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	79db      	ldrb	r3, [r3, #7]
 8000922:	429a      	cmp	r2, r3
 8000924:	d104      	bne.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <WhenCANRxFifo0MsgPending+0x1fc>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
 800092c:	e000      	b.n	8000930 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 800092e:	bf00      	nop
	}
}
 8000930:	3738      	adds	r7, #56	@ 0x38
 8000932:	46bd      	mov	sp, r7
 8000934:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000938:	080097d8 	.word	0x080097d8
 800093c:	20000344 	.word	0x20000344
 8000940:	20000338 	.word	0x20000338
 8000944:	2000038c 	.word	0x2000038c
 8000948:	2000042c 	.word	0x2000042c
 800094c:	200004cc 	.word	0x200004cc
 8000950:	2000056c 	.word	0x2000056c
 8000954:	080097f0 	.word	0x080097f0
 8000958:	20000334 	.word	0x20000334

0800095c <SendBytes>:

HAL_StatusTypeDef SendBytes(uint32_t ExtId, uint8_t *bytes, uint32_t size){ // 命令を送信する関数
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	uint32_t quotient = size / 8;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	61bb      	str	r3, [r7, #24]
	uint32_t remainder = size - (8 * quotient);
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef ret;

	for (uint8_t i = 0; i < quotient; i++){
 8000978:	2300      	movs	r3, #0
 800097a:	77fb      	strb	r3, [r7, #31]
 800097c:	e015      	b.n	80009aa <SendBytes+0x4e>
		ret = PushTx8Bytes(ExtId, bytes + i * 8, 8);
 800097e:	7ffb      	ldrb	r3, [r7, #31]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	461a      	mov	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4413      	add	r3, r2
 8000988:	2208      	movs	r2, #8
 800098a:	4619      	mov	r1, r3
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff fe27 	bl	80005e0 <PushTx8Bytes>
 8000992:	4603      	mov	r3, r0
 8000994:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <SendBytes+0x48>
			Error_Handler();
 800099c:	f001 f866 	bl	8001a6c <Error_Handler>
			return ret;
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	e027      	b.n	80009f4 <SendBytes+0x98>
	for (uint8_t i = 0; i < quotient; i++){
 80009a4:	7ffb      	ldrb	r3, [r7, #31]
 80009a6:	3301      	adds	r3, #1
 80009a8:	77fb      	strb	r3, [r7, #31]
 80009aa:	7ffb      	ldrb	r3, [r7, #31]
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d8e5      	bhi.n	800097e <SendBytes+0x22>
		}
	}

	if(remainder != 0){
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d011      	beq.n	80009dc <SendBytes+0x80>
		ret = PushTx8Bytes(ExtId, bytes + quotient * 8, remainder);
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4413      	add	r3, r2
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	4619      	mov	r1, r3
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f7ff fe0b 	bl	80005e0 <PushTx8Bytes>
 80009ca:	4603      	mov	r3, r0
 80009cc:	74fb      	strb	r3, [r7, #19]
		if (ret != HAL_OK){
 80009ce:	7cfb      	ldrb	r3, [r7, #19]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <SendBytes+0x80>
			Error_Handler();
 80009d4:	f001 f84a 	bl	8001a6c <Error_Handler>
			return ret;
 80009d8:	7cfb      	ldrb	r3, [r7, #19]
 80009da:	e00b      	b.n	80009f4 <SendBytes+0x98>
		}
	}

	ret = PopSendTx8Bytes();
 80009dc:	f7ff fe58 	bl	8000690 <PopSendTx8Bytes>
 80009e0:	4603      	mov	r3, r0
 80009e2:	74fb      	strb	r3, [r7, #19]
	if (ret != HAL_OK){
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <SendBytes+0x96>
		Error_Handler();
 80009ea:	f001 f83f 	bl	8001a6c <Error_Handler>
		return ret;
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	e000      	b.n	80009f4 <SendBytes+0x98>
	}

	return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <CAN_SystemInit>:
 * @brief CANのシステムをアクティベートする. 具体的にはメッセージフィルターの設定とhal_can_start.
 *
 * @param _hcan
 * @param can_param
 */
void CAN_SystemInit(CAN_HandleTypeDef *_hcan){ // CANの初期化
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	@ 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	phcan = _hcan;
 8000a04:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <CAN_SystemInit+0x30>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]

	all_node_detected = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <CAN_SystemInit+0x34>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a16:	e029      	b.n	8000a6c <CAN_SystemInit+0x70>
		num_detected[type] = 0;
 8000a18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a1c:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <CAN_SystemInit+0x38>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000a28:	e017      	b.n	8000a5a <CAN_SystemInit+0x5e>
 8000a2a:	bf00      	nop
 8000a2c:	20000330 	.word	0x20000330
 8000a30:	20000334 	.word	0x20000334
 8000a34:	20000338 	.word	0x20000338
			node_id_list[type][i] = 0xff;
 8000a38:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a3c:	f897 1036 	ldrb.w	r1, [r7, #54]	@ 0x36
 8000a40:	48d7      	ldr	r0, [pc, #860]	@ (8000da0 <CAN_SystemInit+0x3a4>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	1a9b      	subs	r3, r3, r2
 8000a48:	4403      	add	r3, r0
 8000a4a:	440b      	add	r3, r1
 8000a4c:	22ff      	movs	r2, #255	@ 0xff
 8000a4e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 0b111; i++){
 8000a50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000a54:	3301      	adds	r3, #1
 8000a56:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000a5a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d9ea      	bls.n	8000a38 <CAN_SystemInit+0x3c>
	for (uint8_t type = 0; type < NODE_TYPES; type++){
 8000a62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a66:	3301      	adds	r3, #1
 8000a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000a70:	2b09      	cmp	r3, #9
 8000a72:	d9d1      	bls.n	8000a18 <CAN_SystemInit+0x1c>
		}
	}

	//フィルタバンク設定
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sFilterConfig.SlaveStartFilterBank = 14;
 8000a84:	230e      	movs	r3, #14
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 fc47 	bl	8001326 <Make_CAN_ID>
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	0b42      	lsrs	r2, r0, #13
 8000aa2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000aa6:	0b4b      	lsrs	r3, r1, #13
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) >> 13;
 8000aac:	231f      	movs	r3, #31
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f000 fc37 	bl	8001326 <Make_CAN_ID>
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	0b42      	lsrs	r2, r0, #13
 8000ac2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ac6:	0b4b      	lsrs	r3, r1, #13
 8000ac8:	4613      	mov	r3, r2
 8000aca:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000acc:	2300      	movs	r3, #0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f000 fc27 	bl	8001326 <Make_CAN_ID>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	4613      	mov	r3, r2
 8000ade:	00da      	lsls	r2, r3, #3
 8000ae0:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD1, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000aec:	231f      	movs	r3, #31
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fc17 	bl	8001326 <Make_CAN_ID>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4613      	mov	r3, r2
 8000afe:	00da      	lsls	r2, r3, #3
 8000b00:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000b04:	4013      	ands	r3, r2
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000b0c:	4ba5      	ldr	r3, [pc, #660]	@ (8000da4 <CAN_SystemInit+0x3a8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f107 020c 	add.w	r2, r7, #12
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fcda 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <CAN_SystemInit+0x12a>
		/* Filter configuration Error */
		Error_Handler();
 8000b22:	f000 ffa3 	bl	8001a6c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) >> 13; // 上16bit
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2002      	movs	r0, #2
 8000b32:	f000 fbf8 	bl	8001326 <Make_CAN_ID>
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	0b42      	lsrs	r2, r0, #13
 8000b40:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b44:	0b4b      	lsrs	r3, r1, #13
 8000b46:	4613      	mov	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) >> 13;
 8000b4a:	231f      	movs	r3, #31
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2002      	movs	r0, #2
 8000b52:	f000 fbe8 	bl	8001326 <Make_CAN_ID>
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	0b42      	lsrs	r2, r0, #13
 8000b60:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000b64:	0b4b      	lsrs	r3, r1, #13
 8000b66:	4613      	mov	r3, r2
 8000b68:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2002      	movs	r0, #2
 8000b72:	f000 fbd8 	bl	8001326 <Make_CAN_ID>
 8000b76:	4602      	mov	r2, r0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00da      	lsls	r2, r3, #3
 8000b7e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000b82:	4013      	ands	r3, r2
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD2, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000b8a:	231f      	movs	r3, #31
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2002      	movs	r0, #2
 8000b92:	f000 fbc8 	bl	8001326 <Make_CAN_ID>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00da      	lsls	r2, r3, #3
 8000b9e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000baa:	4b7e      	ldr	r3, [pc, #504]	@ (8000da4 <CAN_SystemInit+0x3a8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f107 020c 	add.w	r2, r7, #12
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fc8b 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <CAN_SystemInit+0x1c8>
		/* Filter configuration Error */
		Error_Handler();
 8000bc0:	f000 ff54 	bl	8001a6c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) >> 13;				   // 上16bit
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 fba9 	bl	8001326 <Make_CAN_ID>
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	0b42      	lsrs	r2, r0, #13
 8000bde:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000be2:	0b4b      	lsrs	r3, r1, #13
 8000be4:	4613      	mov	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) >> 13;					   // TODO : 治す
 8000be8:	231f      	movs	r3, #31
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 fb99 	bl	8001326 <Make_CAN_ID>
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	0b42      	lsrs	r2, r0, #13
 8000bfe:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c02:	0b4b      	lsrs	r3, r1, #13
 8000c04:	4613      	mov	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, MCMD_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000c08:	2300      	movs	r3, #0
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2003      	movs	r0, #3
 8000c10:	f000 fb89 	bl	8001326 <Make_CAN_ID>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00da      	lsls	r2, r3, #3
 8000c1c:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000c20:	4013      	ands	r3, r2
 8000c22:	f043 0304 	orr.w	r3, r3, #4
 8000c26:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD3, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000c28:	231f      	movs	r3, #31
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 fb79 	bl	8001326 <Make_CAN_ID>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	4613      	mov	r3, r2
 8000c3a:	00da      	lsls	r2, r3, #3
 8000c3c:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000c40:	4013      	ands	r3, r2
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000c48:	4b56      	ldr	r3, [pc, #344]	@ (8000da4 <CAN_SystemInit+0x3a8>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f107 020c 	add.w	r2, r7, #12
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fc3c 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <CAN_SystemInit+0x266>
		/* Filter configuration Error */
		Error_Handler();
 8000c5e:	f000 ff05 	bl	8001a6c <Error_Handler>
	}

	// FIFO0にfeedback用のフィルタを設定
	sFilterConfig.FilterBank = 3;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) >> 13; // 上16bit
 8000c66:	2301      	movs	r3, #1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fb5a 	bl	8001326 <Make_CAN_ID>
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	0b42      	lsrs	r2, r0, #13
 8000c7c:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000c80:	0b4b      	lsrs	r3, r1, #13
 8000c82:	4613      	mov	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(0, 0, 0, 0b11111) >> 13;
 8000c86:	231f      	movs	r3, #31
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 fb4a 	bl	8001326 <Make_CAN_ID>
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	0b42      	lsrs	r2, r0, #13
 8000c9c:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000ca0:	0b4b      	lsrs	r3, r1, #13
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(0, 0, 0, MCMD_CMD_FB) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2100      	movs	r1, #0
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fb3a 	bl	8001326 <Make_CAN_ID>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	00da      	lsls	r2, r3, #3
 8000cba:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(0, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000cc6:	231f      	movs	r3, #31
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fb2a 	bl	8001326 <Make_CAN_ID>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	00da      	lsls	r2, r3, #3
 8000cda:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000cde:	4013      	ands	r3, r2
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <CAN_SystemInit+0x3a8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f107 020c 	add.w	r2, r7, #12
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fbed 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <CAN_SystemInit+0x304>
		/* Filter configuration Error */
		Error_Handler();
 8000cfc:	f000 feb6 	bl	8001a6c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) >> 13; // 上16bit
 8000d04:	2300      	movs	r3, #0
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f000 fb0b 	bl	8001326 <Make_CAN_ID>
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	0b42      	lsrs	r2, r0, #13
 8000d1a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d1e:	0b4b      	lsrs	r3, r1, #13
 8000d20:	4613      	mov	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) >> 13;
 8000d24:	231f      	movs	r3, #31
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f000 fafb 	bl	8001326 <Make_CAN_ID>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	0b42      	lsrs	r2, r0, #13
 8000d3a:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000d3e:	0b4b      	lsrs	r3, r1, #13
 8000d40:	4613      	mov	r3, r2
 8000d42:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, SERVO_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f000 faeb 	bl	8001326 <Make_CAN_ID>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4613      	mov	r3, r2
 8000d56:	00da      	lsls	r2, r3, #3
 8000d58:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_SERVO, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000d64:	231f      	movs	r3, #31
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2004      	movs	r0, #4
 8000d6c:	f000 fadb 	bl	8001326 <Make_CAN_ID>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4613      	mov	r3, r2
 8000d76:	00da      	lsls	r2, r3, #3
 8000d78:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <CAN_SystemInit+0x3a8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fb9e 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <CAN_SystemInit+0x3ac>
		/* Filter configuration Error */
		Error_Handler();
 8000d9a:	f000 fe67 	bl	8001a6c <Error_Handler>
 8000d9e:	e003      	b.n	8000da8 <CAN_SystemInit+0x3ac>
 8000da0:	20000344 	.word	0x20000344
 8000da4:	20000330 	.word	0x20000330
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 5;
 8000da8:	2305      	movs	r3, #5
 8000daa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000dac:	2300      	movs	r3, #0
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2005      	movs	r0, #5
 8000db4:	f000 fab7 	bl	8001326 <Make_CAN_ID>
 8000db8:	f04f 0200 	mov.w	r2, #0
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	0b42      	lsrs	r2, r0, #13
 8000dc2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000dc6:	0b4b      	lsrs	r3, r1, #13
 8000dc8:	4613      	mov	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) >> 13;
 8000dcc:	231f      	movs	r3, #31
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2005      	movs	r0, #5
 8000dd4:	f000 faa7 	bl	8001326 <Make_CAN_ID>
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	0b42      	lsrs	r2, r0, #13
 8000de2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000de6:	0b4b      	lsrs	r3, r1, #13
 8000de8:	4613      	mov	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000dec:	2300      	movs	r3, #0
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2005      	movs	r0, #5
 8000df4:	f000 fa97 	bl	8001326 <Make_CAN_ID>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00da      	lsls	r2, r3, #3
 8000e00:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000e04:	4013      	ands	r3, r2
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_AIR, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000e0c:	231f      	movs	r3, #31
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2005      	movs	r0, #5
 8000e14:	f000 fa87 	bl	8001326 <Make_CAN_ID>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000e24:	4013      	ands	r3, r2
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <CAN_SystemInit+0x544>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fb4a 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <CAN_SystemInit+0x44a>
		/* Filter configuration Error */
		Error_Handler();
 8000e42:	f000 fe13 	bl	8001a6c <Error_Handler>
	}

	// FIFO0に初期化用のフィルタを設定
	sFilterConfig.FilterBank = 6;
 8000e46:	2306      	movs	r3, #6
 8000e48:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) >> 13; // 上16bit
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2006      	movs	r0, #6
 8000e52:	f000 fa68 	bl	8001326 <Make_CAN_ID>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	0b42      	lsrs	r2, r0, #13
 8000e60:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e64:	0b4b      	lsrs	r3, r1, #13
 8000e66:	4613      	mov	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) >> 13;
 8000e6a:	231f      	movs	r3, #31
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2006      	movs	r0, #6
 8000e72:	f000 fa58 	bl	8001326 <Make_CAN_ID>
 8000e76:	f04f 0200 	mov.w	r2, #0
 8000e7a:	f04f 0300 	mov.w	r3, #0
 8000e7e:	0b42      	lsrs	r2, r0, #13
 8000e80:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000e84:	0b4b      	lsrs	r3, r1, #13
 8000e86:	4613      	mov	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, AIR_CMD_AWAKE) & 0x1FFF) << 3 | 0b100; // 下16bit
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2006      	movs	r0, #6
 8000e92:	f000 fa48 	bl	8001326 <Make_CAN_ID>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	00da      	lsls	r2, r3, #3
 8000e9e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (Make_CAN_ID(NODE_MCMD4, 0, 0, 0b11111) & 0x1FFF) << 3 | 0b100;
 8000eaa:	231f      	movs	r3, #31
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2006      	movs	r0, #6
 8000eb2:	f000 fa38 	bl	8001326 <Make_CAN_ID>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00da      	lsls	r2, r3, #3
 8000ebe:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
	if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK){
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <CAN_SystemInit+0x544>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fafb 	bl	80024d0 <HAL_CAN_ConfigFilter>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <CAN_SystemInit+0x4e8>
		/* Filter configuration Error */
		Error_Handler();
 8000ee0:	f000 fdc4 	bl	8001a6c <Error_Handler>
	}

	if (HAL_CAN_Start(phcan) != HAL_OK){
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <CAN_SystemInit+0x544>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fbdd 	bl	80026a8 <HAL_CAN_Start>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <CAN_SystemInit+0x502>
		printf(" -> Start Error\n");
 8000ef4:	4813      	ldr	r0, [pc, #76]	@ (8000f44 <CAN_SystemInit+0x548>)
 8000ef6:	f006 fd61 	bl	80079bc <puts>
		Error_Handler();
 8000efa:	f000 fdb7 	bl	8001a6c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <CAN_SystemInit+0x544>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2102      	movs	r1, #2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fe2a 	bl	8002b5e <HAL_CAN_ActivateNotification>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d004      	beq.n	8000f1a <CAN_SystemInit+0x51e>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <CAN_SystemInit+0x54c>)
 8000f12:	f006 fceb 	bl	80078ec <iprintf>
		Error_Handler();
 8000f16:	f000 fda9 	bl	8001a6c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK){
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <CAN_SystemInit+0x544>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fe1c 	bl	8002b5e <HAL_CAN_ActivateNotification>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <CAN_SystemInit+0x53a>
		printf(" -> FIFO0 CAN_Activation error\n\r");
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <CAN_SystemInit+0x54c>)
 8000f2e:	f006 fcdd 	bl	80078ec <iprintf>
		Error_Handler();
 8000f32:	f000 fd9b 	bl	8001a6c <Error_Handler>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	@ 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000330 	.word	0x20000330
 8000f44:	080097f8 	.word	0x080097f8
 8000f48:	08009808 	.word	0x08009808

08000f4c <CAN_WaitConnect>:

/**
 * @brief CANの全デバイスの接続が確認されるまで待つ.
 *
 */
void CAN_WaitConnect(NUM_OF_DEVICES *num_of){ // 他のデバイスが接続されるのを待つ
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	while (all_node_detected == 0){
 8000f54:	e006      	b.n	8000f64 <CAN_WaitConnect+0x18>
		printf("Waiting CAN_NODES Wake Up...\n\r");
 8000f56:	4856      	ldr	r0, [pc, #344]	@ (80010b0 <CAN_WaitConnect+0x164>)
 8000f58:	f006 fcc8 	bl	80078ec <iprintf>
		HAL_Delay(500);
 8000f5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f60:	f001 f996 	bl	8002290 <HAL_Delay>
	while (all_node_detected == 0){
 8000f64:	4b53      	ldr	r3, [pc, #332]	@ (80010b4 <CAN_WaitConnect+0x168>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f3      	beq.n	8000f56 <CAN_WaitConnect+0xa>
	}
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e00a      	b.n	8000f8a <CAN_WaitConnect+0x3e>
		printf("MCMD1 No.%d\n\r", node_id_list[NODE_MCMD1][i]);
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	4a50      	ldr	r2, [pc, #320]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	79db      	ldrb	r3, [r3, #7]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	484f      	ldr	r0, [pc, #316]	@ (80010bc <CAN_WaitConnect+0x170>)
 8000f80:	f006 fcb4 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd1; i++)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	3301      	adds	r3, #1
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3ef      	bcc.n	8000f74 <CAN_WaitConnect+0x28>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]
 8000f98:	e00a      	b.n	8000fb0 <CAN_WaitConnect+0x64>
		printf("MCMD2 No.%d\n\r", node_id_list[NODE_MCMD2][i]);
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	4a46      	ldr	r2, [pc, #280]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	7b9b      	ldrb	r3, [r3, #14]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4846      	ldr	r0, [pc, #280]	@ (80010c0 <CAN_WaitConnect+0x174>)
 8000fa6:	f006 fca1 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd2; i++)
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	3301      	adds	r3, #1
 8000fae:	73bb      	strb	r3, [r7, #14]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	7bba      	ldrb	r2, [r7, #14]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3ef      	bcc.n	8000f9a <CAN_WaitConnect+0x4e>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]
 8000fbe:	e00a      	b.n	8000fd6 <CAN_WaitConnect+0x8a>
		printf("MCMD3 No.%d\n\r", node_id_list[NODE_MCMD3][i]);
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	7d5b      	ldrb	r3, [r3, #21]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483e      	ldr	r0, [pc, #248]	@ (80010c4 <CAN_WaitConnect+0x178>)
 8000fcc:	f006 fc8e 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd3; i++)
 8000fd0:	7b7b      	ldrb	r3, [r7, #13]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	737b      	strb	r3, [r7, #13]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	789b      	ldrb	r3, [r3, #2]
 8000fda:	7b7a      	ldrb	r2, [r7, #13]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3ef      	bcc.n	8000fc0 <CAN_WaitConnect+0x74>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	733b      	strb	r3, [r7, #12]
 8000fe4:	e00b      	b.n	8000ffe <CAN_WaitConnect+0xb2>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD4][i]);
 8000fe6:	7b3b      	ldrb	r3, [r7, #12]
 8000fe8:	4a33      	ldr	r2, [pc, #204]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8000fea:	4413      	add	r3, r2
 8000fec:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4835      	ldr	r0, [pc, #212]	@ (80010c8 <CAN_WaitConnect+0x17c>)
 8000ff4:	f006 fc7a 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd4; i++)
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	733b      	strb	r3, [r7, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	795b      	ldrb	r3, [r3, #5]
 8001002:	7b3a      	ldrb	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d3ee      	bcc.n	8000fe6 <CAN_WaitConnect+0x9a>
	for (uint8_t i = 0; i < num_of->mcmd5; i++)
 8001008:	2300      	movs	r3, #0
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	e00b      	b.n	8001026 <CAN_WaitConnect+0xda>
		printf("MCMD4 No.%d\n\r", node_id_list[NODE_MCMD5][i]);
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8001012:	4413      	add	r3, r2
 8001014:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001018:	4619      	mov	r1, r3
 800101a:	482b      	ldr	r0, [pc, #172]	@ (80010c8 <CAN_WaitConnect+0x17c>)
 800101c:	f006 fc66 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->mcmd5; i++)
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	3301      	adds	r3, #1
 8001024:	72fb      	strb	r3, [r7, #11]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	7afa      	ldrb	r2, [r7, #11]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3ee      	bcc.n	800100e <CAN_WaitConnect+0xc2>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	72bb      	strb	r3, [r7, #10]
 8001034:	e00a      	b.n	800104c <CAN_WaitConnect+0x100>
		printf("Servo No.%d\n\r", node_id_list[NODE_SERVO][i]);
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 800103a:	4413      	add	r3, r2
 800103c:	7f1b      	ldrb	r3, [r3, #28]
 800103e:	4619      	mov	r1, r3
 8001040:	4822      	ldr	r0, [pc, #136]	@ (80010cc <CAN_WaitConnect+0x180>)
 8001042:	f006 fc53 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->servo; i++)
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	3301      	adds	r3, #1
 800104a:	72bb      	strb	r3, [r7, #10]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	7aba      	ldrb	r2, [r7, #10]
 8001052:	429a      	cmp	r2, r3
 8001054:	d3ef      	bcc.n	8001036 <CAN_WaitConnect+0xea>
	for (uint8_t i = 0; i < num_of->air; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	727b      	strb	r3, [r7, #9]
 800105a:	e00b      	b.n	8001074 <CAN_WaitConnect+0x128>
		printf("Air No.%d\n\r", node_id_list[NODE_AIR][i]);
 800105c:	7a7b      	ldrb	r3, [r7, #9]
 800105e:	4a16      	ldr	r2, [pc, #88]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8001060:	4413      	add	r3, r2
 8001062:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001066:	4619      	mov	r1, r3
 8001068:	4819      	ldr	r0, [pc, #100]	@ (80010d0 <CAN_WaitConnect+0x184>)
 800106a:	f006 fc3f 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->air; i++)
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	3301      	adds	r3, #1
 8001072:	727b      	strb	r3, [r7, #9]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	7a7a      	ldrb	r2, [r7, #9]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3ee      	bcc.n	800105c <CAN_WaitConnect+0x110>
	for (uint8_t i = 0; i < num_of->other; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	723b      	strb	r3, [r7, #8]
 8001082:	e00b      	b.n	800109c <CAN_WaitConnect+0x150>
		printf("Others No.%d\n\r", node_id_list[NODE_OTHER][i]);
 8001084:	7a3b      	ldrb	r3, [r7, #8]
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <CAN_WaitConnect+0x16c>)
 8001088:	4413      	add	r3, r2
 800108a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800108e:	4619      	mov	r1, r3
 8001090:	4810      	ldr	r0, [pc, #64]	@ (80010d4 <CAN_WaitConnect+0x188>)
 8001092:	f006 fc2b 	bl	80078ec <iprintf>
	for (uint8_t i = 0; i < num_of->other; i++)
 8001096:	7a3b      	ldrb	r3, [r7, #8]
 8001098:	3301      	adds	r3, #1
 800109a:	723b      	strb	r3, [r7, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	79db      	ldrb	r3, [r3, #7]
 80010a0:	7a3a      	ldrb	r2, [r7, #8]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3ee      	bcc.n	8001084 <CAN_WaitConnect+0x138>
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	0800982c 	.word	0x0800982c
 80010b4:	20000334 	.word	0x20000334
 80010b8:	20000344 	.word	0x20000344
 80010bc:	0800984c 	.word	0x0800984c
 80010c0:	0800985c 	.word	0x0800985c
 80010c4:	0800986c 	.word	0x0800986c
 80010c8:	0800987c 	.word	0x0800987c
 80010cc:	0800988c 	.word	0x0800988c
 80010d0:	0800989c 	.word	0x0800989c
 80010d4:	080098a8 	.word	0x080098a8

080010d8 <MCMD_ChangeControl>:

//// MCMD
void MCMD_ChangeControl(MCMD_HandleTypedef *hmcmd){ // Ctrl typeを変更する.
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	float fdata[2];
	fdata[0] = hmcmd->ctrl_param.PID_param.kp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.PID_param.ki;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL1), (uint8_t *)&fdata, sizeof(fdata));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2105      	movs	r1, #5
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f8ef 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	2208      	movs	r2, #8
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc2a 	bl	800095c <SendBytes>
	fdata[0] = hmcmd->ctrl_param.PID_param.kd;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	613b      	str	r3, [r7, #16]
	fdata[1] = hmcmd->ctrl_param.accel_limit_size;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001112:	617b      	str	r3, [r7, #20]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL2), (uint8_t *)&fdata, sizeof(fdata));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2106      	movs	r1, #6
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f8db 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2208      	movs	r2, #8
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fc16 	bl	800095c <SendBytes>

    fdata[0] = hmcmd->ctrl_param.PID_param.kff;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001134:	613b      	str	r3, [r7, #16]
    fdata[1] = hmcmd->ctrl_param.gravity_compensation_gain;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	617b      	str	r3, [r7, #20]
    SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL3), (uint8_t *)&fdata, sizeof(fdata));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2107      	movs	r1, #7
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f8c7 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	2208      	movs	r2, #8
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc02 	bl	800095c <SendBytes>

	uint8_t bdata[6];
	bdata[0] = hmcmd->ctrl_param.ctrl_type;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e1b      	ldrb	r3, [r3, #24]
 800115c:	723b      	strb	r3, [r7, #8]
	bdata[1] = hmcmd->ctrl_param.accel_limit;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001164:	727b      	strb	r3, [r7, #9]
	bdata[2] = hmcmd->ctrl_param.feedback;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800116c:	72bb      	strb	r3, [r7, #10]
	bdata[3] = hmcmd->ctrl_param.timup_monitor;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001174:	72fb      	strb	r3, [r7, #11]
	bdata[4] = hmcmd->fb_type;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	733b      	strb	r3, [r7, #12]
    bdata[5] = hmcmd->ctrl_param.gravity_compensation; // TODO : new
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001182:	737b      	strb	r3, [r7, #13]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CHANGE_CTRL4), (uint8_t *)&bdata, sizeof(bdata));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2108      	movs	r1, #8
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f8a3 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2206      	movs	r2, #6
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fbde 	bl	800095c <SendBytes>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <MCMD_init>:

void MCMD_init(MCMD_HandleTypedef *hmcmd){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t bdata[5];
	bdata[0] = hmcmd->enc_dir;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	743b      	strb	r3, [r7, #16]
	bdata[1] = hmcmd->rot_dir;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	747b      	strb	r3, [r7, #17]
	bdata[2] = hmcmd->calib;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7a1b      	ldrb	r3, [r3, #8]
 80011c0:	74bb      	strb	r3, [r7, #18]
	bdata[3] = hmcmd->limit_sw_type;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	79db      	ldrb	r3, [r3, #7]
 80011c6:	74fb      	strb	r3, [r7, #19]
	bdata[5] = hmcmd->kind;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	757b      	strb	r3, [r7, #21]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT1), bdata, sizeof(bdata));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2102      	movs	r1, #2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f87e 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	2205      	movs	r2, #5
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fbb9 	bl	800095c <SendBytes>
	float fdata[2];
	fdata[0] = hmcmd->offset;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	60bb      	str	r3, [r7, #8]
	fdata[1] = hmcmd->calib_duty;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT2), (uint8_t *)&fdata, sizeof(fdata));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2103      	movs	r1, #3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f86a 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2208      	movs	r2, #8
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fba5 	bl	800095c <SendBytes>

	fdata[0] = hmcmd->quant_per_unit;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	60bb      	str	r3, [r7, #8]
	fdata[1] = 0;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_INIT3), (uint8_t *)&fdata, sizeof(fdata));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f856 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2208      	movs	r2, #8
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fb91 	bl	800095c <SendBytes>
	HAL_Delay(50); // これないと動かない(なぜ?)
 800123a:	2032      	movs	r0, #50	@ 0x32
 800123c:	f001 f828 	bl	8002290 <HAL_Delay>
	MCMD_ChangeControl(hmcmd);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff49 	bl	80010d8 <MCMD_ChangeControl>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <MCMD_Calib>:

void MCMD_Calib(MCMD_HandleTypedef *hmcmd){
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_CALIB), bdata, sizeof(bdata));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2109      	movs	r1, #9
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f83a 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2204      	movs	r2, #4
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fb75 	bl	800095c <SendBytes>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <MCMD_Control_Enable>:
		HAL_Delay(10);
	}
	printf("Calibration End\r\n");
}

void MCMD_Control_Enable(MCMD_HandleTypedef *hmcmd){
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_ENABLE), bdata, sizeof(bdata));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	210a      	movs	r1, #10
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f824 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fb5f 	bl	800095c <SendBytes>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <MCMD_SetTarget>:
void MCMD_Control_Disable(MCMD_HandleTypedef *hmcmd){
	uint8_t bdata[4];
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_DISABLE), bdata, sizeof(bdata));
}

void MCMD_SetTarget(MCMD_HandleTypedef *hmcmd, float target){
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	ed87 0a00 	vstr	s0, [r7]
	SendBytes(Make_CAN_ID_from_CAN_Device(&(hmcmd->device), MCMD_CMD_SET_TARGET), (uint8_t *)&target, sizeof(target));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	210c      	movs	r1, #12
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f80c 	bl	80012d4 <Make_CAN_ID_from_CAN_Device>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	463b      	mov	r3, r7
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fb48 	bl	800095c <SendBytes>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Make_CAN_ID_from_CAN_Device>:
/**
 * @brief CANのIDを設定する. 上16bitのみを使用
 * @param CAN_Device*
 * @param cmd
 */
uint64_t Make_CAN_ID_from_CAN_Device(CAN_Device* _can_device, uint8_t cmd){  // mainからmcmdなどへの送信
 80012d4:	b4b0      	push	{r4, r5, r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
    uint8_t node_type = (uint8_t)(_can_device->node_type) & (0b111);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	73fb      	strb	r3, [r7, #15]
    return (((node_type&0b111)<<11) | (((_can_device->node_id)&0b111)<<8) | (((_can_device->device_num)&0b111)<<5)
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	02db      	lsls	r3, r3, #11
 80012ee:	f403 5260 	and.w	r2, r3, #14336	@ 0x3800
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	b2db      	uxtb	r3, r3
 8001306:	431a      	orrs	r2, r3
            | (cmd&0b11111) );
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	4313      	orrs	r3, r2
 8001310:	17da      	asrs	r2, r3, #31
 8001312:	461c      	mov	r4, r3
 8001314:	4615      	mov	r5, r2
 8001316:	4622      	mov	r2, r4
 8001318:	462b      	mov	r3, r5
}
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bcb0      	pop	{r4, r5, r7}
 8001324:	4770      	bx	lr

08001326 <Make_CAN_ID>:
 * @param node_type
 * @param node_id
 * @param device_num
 * @param cmd
 */
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
 8001326:	e92d 0390 	stmdb	sp!, {r4, r7, r8, r9}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	4603      	mov	r3, r0
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	460b      	mov	r3, r1
 8001340:	717b      	strb	r3, [r7, #5]
 8001342:	4613      	mov	r3, r2
 8001344:	713b      	strb	r3, [r7, #4]
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	02db      	lsls	r3, r3, #11
 800134a:	f403 5260 	and.w	r2, r3, #14336	@ 0x3800
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001356:	431a      	orrs	r2, r3
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	015b      	lsls	r3, r3, #5
 800135c:	b2db      	uxtb	r3, r3
 800135e:	431a      	orrs	r2, r3
             | (cmd&0b11111) );
 8001360:	793b      	ldrb	r3, [r7, #4]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	4313      	orrs	r3, r2
 8001368:	17da      	asrs	r2, r3, #31
 800136a:	4698      	mov	r8, r3
 800136c:	4691      	mov	r9, r2
 800136e:	4642      	mov	r2, r8
 8001370:	464b      	mov	r3, r9
}
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	e8bd 0390 	ldmia.w	sp!, {r4, r7, r8, r9}
 800137e:	4770      	bx	lr

08001380 <Extract_CAN_Device>:

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 800138a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	0942      	lsrs	r2, r0, #5
 8001398:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 800139c:	094b      	lsrs	r3, r1, #5
 800139e:	b2d3      	uxtb	r3, r2
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 80013a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	0a02      	lsrs	r2, r0, #8
 80013b6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013ba:	0a0b      	lsrs	r3, r1, #8
 80013bc:	b2d3      	uxtb	r3, r2
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 80013c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	0ac2      	lsrs	r2, r0, #11
 80013d4:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 80013d8:	0acb      	lsrs	r3, r1, #11
 80013da:	b2d3      	uxtb	r3, r2
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	723b      	strb	r3, [r7, #8]
    return ans;
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	f107 0208 	add.w	r2, r7, #8
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
 80013f0:	8019      	strh	r1, [r3, #0]
 80013f2:	3302      	adds	r3, #2
 80013f4:	0c12      	lsrs	r2, r2, #16
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	2300      	movs	r3, #0
 80013fa:	7b3a      	ldrb	r2, [r7, #12]
 80013fc:	f362 0307 	bfi	r3, r2, #0, #8
 8001400:	7b7a      	ldrb	r2, [r7, #13]
 8001402:	f362 230f 	bfi	r3, r2, #8, #8
 8001406:	7bba      	ldrb	r2, [r7, #14]
 8001408:	f362 4317 	bfi	r3, r2, #16, #8
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	e9c7 0100 	strd	r0, r1, [r7]
 8001422:	783b      	ldrb	r3, [r7, #0]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 8001442:	1df9      	adds	r1, r7, #7
 8001444:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001448:	2201      	movs	r2, #1
 800144a:	4804      	ldr	r0, [pc, #16]	@ (800145c <__io_putchar+0x24>)
 800144c:	f004 fa0c 	bl	8005868 <HAL_UART_Transmit>
    return ch;
 8001450:	79fb      	ldrb	r3, [r7, #7]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20002728 	.word	0x20002728

08001460 <HAL_CAN_TxMailbox0CompleteCallback>:

// ... ここまではprintfの設定など

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001468:	f7ff f96c 	bl	8000744 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 800147c:	f7ff f968 	bl	8000750 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 8001490:	f7ff f958 	bl	8000744 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014a4:	f7ff f954 	bl	8000750 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2CompleteCallbackCalled();
 80014b8:	f7ff f944 	bl	8000744 <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    WhenTxMailbox0_1_2AbortCallbackCalled();
 80014cc:	f7ff f940 	bl	8000750 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff f93a 	bl	800075c <WhenCANRxFifo0MsgPending>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20002d18 	.word	0x20002d18

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f8:	f000 fe6d 	bl	80021d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fc:	f000 f8a2 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001500:	f000 fa12 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 8001504:	f000 f9f2 	bl	80018ec <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001508:	f000 f992 	bl	8001830 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800150c:	f000 f9c0 	bl	8001890 <MX_USB_OTG_FS_PCD_Init>
  MX_ETH_Init();
 8001510:	f000 f940 	bl	8001794 <MX_ETH_Init>
  MX_CAN1_Init();
 8001514:	f000 f908 	bl	8001728 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Initializing CAN System:Begin\n\r");
 8001518:	483f      	ldr	r0, [pc, #252]	@ (8001618 <main+0x124>)
 800151a:	f006 f9e7 	bl	80078ec <iprintf>
  HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	@ 0x64
 8001520:	f000 feb6 	bl	8002290 <HAL_Delay>

  CAN_SystemInit(&hcan1); // F7のCAN通信のinit
 8001524:	483d      	ldr	r0, [pc, #244]	@ (800161c <main+0x128>)
 8001526:	f7ff fa69 	bl	80009fc <CAN_SystemInit>

    // デバイス数の設定 (今回はmcmd4が1枚)
  num_of_devices.mcmd3 = 1;
 800152a:	4b3d      	ldr	r3, [pc, #244]	@ (8001620 <main+0x12c>)
 800152c:	2201      	movs	r2, #1
 800152e:	709a      	strb	r2, [r3, #2]
  num_of_devices.mcmd4 = 0;
 8001530:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <main+0x12c>)
 8001532:	2200      	movs	r2, #0
 8001534:	715a      	strb	r2, [r3, #5]
  num_of_devices.air = 0;
 8001536:	4b3a      	ldr	r3, [pc, #232]	@ (8001620 <main+0x12c>)
 8001538:	2200      	movs	r2, #0
 800153a:	711a      	strb	r2, [r3, #4]
  num_of_devices.servo = 0;
 800153c:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <main+0x12c>)
 800153e:	2200      	movs	r2, #0
 8001540:	70da      	strb	r2, [r3, #3]

  printf("Start Initializing CAN System:End\n\r");
 8001542:	4838      	ldr	r0, [pc, #224]	@ (8001624 <main+0x130>)
 8001544:	f006 f9d2 	bl	80078ec <iprintf>
  HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f000 fea1 	bl	8002290 <HAL_Delay>
  CAN_WaitConnect(&num_of_devices);  // 設定された全てのCANモジュール基板との接続が確認できるまで待機
 800154e:	4834      	ldr	r0, [pc, #208]	@ (8001620 <main+0x12c>)
 8001550:	f7ff fcfc 	bl	8000f4c <CAN_WaitConnect>


  printf("CAN Finished\n\r");
 8001554:	4834      	ldr	r0, [pc, #208]	@ (8001628 <main+0x134>)
 8001556:	f006 f9c9 	bl	80078ec <iprintf>
  // ここからはCANモジュール基板の設定
  // 接続先のMCMDの設定
  mcmd3_struct.device.node_type = NODE_MCMD3;  // nodeのタイプ (NODE_MCMD3など)
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <main+0x138>)
 800155c:	2203      	movs	r2, #3
 800155e:	701a      	strb	r2, [r3, #0]
  mcmd3_struct.device.node_id = 0;  // 基板の番号 (基板上の半固定抵抗を回す事で設定できる)
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <main+0x138>)
 8001562:	2200      	movs	r2, #0
 8001564:	705a      	strb	r2, [r3, #1]
  mcmd3_struct.device.device_num = 1;  // モーターの番号(MCMDなら0と1の2つが選べる)
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <main+0x138>)
 8001568:	2201      	movs	r2, #1
 800156a:	709a      	strb	r2, [r3, #2]

  // 制御パラメータの設定
  mcmd3_struct.ctrl_param.ctrl_type = MCMD_CTRL_DUTY;  // 位置制御を行う
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <main+0x138>)
 800156e:	2202      	movs	r2, #2
 8001570:	761a      	strb	r2, [r3, #24]
  mcmd3_struct.ctrl_param.PID_param.kp = 0.1f;  // Pゲイン 0.10
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <main+0x138>)
 8001574:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <main+0x13c>)
 8001576:	61da      	str	r2, [r3, #28]
  mcmd3_struct.ctrl_param.PID_param.ki = 0.0f;  // Iゲイン 0.0
 8001578:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <main+0x138>)
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
  mcmd3_struct.ctrl_param.PID_param.kd = 0.0f;  // Dゲイン 0.0 (Dゲインは使いにくい)
 8001580:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <main+0x138>)
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
  mcmd3_struct.ctrl_param.accel_limit = ACCEL_LIMIT_ENABLE;  // PIDの偏差をclipするか
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <main+0x138>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  mcmd3_struct.ctrl_param.accel_limit_size = 2.0f;  // PIDの偏差をclipする場合の絶対値のmax値
 8001590:	4b26      	ldr	r3, [pc, #152]	@ (800162c <main+0x138>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001596:	639a      	str	r2, [r3, #56]	@ 0x38
  mcmd3_struct.ctrl_param.feedback = MCMD_FB_ENABLE;  // MCMDからF7にフィードバックを送信するか否か
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <main+0x138>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  mcmd3_struct.ctrl_param.timup_monitor = TIMUP_MONITOR_DISABLE;  // timeupは未実装なのでDISABLE。
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <main+0x138>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  mcmd3_struct.enc_dir = MCMD_DIR_FW;  // Encoderの回転方向設定
 80015a8:	4b20      	ldr	r3, [pc, #128]	@ (800162c <main+0x138>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	711a      	strb	r2, [r3, #4]
  mcmd3_struct.rot_dir = MCMD_DIR_FW;  // モーターの回転方向設定
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <main+0x138>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	715a      	strb	r2, [r3, #5]
  mcmd3_struct.quant_per_unit = 0.00205f;  // エンコーダーの分解能に対する制御値の変化量の割合
 80015b4:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <main+0x138>)
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <main+0x140>)
 80015b8:	615a      	str	r2, [r3, #20]

  // 原点サーチの設定
  mcmd3_struct.limit_sw_type = LIMIT_SW_NC;  // 原点サーチにNomaly Closedのスイッチを用いる
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <main+0x138>)
 80015bc:	2200      	movs	r2, #0
 80015be:	71da      	strb	r2, [r3, #7]
  mcmd3_struct.calib = CALIBRATION_DISABLE;  // 原点サーチを行う。
 80015c0:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <main+0x138>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	721a      	strb	r2, [r3, #8]
  mcmd3_struct.calib_duty = -0.1f;  // 原点サーチ時のduty
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <main+0x138>)
 80015c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <main+0x144>)
 80015ca:	60da      	str	r2, [r3, #12]
  mcmd3_struct.offset = 0.0f;  // 原点のオフセット
 80015cc:	4b17      	ldr	r3, [pc, #92]	@ (800162c <main+0x138>)
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  mcmd3_struct.fb_type = MCMD_FB_VEL;  // 読み取った位置情報をF7にフィードバックする。
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <main+0x138>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	70da      	strb	r2, [r3, #3]

  // パラメータなどの設定と動作命令をMCMDに送信する
  MCMD_init(&mcmd3_struct);
 80015da:	4814      	ldr	r0, [pc, #80]	@ (800162c <main+0x138>)
 80015dc:	f7ff fde4 	bl	80011a8 <MCMD_init>
  HAL_Delay(10);
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 fe55 	bl	8002290 <HAL_Delay>
  MCMD_Calib(&mcmd3_struct);  // キャリブレーションを行う
 80015e6:	4811      	ldr	r0, [pc, #68]	@ (800162c <main+0x138>)
 80015e8:	f7ff fe31 	bl	800124e <MCMD_Calib>
  HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f000 fe4f 	bl	8002290 <HAL_Delay>
  //MCMD_Wait_For_Calib(&mcmd3_struct);  // キャリブレーションが終わるまで待つ
  MCMD_SetTarget(&mcmd3_struct, 0.3f);  // 目標値(0.0)を設定
 80015f2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 800163c <main+0x148>
 80015f6:	480d      	ldr	r0, [pc, #52]	@ (800162c <main+0x138>)
 80015f8:	f7ff fe55 	bl	80012a6 <MCMD_SetTarget>
  HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f000 fe47 	bl	8002290 <HAL_Delay>
  MCMD_Control_Enable(&mcmd3_struct);  // 制御開始
 8001602:	480a      	ldr	r0, [pc, #40]	@ (800162c <main+0x138>)
 8001604:	f7ff fe39 	bl	800127a <MCMD_Control_Enable>
  HAL_Delay(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f000 fe41 	bl	8002290 <HAL_Delay>

  printf("Finished");
 800160e:	480c      	ldr	r0, [pc, #48]	@ (8001640 <main+0x14c>)
 8001610:	f006 f96c 	bl	80078ec <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <main+0x120>
 8001618:	080098e4 	.word	0x080098e4
 800161c:	20002650 	.word	0x20002650
 8001620:	20002d18 	.word	0x20002d18
 8001624:	0800990c 	.word	0x0800990c
 8001628:	08009930 	.word	0x08009930
 800162c:	20002d20 	.word	0x20002d20
 8001630:	3dcccccd 	.word	0x3dcccccd
 8001634:	3b06594b 	.word	0x3b06594b
 8001638:	bdcccccd 	.word	0xbdcccccd
 800163c:	3e99999a 	.word	0x3e99999a
 8001640:	08009940 	.word	0x08009940

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	2234      	movs	r2, #52	@ 0x34
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fa92 	bl	8007b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001668:	f002 ff54 	bl	8004514 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <SystemClock_Config+0xdc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a2b      	ldr	r2, [pc, #172]	@ (8001720 <SystemClock_Config+0xdc>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <SystemClock_Config+0xdc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001684:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <SystemClock_Config+0xe0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800168c:	4a25      	ldr	r2, [pc, #148]	@ (8001724 <SystemClock_Config+0xe0>)
 800168e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <SystemClock_Config+0xe0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80016a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80016b8:	2360      	movs	r3, #96	@ 0x60
 80016ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 ff81 	bl	80045d4 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016d8:	f000 f9c8 	bl	8001a6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016dc:	f002 ff2a 	bl	8004534 <HAL_PWREx_EnableOverDrive>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016e6:	f000 f9c1 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ea:	230f      	movs	r3, #15
 80016ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2302      	movs	r3, #2
 80016f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	2103      	movs	r1, #3
 8001706:	4618      	mov	r0, r3
 8001708:	f003 fa12 	bl	8004b30 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001712:	f000 f9ab 	bl	8001a6c <Error_Handler>
  }
}
 8001716:	bf00      	nop
 8001718:	3750      	adds	r7, #80	@ 0x50
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40007000 	.word	0x40007000

08001728 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_CAN1_Init+0x64>)
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <MX_CAN1_Init+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_CAN1_Init+0x64>)
 8001734:	2206      	movs	r2, #6
 8001736:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_CAN1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800173e:	4b13      	ldr	r3, [pc, #76]	@ (800178c <MX_CAN1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_CAN1_Init+0x64>)
 8001746:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800174a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_CAN1_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_CAN1_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_CAN1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_CAN1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_CAN1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	@ (800178c <MX_CAN1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_CAN1_Init+0x64>)
 8001772:	2201      	movs	r2, #1
 8001774:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_CAN1_Init+0x64>)
 8001778:	f000 fdae 	bl	80022d8 <HAL_CAN_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001782:	f000 f973 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20002650 	.word	0x20002650
 8001790:	40006400 	.word	0x40006400

08001794 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001798:	4b1f      	ldr	r3, [pc, #124]	@ (8001818 <MX_ETH_Init+0x84>)
 800179a:	4a20      	ldr	r2, [pc, #128]	@ (800181c <MX_ETH_Init+0x88>)
 800179c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017ac:	22e1      	movs	r2, #225	@ 0xe1
 80017ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_ETH_Init+0x84>)
 80017c4:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <MX_ETH_Init+0x8c>)
 80017c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_ETH_Init+0x84>)
 80017ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_ETH_Init+0x84>)
 80017d2:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <MX_ETH_Init+0x90>)
 80017d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_ETH_Init+0x84>)
 80017d8:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <MX_ETH_Init+0x94>)
 80017da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_ETH_Init+0x84>)
 80017de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80017e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80017e4:	480c      	ldr	r0, [pc, #48]	@ (8001818 <MX_ETH_Init+0x84>)
 80017e6:	f002 f861 	bl	80038ac <HAL_ETH_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80017f0:	f000 f93c 	bl	8001a6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80017f4:	2238      	movs	r2, #56	@ 0x38
 80017f6:	2100      	movs	r1, #0
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <MX_ETH_Init+0x98>)
 80017fa:	f006 f9bf 	bl	8007b7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <MX_ETH_Init+0x98>)
 8001800:	2221      	movs	r2, #33	@ 0x21
 8001802:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_ETH_Init+0x98>)
 8001806:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800180a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_ETH_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20002678 	.word	0x20002678
 800181c:	40028000 	.word	0x40028000
 8001820:	20002d64 	.word	0x20002d64
 8001824:	20000274 	.word	0x20000274
 8001828:	200001d4 	.word	0x200001d4
 800182c:	20002618 	.word	0x20002618

08001830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	@ (800188c <MX_USART3_UART_Init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	@ (8001888 <MX_USART3_UART_Init+0x58>)
 8001874:	f003 ffaa 	bl	80057cc <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800187e:	f000 f8f5 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20002728 	.word	0x20002728
 800188c:	40004800 	.word	0x40004800

08001890 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001896:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800189a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800189e:	2206      	movs	r2, #6
 80018a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b0:	2202      	movs	r2, #2
 80018b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018d4:	f002 fcd5 	bl	8004282 <HAL_PCD_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80018de:	f000 f8c5 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20002810 	.word	0x20002810

080018ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <MX_DMA_Init+0x38>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <MX_DMA_Init+0x38>)
 80018f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <MX_DMA_Init+0x38>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	200e      	movs	r0, #14
 8001910:	f001 fc19 	bl	8003146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001914:	200e      	movs	r0, #14
 8001916:	f001 fc32 	bl	800317e <HAL_NVIC_EnableIRQ>

}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	4b47      	ldr	r3, [pc, #284]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a46      	ldr	r2, [pc, #280]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b44      	ldr	r3, [pc, #272]	@ (8001a5c <MX_GPIO_Init+0x134>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a40      	ldr	r2, [pc, #256]	@ (8001a5c <MX_GPIO_Init+0x134>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b3e      	ldr	r3, [pc, #248]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a3a      	ldr	r2, [pc, #232]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <MX_GPIO_Init+0x134>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a34      	ldr	r2, [pc, #208]	@ (8001a5c <MX_GPIO_Init+0x134>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <MX_GPIO_Init+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a28      	ldr	r2, [pc, #160]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <MX_GPIO_Init+0x134>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80019d4:	4822      	ldr	r0, [pc, #136]	@ (8001a60 <MX_GPIO_Init+0x138>)
 80019d6:	f002 fc3b 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	2140      	movs	r1, #64	@ 0x40
 80019de:	4821      	ldr	r0, [pc, #132]	@ (8001a64 <MX_GPIO_Init+0x13c>)
 80019e0:	f002 fc36 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	@ (8001a68 <MX_GPIO_Init+0x140>)
 80019fc:	f002 fa7c 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a00:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_GPIO_Init+0x138>)
 8001a1a:	f002 fa6d 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a1e:	2340      	movs	r3, #64	@ 0x40
 8001a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <MX_GPIO_Init+0x13c>)
 8001a36:	f002 fa5f 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_GPIO_Init+0x13c>)
 8001a4e:	f002 fa53 	bl	8003ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40021800 	.word	0x40021800
 8001a68:	40020800 	.word	0x40020800

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <Error_Handler+0x8>

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <HAL_MspInit+0x44>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_MspInit+0x44>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_MspInit+0x44>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_MspInit+0x44>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_MspInit+0x44>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_MspInit+0x44>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <HAL_CAN_MspInit+0xac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d13f      	bne.n	8001b62 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_CAN_MspInit+0xb0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b12:	2303      	movs	r3, #3
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b22:	2309      	movs	r3, #9
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4811      	ldr	r0, [pc, #68]	@ (8001b74 <HAL_CAN_MspInit+0xb4>)
 8001b2e:	f002 f9e3 	bl	8003ef8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2013      	movs	r0, #19
 8001b38:	f001 fb05 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001b3c:	2013      	movs	r0, #19
 8001b3e:	f001 fb1e 	bl	800317e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2014      	movs	r0, #20
 8001b48:	f001 fafd 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b4c:	2014      	movs	r0, #20
 8001b4e:	f001 fb16 	bl	800317e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2015      	movs	r0, #21
 8001b58:	f001 faf5 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b5c:	2015      	movs	r0, #21
 8001b5e:	f001 fb0e 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40006400 	.word	0x40006400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020c00 	.word	0x40020c00

08001b78 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a4e      	ldr	r2, [pc, #312]	@ (8001cd0 <HAL_ETH_MspInit+0x158>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	f040 8096 	bne.w	8001cc8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc0:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	4a40      	ldr	r2, [pc, #256]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	4a3a      	ldr	r2, [pc, #232]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf0:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4a34      	ldr	r2, [pc, #208]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c08:	4b32      	ldr	r3, [pc, #200]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c2c:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c30:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c38:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <HAL_ETH_MspInit+0x15c>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c44:	2332      	movs	r3, #50	@ 0x32
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c54:	230b      	movs	r3, #11
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481e      	ldr	r0, [pc, #120]	@ (8001cd8 <HAL_ETH_MspInit+0x160>)
 8001c60:	f002 f94a 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c64:	2386      	movs	r3, #134	@ 0x86
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c74:	230b      	movs	r3, #11
 8001c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4817      	ldr	r0, [pc, #92]	@ (8001cdc <HAL_ETH_MspInit+0x164>)
 8001c80:	f002 f93a 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001c84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c96:	230b      	movs	r3, #11
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480f      	ldr	r0, [pc, #60]	@ (8001ce0 <HAL_ETH_MspInit+0x168>)
 8001ca2:	f002 f929 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001ca6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cb8:	230b      	movs	r3, #11
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <HAL_ETH_MspInit+0x16c>)
 8001cc4:	f002 f918 	bl	8003ef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3738      	adds	r7, #56	@ 0x38
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40028000 	.word	0x40028000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40021800 	.word	0x40021800

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0ae      	sub	sp, #184	@ 0xb8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2290      	movs	r2, #144	@ 0x90
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f005 ff37 	bl	8007b7c <memset>
  if(huart->Instance==USART3)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a3d      	ldr	r2, [pc, #244]	@ (8001e08 <HAL_UART_MspInit+0x120>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d172      	bne.n	8001dfe <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f928 	bl	8004f7c <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d32:	f7ff fe9b 	bl	8001a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d36:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	4a34      	ldr	r2, [pc, #208]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d42:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a2e      	ldr	r2, [pc, #184]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <HAL_UART_MspInit+0x124>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d80:	2307      	movs	r3, #7
 8001d82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d86:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4820      	ldr	r0, [pc, #128]	@ (8001e10 <HAL_UART_MspInit+0x128>)
 8001d8e:	f002 f8b3 	bl	8003ef8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001d94:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <HAL_UART_MspInit+0x130>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dba:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001dd2:	4810      	ldr	r0, [pc, #64]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dd4:	f001 f9ee 	bl	80031b4 <HAL_DMA_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001dde:	f7ff fe45 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001de6:	671a      	str	r2, [r3, #112]	@ 0x70
 8001de8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_UART_MspInit+0x12c>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	2027      	movs	r0, #39	@ 0x27
 8001df4:	f001 f9a7 	bl	8003146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001df8:	2027      	movs	r0, #39	@ 0x27
 8001dfa:	f001 f9c0 	bl	800317e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	37b8      	adds	r7, #184	@ 0xb8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40004800 	.word	0x40004800
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020c00 	.word	0x40020c00
 8001e14:	200027b0 	.word	0x200027b0
 8001e18:	40026058 	.word	0x40026058

08001e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0ae      	sub	sp, #184	@ 0xb8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2290      	movs	r2, #144	@ 0x90
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 fe9d 	bl	8007b7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e4a:	d159      	bne.n	8001f00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f88d 	bl	8004f7c <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001e68:	f7ff fe00 	bl	8001a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b26      	ldr	r3, [pc, #152]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e78:	4b23      	ldr	r3, [pc, #140]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e84:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001eac:	f002 f824 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001eb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4810      	ldr	r0, [pc, #64]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001ecc:	f002 f814 	bl	8003ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eda:	6353      	str	r3, [r2, #52]	@ 0x34
 8001edc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f00:	bf00      	nop
 8001f02:	37b8      	adds	r7, #184	@ 0xb8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000

08001f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <NMI_Handler+0x4>

08001f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <MemManage_Handler+0x4>

08001f28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f66:	f000 f973 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <DMA1_Stream3_IRQHandler+0x10>)
 8001f76:	f001 fa5d 	bl	8003434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200027b0 	.word	0x200027b0

08001f84 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f88:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <CAN1_TX_IRQHandler+0x10>)
 8001f8a:	f000 fe0e 	bl	8002baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20002650 	.word	0x20002650

08001f98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <CAN1_RX0_IRQHandler+0x10>)
 8001f9e:	f000 fe04 	bl	8002baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20002650 	.word	0x20002650

08001fac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	@ (8001fbc <CAN1_RX1_IRQHandler+0x10>)
 8001fb2:	f000 fdfa 	bl	8002baa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20002650 	.word	0x20002650

08001fc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fc4:	4802      	ldr	r0, [pc, #8]	@ (8001fd0 <USART3_IRQHandler+0x10>)
 8001fc6:	f003 fcd3 	bl	8005970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20002728 	.word	0x20002728

08001fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_kill>:

int _kill(int pid, int sig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fee:	f005 fe17 	bl	8007c20 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2216      	movs	r2, #22
 8001ff6:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_exit>:

void _exit (int status)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800200c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ffe7 	bl	8001fe4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002016:	bf00      	nop
 8002018:	e7fd      	b.n	8002016 <_exit+0x12>

0800201a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e00a      	b.n	8002042 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800202c:	f3af 8000 	nop.w
 8002030:	4601      	mov	r1, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	60ba      	str	r2, [r7, #8]
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	dbf0      	blt.n	800202c <_read+0x12>
  }

  return len;
 800204a:	687b      	ldr	r3, [r7, #4]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e009      	b.n	800207a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	60ba      	str	r2, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f9e2 	bl	8001438 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	dbf1      	blt.n	8002066 <_write+0x12>
  }
  return len;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_close>:

int _close(int file)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020b4:	605a      	str	r2, [r3, #4]
  return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <_isatty>:

int _isatty(int file)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f005 fd7c 	bl	8007c20 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20080000 	.word	0x20080000
 8002154:	00000400 	.word	0x00000400
 8002158:	20002d6c 	.word	0x20002d6c
 800215c:	20002ec0 	.word	0x20002ec0

08002160 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SystemInit+0x20>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	4a05      	ldr	r2, [pc, #20]	@ (8002180 <SystemInit+0x20>)
 800216c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800218a:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800218c:	4a0e      	ldr	r2, [pc, #56]	@ (80021c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021a0:	4c0b      	ldr	r4, [pc, #44]	@ (80021d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021ae:	f7ff ffd7 	bl	8002160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021b2:	f005 fd3b 	bl	8007c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b6:	f7ff f99d 	bl	80014f4 <main>
  bx  lr    
 80021ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80021c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021c8:	08009cf0 	.word	0x08009cf0
  ldr r2, =_sbss
 80021cc:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 80021d0:	20002ec0 	.word	0x20002ec0

080021d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d4:	e7fe      	b.n	80021d4 <ADC_IRQHandler>

080021d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021da:	2003      	movs	r0, #3
 80021dc:	f000 ffa8 	bl	8003130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f000 f805 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e6:	f7ff fc47 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ffc3 	bl	800319a <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800222c:	f000 ff8b 	bl	8003146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000000 	.word	0x20000000
 8002248:	20000008 	.word	0x20000008
 800224c:	20000004 	.word	0x20000004

08002250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000008 	.word	0x20000008
 8002274:	20002d70 	.word	0x20002d70

08002278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20002d70 	.word	0x20002d70

08002290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_Delay+0x44>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0ed      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d102      	bne.n	80022fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fbe2 	bl	8001ac0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800230c:	f7ff ffb4 	bl	8002278 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002312:	e012      	b.n	800233a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002314:	f7ff ffb0 	bl	8002278 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d90b      	bls.n	800233a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2205      	movs	r2, #5
 8002332:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0c5      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0e5      	beq.n	8002314 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0202 	bic.w	r2, r2, #2
 8002356:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002358:	f7ff ff8e 	bl	8002278 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800235e:	e012      	b.n	8002386 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002360:	f7ff ff8a 	bl	8002278 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b0a      	cmp	r3, #10
 800236c:	d90b      	bls.n	8002386 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2205      	movs	r2, #5
 800237e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e09f      	b.n	80024c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1e5      	bne.n	8002360 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7e1b      	ldrb	r3, [r3, #24]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e007      	b.n	80023be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7e5b      	ldrb	r3, [r3, #25]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e007      	b.n	80023e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7e9b      	ldrb	r3, [r3, #26]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0220 	bic.w	r2, r2, #32
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7edb      	ldrb	r3, [r3, #27]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0210 	bic.w	r2, r2, #16
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e007      	b.n	800243c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0210 	orr.w	r2, r2, #16
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1b      	ldrb	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d108      	bne.n	8002456 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e007      	b.n	8002466 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7f5b      	ldrb	r3, [r3, #29]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0204 	orr.w	r2, r2, #4
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e007      	b.n	8002490 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d003      	beq.n	80024f6 <HAL_CAN_ConfigFilter+0x26>
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	f040 80c7 	bne.w	8002684 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a69      	ldr	r2, [pc, #420]	@ (80026a0 <HAL_CAN_ConfigFilter+0x1d0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d001      	beq.n	8002504 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002500:	4b68      	ldr	r3, [pc, #416]	@ (80026a4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002502:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4a63      	ldr	r2, [pc, #396]	@ (80026a4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d111      	bne.n	8002540 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d123      	bne.n	80025b2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	401a      	ands	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800258c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3248      	adds	r2, #72	@ 0x48
 8002592:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a8:	6979      	ldr	r1, [r7, #20]
 80025aa:	3348      	adds	r3, #72	@ 0x48
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d122      	bne.n	8002600 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3248      	adds	r2, #72	@ 0x48
 80025e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f6:	6979      	ldr	r1, [r7, #20]
 80025f8:	3348      	adds	r3, #72	@ 0x48
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800261a:	e007      	b.n	800262c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d109      	bne.n	8002648 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002646:	e007      	b.n	8002658 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	e006      	b.n	8002692 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002688:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40003400 	.word	0x40003400
 80026a4:	40006400 	.word	0x40006400

080026a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d12e      	bne.n	800271a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff fdd0 	bl	8002278 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026da:	e012      	b.n	8002702 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026dc:	f7ff fdcc 	bl	8002278 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b0a      	cmp	r3, #10
 80026e8:	d90b      	bls.n	8002702 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e012      	b.n	8002728 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e006      	b.n	8002728 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800274e:	7ffb      	ldrb	r3, [r7, #31]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d003      	beq.n	800275c <HAL_CAN_AddTxMessage+0x2c>
 8002754:	7ffb      	ldrb	r3, [r7, #31]
 8002756:	2b02      	cmp	r3, #2
 8002758:	f040 80ad 	bne.w	80028b6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8095 	beq.w	80028a6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	0e1b      	lsrs	r3, r3, #24
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027a2:	68f9      	ldr	r1, [r7, #12]
 80027a4:	6809      	ldr	r1, [r1, #0]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3318      	adds	r3, #24
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	440b      	add	r3, r1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3318      	adds	r3, #24
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	440b      	add	r3, r1
 80027e4:	3304      	adds	r3, #4
 80027e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d111      	bne.n	8002814 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3318      	adds	r3, #24
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6811      	ldr	r1, [r2, #0]
 8002804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3318      	adds	r3, #24
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	440b      	add	r3, r1
 8002810:	3304      	adds	r3, #4
 8002812:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3307      	adds	r3, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	061a      	lsls	r2, r3, #24
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3306      	adds	r3, #6
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3305      	adds	r3, #5
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	4313      	orrs	r3, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	3204      	adds	r2, #4
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	4610      	mov	r0, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	ea43 0200 	orr.w	r2, r3, r0
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	440b      	add	r3, r1
 8002846:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800284a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3303      	adds	r3, #3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	061a      	lsls	r2, r3, #24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3302      	adds	r3, #2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	4610      	mov	r0, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	ea43 0200 	orr.w	r2, r3, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	440b      	add	r3, r1
 800287c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002880:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3318      	adds	r3, #24
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3318      	adds	r3, #24
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	440b      	add	r3, r1
 80028a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e00e      	b.n	80028c4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e006      	b.n	80028c4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3724      	adds	r7, #36	@ 0x24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d11d      	bne.n	800292c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d003      	beq.n	800295e <HAL_CAN_GetRxMessage+0x24>
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 80f3 	bne.w	8002b44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0e7      	b.n	8002b52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d8      	b.n	8002b52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	331b      	adds	r3, #27
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0204 	and.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	331b      	adds	r3, #27
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0d5b      	lsrs	r3, r3, #21
 80029ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	331b      	adds	r3, #27
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	08db      	lsrs	r3, r3, #3
 80029e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	331b      	adds	r3, #27
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0202 	and.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	331b      	adds	r3, #27
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	331b      	adds	r3, #27
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	331b      	adds	r3, #27
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4413      	add	r3, r2
 8002a42:	3304      	adds	r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0c1b      	lsrs	r3, r3, #16
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0a1a      	lsrs	r2, r3, #8
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0c1a      	lsrs	r2, r3, #16
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	3302      	adds	r3, #2
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e1a      	lsrs	r2, r3, #24
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	3303      	adds	r3, #3
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0a1a      	lsrs	r2, r3, #8
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3305      	adds	r3, #5
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0c1a      	lsrs	r2, r3, #16
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	3306      	adds	r3, #6
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0e1a      	lsrs	r2, r3, #24
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3307      	adds	r3, #7
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0220 	orr.w	r2, r2, #32
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	e007      	b.n	8002b40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0220 	orr.w	r2, r2, #32
 8002b3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e006      	b.n	8002b52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
  }
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d002      	beq.n	8002b7c <HAL_CAN_ActivateNotification+0x1e>
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d109      	bne.n	8002b90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6959      	ldr	r1, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e006      	b.n	8002b9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	@ 0x28
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d07c      	beq.n	8002cea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d023      	beq.n	8002c42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fe fc27 	bl	8001460 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c12:	e016      	b.n	8002c42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c26:	e00c      	b.n	8002c42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3a:	e002      	b.n	8002c42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe fc19 	bl	8001474 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d024      	beq.n	8002c96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7fe fc11 	bl	8001488 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c66:	e016      	b.n	8002c96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7a:	e00c      	b.n	8002c96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8e:	e002      	b.n	8002c96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe fc03 	bl	800149c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d024      	beq.n	8002cea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ca8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fe fbfb 	bl	80014b0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cba:	e016      	b.n	8002cea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cce:	e00c      	b.n	8002cea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ce2:	e002      	b.n	8002cea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe fbed 	bl	80014c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00c      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d006      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2208      	movs	r2, #8
 8002d28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8f4 	bl	8002f18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fe fbc5 	bl	80014d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2210      	movs	r2, #16
 8002d70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d006      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8d6 	bl	8002f40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d009      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f8bd 	bl	8002f2c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2210      	movs	r2, #16
 8002dcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f8c0 	bl	8002f54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d006      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2208      	movs	r2, #8
 8002dee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8b9 	bl	8002f68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d07b      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d072      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	f043 0302 	orr.w	r3, r3, #2
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d043      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03e      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e78:	2b60      	cmp	r3, #96	@ 0x60
 8002e7a:	d02b      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x32a>
 8002e7c:	2b60      	cmp	r3, #96	@ 0x60
 8002e7e:	d82e      	bhi.n	8002ede <HAL_CAN_IRQHandler+0x334>
 8002e80:	2b50      	cmp	r3, #80	@ 0x50
 8002e82:	d022      	beq.n	8002eca <HAL_CAN_IRQHandler+0x320>
 8002e84:	2b50      	cmp	r3, #80	@ 0x50
 8002e86:	d82a      	bhi.n	8002ede <HAL_CAN_IRQHandler+0x334>
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d019      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x316>
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d826      	bhi.n	8002ede <HAL_CAN_IRQHandler+0x334>
 8002e90:	2b30      	cmp	r3, #48	@ 0x30
 8002e92:	d010      	beq.n	8002eb6 <HAL_CAN_IRQHandler+0x30c>
 8002e94:	2b30      	cmp	r3, #48	@ 0x30
 8002e96:	d822      	bhi.n	8002ede <HAL_CAN_IRQHandler+0x334>
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d002      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x2f8>
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d005      	beq.n	8002eac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ea0:	e01d      	b.n	8002ede <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	f043 0308 	orr.w	r3, r3, #8
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eaa:	e019      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	f043 0310 	orr.w	r3, r3, #16
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eb4:	e014      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	f043 0320 	orr.w	r3, r3, #32
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ebe:	e00f      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ec8:	e00a      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed2:	e005      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002edc:	e000      	b.n	8002ee0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ede:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002eee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f836 	bl	8002f7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	@ 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fac:	4013      	ands	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00
 8002fd4:	05fa0000 	.word	0x05fa0000

08002fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fdc:	4b04      	ldr	r3, [pc, #16]	@ (8002ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 0307 	and.w	r3, r3, #7
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	2b00      	cmp	r3, #0
 8003004:	db0b      	blt.n	800301e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	4907      	ldr	r1, [pc, #28]	@ (800302c <__NVIC_EnableIRQ+0x38>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2001      	movs	r0, #1
 8003016:	fa00 f202 	lsl.w	r2, r0, r2
 800301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000e100 	.word	0xe000e100

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	@ (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	@ (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d301      	bcc.n	8003102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fe:	2301      	movs	r3, #1
 8003100:	e00f      	b.n	8003122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <SysTick_Config+0x40>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310a:	210f      	movs	r1, #15
 800310c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003110:	f7ff ff8e 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <SysTick_Config+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <SysTick_Config+0x40>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010

08003130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff29 	bl	8002f90 <__NVIC_SetPriorityGrouping>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003158:	f7ff ff3e 	bl	8002fd8 <__NVIC_GetPriorityGrouping>
 800315c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7ff ff8e 	bl	8003084 <NVIC_EncodePriority>
 8003168:	4602      	mov	r2, r0
 800316a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff5d 	bl	8003030 <__NVIC_SetPriority>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff31 	bl	8002ff4 <__NVIC_EnableIRQ>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ffa2 	bl	80030ec <SysTick_Config>
 80031a8:	4603      	mov	r3, r0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031c0:	f7ff f85a 	bl	8002278 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e099      	b.n	8003304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0201 	bic.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f0:	e00f      	b.n	8003212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031f2:	f7ff f841 	bl	8002278 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d908      	bls.n	8003212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e078      	b.n	8003304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e8      	bne.n	80031f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4b38      	ldr	r3, [pc, #224]	@ (800330c <HAL_DMA_Init+0x158>)
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	2b04      	cmp	r3, #4
 800326a:	d107      	bne.n	800327c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0307 	bic.w	r3, r3, #7
 8003292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d117      	bne.n	80032d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fa7b 	bl	80037b4 <DMA_CheckFifoParam>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2240      	movs	r2, #64	@ 0x40
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032d2:	2301      	movs	r3, #1
 80032d4:	e016      	b.n	8003304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa32 	bl	8003748 <DMA_CalcBaseAndBitshift>
 80032e4:	4603      	mov	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	223f      	movs	r2, #63	@ 0x3f
 80032ee:	409a      	lsls	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	e010803f 	.word	0xe010803f

08003310 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7fe ffab 	bl	8002278 <HAL_GetTick>
 8003322:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e052      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0216 	bic.w	r2, r2, #22
 8003350:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003360:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_DMA_Abort+0x62>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0208 	bic.w	r2, r2, #8
 8003380:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	e013      	b.n	80033bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003394:	f7fe ff70 	bl	8002278 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d90c      	bls.n	80033bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e015      	b.n	80033e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	223f      	movs	r2, #63	@ 0x3f
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d004      	beq.n	800340e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e00c      	b.n	8003428 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2205      	movs	r2, #5
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003440:	4b8e      	ldr	r3, [pc, #568]	@ (800367c <HAL_DMA_IRQHandler+0x248>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8e      	ldr	r2, [pc, #568]	@ (8003680 <HAL_DMA_IRQHandler+0x24c>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345e:	2208      	movs	r2, #8
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	2208      	movs	r2, #8
 800348e:	409a      	lsls	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	2201      	movs	r2, #1
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f043 0202 	orr.w	r2, r3, #2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034da:	2204      	movs	r2, #4
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d012      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00b      	beq.n	800350c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003510:	2210      	movs	r2, #16
 8003512:	409a      	lsls	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d043      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352e:	2210      	movs	r2, #16
 8003530:	409a      	lsls	r2, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d024      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e01f      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01b      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e016      	b.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0208 	bic.w	r2, r2, #8
 8003592:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	2220      	movs	r2, #32
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 808f 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8087 	beq.w	80036d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	2220      	movs	r2, #32
 80035cc:	409a      	lsls	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b05      	cmp	r3, #5
 80035dc:	d136      	bne.n	800364c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0216 	bic.w	r2, r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <HAL_DMA_IRQHandler+0x1da>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0208 	bic.w	r2, r2, #8
 800361c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003622:	223f      	movs	r2, #63	@ 0x3f
 8003624:	409a      	lsls	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363e:	2b00      	cmp	r3, #0
 8003640:	d07e      	beq.n	8003740 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
        }
        return;
 800364a:	e079      	b.n	8003740 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e02c      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000
 8003680:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d023      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e01e      	b.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0210 	bic.w	r2, r2, #16
 80036b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d022      	beq.n	800372e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2205      	movs	r2, #5
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	3301      	adds	r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d307      	bcc.n	800371c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_DMA_IRQHandler+0x2cc>
 800371a:	e000      	b.n	800371e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800371c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e000      	b.n	8003742 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003740:	bf00      	nop
    }
  }
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	3b10      	subs	r3, #16
 8003758:	4a13      	ldr	r2, [pc, #76]	@ (80037a8 <DMA_CalcBaseAndBitshift+0x60>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	091b      	lsrs	r3, r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003762:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <DMA_CalcBaseAndBitshift+0x64>)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d908      	bls.n	8003788 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <DMA_CalcBaseAndBitshift+0x68>)
 800377e:	4013      	ands	r3, r2
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	659a      	str	r2, [r3, #88]	@ 0x58
 8003786:	e006      	b.n	8003796 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	aaaaaaab 	.word	0xaaaaaaab
 80037ac:	08009964 	.word	0x08009964
 80037b0:	fffffc00 	.word	0xfffffc00

080037b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11f      	bne.n	800380e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d856      	bhi.n	8003882 <DMA_CheckFifoParam+0xce>
 80037d4:	a201      	add	r2, pc, #4	@ (adr r2, 80037dc <DMA_CheckFifoParam+0x28>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	080037ff 	.word	0x080037ff
 80037e4:	080037ed 	.word	0x080037ed
 80037e8:	08003883 	.word	0x08003883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d046      	beq.n	8003886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fc:	e043      	b.n	8003886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003806:	d140      	bne.n	800388a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380c:	e03d      	b.n	800388a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003816:	d121      	bne.n	800385c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d837      	bhi.n	800388e <DMA_CheckFifoParam+0xda>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <DMA_CheckFifoParam+0x70>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003835 	.word	0x08003835
 8003828:	0800383b 	.word	0x0800383b
 800382c:	08003835 	.word	0x08003835
 8003830:	0800384d 	.word	0x0800384d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e030      	b.n	800389c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d025      	beq.n	8003892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384a:	e022      	b.n	8003892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003854:	d11f      	bne.n	8003896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800385a:	e01c      	b.n	8003896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d903      	bls.n	800386a <DMA_CheckFifoParam+0xb6>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d003      	beq.n	8003870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003868:	e018      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      break;
 800386e:	e015      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00e      	beq.n	800389a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      break;
 8003880:	e00b      	b.n	800389a <DMA_CheckFifoParam+0xe6>
      break;
 8003882:	bf00      	nop
 8003884:	e00a      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 8003886:	bf00      	nop
 8003888:	e008      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800388a:	bf00      	nop
 800388c:	e006      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800388e:	bf00      	nop
 8003890:	e004      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e002      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;   
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
    }
  } 
  
  return status; 
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop

080038ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06a      	b.n	8003994 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2223      	movs	r2, #35	@ 0x23
 80038cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fe f951 	bl	8001b78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d6:	4b31      	ldr	r3, [pc, #196]	@ (800399c <HAL_ETH_Init+0xf0>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	4a30      	ldr	r2, [pc, #192]	@ (800399c <HAL_ETH_Init+0xf0>)
 80038dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80038e2:	4b2e      	ldr	r3, [pc, #184]	@ (800399c <HAL_ETH_Init+0xf0>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80038ee:	4b2c      	ldr	r3, [pc, #176]	@ (80039a0 <HAL_ETH_Init+0xf4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <HAL_ETH_Init+0xf4>)
 80038f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80038f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80038fa:	4b29      	ldr	r3, [pc, #164]	@ (80039a0 <HAL_ETH_Init+0xf4>)
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4927      	ldr	r1, [pc, #156]	@ (80039a0 <HAL_ETH_Init+0xf4>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003908:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <HAL_ETH_Init+0xf4>)
 800390a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003922:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe fca8 	bl	8002278 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800392a:	e011      	b.n	8003950 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800392c:	f7fe fca4 	bl	8002278 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800393a:	d909      	bls.n	8003950 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2204      	movs	r2, #4
 8003940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	22e0      	movs	r2, #224	@ 0xe0
 8003948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e021      	b.n	8003994 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e4      	bne.n	800392c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f958 	bl	8003c18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f9ff 	bl	8003d6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa55 	bl	8003e1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	461a      	mov	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f9bd 	bl	8003cfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2210      	movs	r2, #16
 800398e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	40013800 	.word	0x40013800

080039a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4b51      	ldr	r3, [pc, #324]	@ (8003b00 <ETH_SetMACConfig+0x15c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	7c1b      	ldrb	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d102      	bne.n	80039cc <ETH_SetMACConfig+0x28>
 80039c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80039ca:	e000      	b.n	80039ce <ETH_SetMACConfig+0x2a>
 80039cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	7c5b      	ldrb	r3, [r3, #17]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <ETH_SetMACConfig+0x38>
 80039d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80039da:	e000      	b.n	80039de <ETH_SetMACConfig+0x3a>
 80039dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80039de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80039e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7fdb      	ldrb	r3, [r3, #31]
 80039ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80039ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80039f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	7f92      	ldrb	r2, [r2, #30]
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d102      	bne.n	8003a02 <ETH_SetMACConfig+0x5e>
 80039fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a00:	e000      	b.n	8003a04 <ETH_SetMACConfig+0x60>
 8003a02:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	7f1b      	ldrb	r3, [r3, #28]
 8003a0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	791b      	ldrb	r3, [r3, #4]
 8003a18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003a1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003a22:	2a00      	cmp	r2, #0
 8003a24:	d102      	bne.n	8003a2c <ETH_SetMACConfig+0x88>
 8003a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a2a:	e000      	b.n	8003a2e <ETH_SetMACConfig+0x8a>
 8003a2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003a2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	7bdb      	ldrb	r3, [r3, #15]
 8003a34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003a36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003a3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a46:	4313      	orrs	r3, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a5e:	2001      	movs	r0, #1
 8003a60:	f7fe fc16 	bl	8002290 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d101      	bne.n	8003a92 <ETH_SetMACConfig+0xee>
 8003a8e:	2280      	movs	r2, #128	@ 0x80
 8003a90:	e000      	b.n	8003a94 <ETH_SetMACConfig+0xf0>
 8003a92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003a94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003a9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003aa2:	2a01      	cmp	r2, #1
 8003aa4:	d101      	bne.n	8003aaa <ETH_SetMACConfig+0x106>
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	e000      	b.n	8003aac <ETH_SetMACConfig+0x108>
 8003aaa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003aac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003ab4:	2a01      	cmp	r2, #1
 8003ab6:	d101      	bne.n	8003abc <ETH_SetMACConfig+0x118>
 8003ab8:	2204      	movs	r2, #4
 8003aba:	e000      	b.n	8003abe <ETH_SetMACConfig+0x11a>
 8003abc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003ac6:	2a01      	cmp	r2, #1
 8003ac8:	d101      	bne.n	8003ace <ETH_SetMACConfig+0x12a>
 8003aca:	2202      	movs	r2, #2
 8003acc:	e000      	b.n	8003ad0 <ETH_SetMACConfig+0x12c>
 8003ace:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ae8:	2001      	movs	r0, #1
 8003aea:	f7fe fbd1 	bl	8002290 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	619a      	str	r2, [r3, #24]
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	ff20810f 	.word	0xff20810f

08003b04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c14 <ETH_SetDMAConfig+0x110>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	7b1b      	ldrb	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <ETH_SetDMAConfig+0x2c>
 8003b2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b2e:	e000      	b.n	8003b32 <ETH_SetDMAConfig+0x2e>
 8003b30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	7b5b      	ldrb	r3, [r3, #13]
 8003b36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	7f52      	ldrb	r2, [r2, #29]
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	d102      	bne.n	8003b48 <ETH_SetDMAConfig+0x44>
 8003b42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b46:	e000      	b.n	8003b4a <ETH_SetDMAConfig+0x46>
 8003b48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003b4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	7b9b      	ldrb	r3, [r3, #14]
 8003b50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003b52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003b58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	7f1b      	ldrb	r3, [r3, #28]
 8003b5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003b60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7f9b      	ldrb	r3, [r3, #30]
 8003b66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003b68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003b6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f7fe fb78 	bl	8002290 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	791b      	ldrb	r3, [r3, #4]
 8003bb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003bb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003bbe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003bc4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003bcc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003bce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003bd6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003bdc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003be6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003bea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7fe fb49 	bl	8002290 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	f8de3f23 	.word	0xf8de3f23

08003c18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b0a6      	sub	sp, #152	@ 0x98
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003c54:	2300      	movs	r3, #0
 8003c56:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003c7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003c80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003c8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003c90:	4619      	mov	r1, r3
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fe86 	bl	80039a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003cc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ccc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ff08 	bl	8003b04 <ETH_SetDMAConfig>
}
 8003cf4:	bf00      	nop
 8003cf6:	3798      	adds	r7, #152	@ 0x98
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3305      	adds	r3, #5
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	3204      	adds	r2, #4
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	4b11      	ldr	r3, [pc, #68]	@ (8003d64 <ETH_MACAddressConfig+0x68>)
 8003d1e:	4413      	add	r3, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3303      	adds	r3, #3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	061a      	lsls	r2, r3, #24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3302      	adds	r3, #2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	021b      	lsls	r3, r3, #8
 8003d40:	4313      	orrs	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <ETH_MACAddressConfig+0x6c>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6013      	str	r3, [r2, #0]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40028040 	.word	0x40028040
 8003d68:	40028044 	.word	0x40028044

08003d6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e03e      	b.n	8003df8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68d9      	ldr	r1, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2200      	movs	r2, #0
 8003d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	3206      	adds	r2, #6
 8003dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d80c      	bhi.n	8003ddc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68d9      	ldr	r1, [r3, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	440b      	add	r3, r1
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	e004      	b.n	8003de6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3301      	adds	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d9bd      	bls.n	8003d7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e10:	611a      	str	r2, [r3, #16]
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e046      	b.n	8003eba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6919      	ldr	r1, [r3, #16]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	440b      	add	r3, r1
 8003e3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2200      	movs	r2, #0
 8003e54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8003e70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	3212      	adds	r2, #18
 8003e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d80c      	bhi.n	8003eaa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6919      	ldr	r1, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	440b      	add	r3, r1
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e004      	b.n	8003eb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d9b5      	bls.n	8003e2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eea:	60da      	str	r2, [r3, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	@ 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	e175      	b.n	8004204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f18:	2201      	movs	r2, #1
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	f040 8164 	bne.w	80041fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d005      	beq.n	8003f4e <HAL_GPIO_Init+0x56>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d130      	bne.n	8003fb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	2203      	movs	r2, #3
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	091b      	lsrs	r3, r3, #4
 8003f9a:	f003 0201 	and.w	r2, r3, #1
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d017      	beq.n	8003fec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d123      	bne.n	8004040 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	08da      	lsrs	r2, r3, #3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3208      	adds	r2, #8
 8004000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	220f      	movs	r2, #15
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	08da      	lsrs	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3208      	adds	r2, #8
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2203      	movs	r2, #3
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0203 	and.w	r2, r3, #3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80be 	beq.w	80041fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004082:	4b66      	ldr	r3, [pc, #408]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	4a65      	ldr	r2, [pc, #404]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408c:	6453      	str	r3, [r2, #68]	@ 0x44
 800408e:	4b63      	ldr	r3, [pc, #396]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800409a:	4a61      	ldr	r2, [pc, #388]	@ (8004220 <HAL_GPIO_Init+0x328>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a58      	ldr	r2, [pc, #352]	@ (8004224 <HAL_GPIO_Init+0x32c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d037      	beq.n	8004136 <HAL_GPIO_Init+0x23e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a57      	ldr	r2, [pc, #348]	@ (8004228 <HAL_GPIO_Init+0x330>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_GPIO_Init+0x23a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_GPIO_Init+0x334>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_GPIO_Init+0x236>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a55      	ldr	r2, [pc, #340]	@ (8004230 <HAL_GPIO_Init+0x338>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_Init+0x232>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a54      	ldr	r2, [pc, #336]	@ (8004234 <HAL_GPIO_Init+0x33c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_Init+0x22e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a53      	ldr	r2, [pc, #332]	@ (8004238 <HAL_GPIO_Init+0x340>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_Init+0x22a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a52      	ldr	r2, [pc, #328]	@ (800423c <HAL_GPIO_Init+0x344>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x226>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a51      	ldr	r2, [pc, #324]	@ (8004240 <HAL_GPIO_Init+0x348>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x222>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a50      	ldr	r2, [pc, #320]	@ (8004244 <HAL_GPIO_Init+0x34c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x21e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	@ (8004248 <HAL_GPIO_Init+0x350>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x21a>
 800410e:	2309      	movs	r3, #9
 8004110:	e012      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004112:	230a      	movs	r3, #10
 8004114:	e010      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004116:	2308      	movs	r3, #8
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411a:	2307      	movs	r3, #7
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	@ (8004220 <HAL_GPIO_Init+0x328>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_GPIO_Init+0x354>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a34      	ldr	r2, [pc, #208]	@ (800424c <HAL_GPIO_Init+0x354>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b32      	ldr	r3, [pc, #200]	@ (800424c <HAL_GPIO_Init+0x354>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b28      	ldr	r3, [pc, #160]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a14      	ldr	r2, [pc, #80]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae86 	bls.w	8003f18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40022000 	.word	0x40022000
 8004248:	40022400 	.word	0x40022400
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
 800425c:	4613      	mov	r3, r2
 800425e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800426c:	e003      	b.n	8004276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800426e:	887b      	ldrh	r3, [r7, #2]
 8004270:	041a      	lsls	r2, r3, #16
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004284:	b08f      	sub	sp, #60	@ 0x3c
 8004286:	af0a      	add	r7, sp, #40	@ 0x28
 8004288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e116      	b.n	80044c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fdb4 	bl	8001e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2203      	movs	r2, #3
 80042b8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f002 fb74 	bl	80069c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	687e      	ldr	r6, [r7, #4]
 80042e0:	466d      	mov	r5, sp
 80042e2:	f106 0410 	add.w	r4, r6, #16
 80042e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80042f6:	1d33      	adds	r3, r6, #4
 80042f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042fa:	6838      	ldr	r0, [r7, #0]
 80042fc:	f002 fb08 	bl	8006910 <USB_CoreInit>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0d7      	b.n	80044c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f002 fb62 	bl	80069e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e04a      	b.n	80043ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	333d      	adds	r3, #61	@ 0x3d
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	333c      	adds	r3, #60	@ 0x3c
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	b298      	uxth	r0, r3
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3344      	adds	r3, #68	@ 0x44
 8004360:	4602      	mov	r2, r0
 8004362:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3340      	adds	r3, #64	@ 0x40
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3348      	adds	r3, #72	@ 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334c      	adds	r3, #76	@ 0x4c
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4413      	add	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	3354      	adds	r3, #84	@ 0x54
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	3301      	adds	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3af      	bcc.n	8004324 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e044      	b.n	8004454 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80043f2:	7bfa      	ldrb	r2, [r7, #15]
 80043f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	3301      	adds	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d3b5      	bcc.n	80043ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	687e      	ldr	r6, [r7, #4]
 8004466:	466d      	mov	r5, sp
 8004468:	f106 0410 	add.w	r4, r6, #16
 800446c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004478:	e885 0003 	stmia.w	r5, {r0, r1}
 800447c:	1d33      	adds	r3, r6, #4
 800447e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004480:	6838      	ldr	r0, [r7, #0]
 8004482:	f002 fafb 	bl	8006a7c <USB_DevInit>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e014      	b.n	80044c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d102      	bne.n	80044b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f80b 	bl	80044cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 fcb9 	bl	8006e32 <USB_DevDisconnect>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080044cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_PCDEx_ActivateLPM+0x44>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	10000003 	.word	0x10000003

08004514 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004518:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40007000 	.word	0x40007000

08004534 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	4b23      	ldr	r3, [pc, #140]	@ (80045cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	4a22      	ldr	r2, [pc, #136]	@ (80045cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	@ 0x40
 800454a:	4b20      	ldr	r3, [pc, #128]	@ (80045cc <HAL_PWREx_EnableOverDrive+0x98>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004556:	4b1e      	ldr	r3, [pc, #120]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004560:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004562:	f7fd fe89 	bl	8002278 <HAL_GetTick>
 8004566:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004568:	e009      	b.n	800457e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800456a:	f7fd fe85 	bl	8002278 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004578:	d901      	bls.n	800457e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e022      	b.n	80045c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458a:	d1ee      	bne.n	800456a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0f      	ldr	r2, [pc, #60]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004596:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004598:	f7fd fe6e 	bl	8002278 <HAL_GetTick>
 800459c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800459e:	e009      	b.n	80045b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045a0:	f7fd fe6a 	bl	8002278 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045ae:	d901      	bls.n	80045b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e007      	b.n	80045c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c0:	d1ee      	bne.n	80045a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40007000 	.word	0x40007000

080045d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80045dc:	2300      	movs	r3, #0
 80045de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e29b      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8087 	beq.w	8004706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045f8:	4b96      	ldr	r3, [pc, #600]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b04      	cmp	r3, #4
 8004602:	d00c      	beq.n	800461e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004604:	4b93      	ldr	r3, [pc, #588]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d112      	bne.n	8004636 <HAL_RCC_OscConfig+0x62>
 8004610:	4b90      	ldr	r3, [pc, #576]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800461c:	d10b      	bne.n	8004636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461e:	4b8d      	ldr	r3, [pc, #564]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d06c      	beq.n	8004704 <HAL_RCC_OscConfig+0x130>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d168      	bne.n	8004704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e275      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800463e:	d106      	bne.n	800464e <HAL_RCC_OscConfig+0x7a>
 8004640:	4b84      	ldr	r3, [pc, #528]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a83      	ldr	r2, [pc, #524]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	e02e      	b.n	80046ac <HAL_RCC_OscConfig+0xd8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0x9c>
 8004656:	4b7f      	ldr	r3, [pc, #508]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a7e      	ldr	r2, [pc, #504]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b7c      	ldr	r3, [pc, #496]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7b      	ldr	r2, [pc, #492]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e01d      	b.n	80046ac <HAL_RCC_OscConfig+0xd8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0xc0>
 800467a:	4b76      	ldr	r3, [pc, #472]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a75      	ldr	r2, [pc, #468]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b73      	ldr	r3, [pc, #460]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a72      	ldr	r2, [pc, #456]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0xd8>
 8004694:	4b6f      	ldr	r3, [pc, #444]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6e      	ldr	r2, [pc, #440]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800469a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b6c      	ldr	r3, [pc, #432]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a6b      	ldr	r2, [pc, #428]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd fde0 	bl	8002278 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd fddc 	bl	8002278 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	@ 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e229      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b61      	ldr	r3, [pc, #388]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0xe8>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fdcc 	bl	8002278 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd fdc8 	bl	8002278 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	@ 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e215      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	4b57      	ldr	r3, [pc, #348]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x110>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d069      	beq.n	80047e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004712:	4b50      	ldr	r3, [pc, #320]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b4d      	ldr	r3, [pc, #308]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b08      	cmp	r3, #8
 8004728:	d11c      	bne.n	8004764 <HAL_RCC_OscConfig+0x190>
 800472a:	4b4a      	ldr	r3, [pc, #296]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d116      	bne.n	8004764 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	4b47      	ldr	r3, [pc, #284]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCC_OscConfig+0x17a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e1e9      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	4b41      	ldr	r3, [pc, #260]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	493d      	ldr	r1, [pc, #244]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e040      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d023      	beq.n	80047b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	4b39      	ldr	r3, [pc, #228]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a38      	ldr	r2, [pc, #224]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fd7e 	bl	8002278 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004780:	f7fd fd7a 	bl	8002278 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1c7      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004792:	4b30      	ldr	r3, [pc, #192]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b2d      	ldr	r3, [pc, #180]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4929      	ldr	r1, [pc, #164]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	e018      	b.n	80047e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a26      	ldr	r2, [pc, #152]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fd5a 	bl	8002278 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fd fd56 	bl	8002278 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1a3      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	4b1e      	ldr	r3, [pc, #120]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d038      	beq.n	8004864 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d019      	beq.n	800482e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047fa:	4b16      	ldr	r3, [pc, #88]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	4a15      	ldr	r2, [pc, #84]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fd fd37 	bl	8002278 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480e:	f7fd fd33 	bl	8002278 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e180      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004820:	4b0c      	ldr	r3, [pc, #48]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x23a>
 800482c:	e01a      	b.n	8004864 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800482e:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004832:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <HAL_RCC_OscConfig+0x280>)
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fd fd1d 	bl	8002278 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004842:	f7fd fd19 	bl	8002278 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d903      	bls.n	8004858 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e166      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
 8004854:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004858:	4b92      	ldr	r3, [pc, #584]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800485a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ee      	bne.n	8004842 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a4 	beq.w	80049ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4b8c      	ldr	r3, [pc, #560]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b89      	ldr	r3, [pc, #548]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	4a88      	ldr	r2, [pc, #544]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	@ 0x40
 800488a:	4b86      	ldr	r3, [pc, #536]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800489a:	4b83      	ldr	r3, [pc, #524]	@ (8004aa8 <HAL_RCC_OscConfig+0x4d4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048a6:	4b80      	ldr	r3, [pc, #512]	@ (8004aa8 <HAL_RCC_OscConfig+0x4d4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7f      	ldr	r2, [pc, #508]	@ (8004aa8 <HAL_RCC_OscConfig+0x4d4>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b2:	f7fd fce1 	bl	8002278 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fd fcdd 	bl	8002278 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	@ 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e12a      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048cc:	4b76      	ldr	r3, [pc, #472]	@ (8004aa8 <HAL_RCC_OscConfig+0x4d4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x31a>
 80048e0:	4b70      	ldr	r3, [pc, #448]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e4:	4a6f      	ldr	r2, [pc, #444]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ec:	e02d      	b.n	800494a <HAL_RCC_OscConfig+0x376>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x33c>
 80048f6:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fa:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	@ 0x70
 8004902:	4b68      	ldr	r3, [pc, #416]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004906:	4a67      	ldr	r2, [pc, #412]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	6713      	str	r3, [r2, #112]	@ 0x70
 800490e:	e01c      	b.n	800494a <HAL_RCC_OscConfig+0x376>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d10c      	bne.n	8004932 <HAL_RCC_OscConfig+0x35e>
 8004918:	4b62      	ldr	r3, [pc, #392]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491c:	4a61      	ldr	r2, [pc, #388]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	6713      	str	r3, [r2, #112]	@ 0x70
 8004924:	4b5f      	ldr	r3, [pc, #380]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004930:	e00b      	b.n	800494a <HAL_RCC_OscConfig+0x376>
 8004932:	4b5c      	ldr	r3, [pc, #368]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004936:	4a5b      	ldr	r2, [pc, #364]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	@ 0x70
 800493e:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	4a58      	ldr	r2, [pc, #352]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d015      	beq.n	800497e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004952:	f7fd fc91 	bl	8002278 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fd fc8d 	bl	8002278 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0d8      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004970:	4b4c      	ldr	r3, [pc, #304]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ee      	beq.n	800495a <HAL_RCC_OscConfig+0x386>
 800497c:	e014      	b.n	80049a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fc7b 	bl	8002278 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd fc77 	bl	8002278 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c2      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499c:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ee      	bne.n	8004986 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ae:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4a3c      	ldr	r2, [pc, #240]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80049b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80ae 	beq.w	8004b20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	4b37      	ldr	r3, [pc, #220]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d06d      	beq.n	8004aac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d14b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d8:	4b32      	ldr	r3, [pc, #200]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a31      	ldr	r2, [pc, #196]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 80049de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fc48 	bl	8002278 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd fc44 	bl	8002278 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e091      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fe:	4b29      	ldr	r3, [pc, #164]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	019b      	lsls	r3, r3, #6
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	071b      	lsls	r3, r3, #28
 8004a36:	491b      	ldr	r1, [pc, #108]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a18      	ldr	r2, [pc, #96]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fc16 	bl	8002278 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fc12 	bl	8002278 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e05f      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x47c>
 8004a6e:	e057      	b.n	8004b20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fbfc 	bl	8002278 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a84:	f7fd fbf8 	bl	8002278 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e045      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <HAL_RCC_OscConfig+0x4d0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f0      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4b0>
 8004aa2:	e03d      	b.n	8004b20 <HAL_RCC_OscConfig+0x54c>
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004aac:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <HAL_RCC_OscConfig+0x558>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d030      	beq.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d129      	bne.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d122      	bne.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ae2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d119      	bne.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	3b01      	subs	r3, #1
 8004af6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d10f      	bne.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0d0      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d910      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b67      	ldr	r3, [pc, #412]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 020f 	bic.w	r2, r3, #15
 8004b5e:	4965      	ldr	r1, [pc, #404]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d040      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d115      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b41      	ldr	r3, [pc, #260]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e073      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3d      	ldr	r3, [pc, #244]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e06b      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4936      	ldr	r1, [pc, #216]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c24:	f7fd fb28 	bl	8002278 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7fd fb24 	bl	8002278 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e053      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2d      	ldr	r3, [pc, #180]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b27      	ldr	r3, [pc, #156]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d210      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b24      	ldr	r3, [pc, #144]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 020f 	bic.w	r2, r3, #15
 8004c6a:	4922      	ldr	r1, [pc, #136]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	@ (8004cfc <HAL_RCC_ClockConfig+0x1cc>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	@ (8004d00 <HAL_RCC_ClockConfig+0x1d0>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <HAL_RCC_ClockConfig+0x1d4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fa84 	bl	80021f0 <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	0800994c 	.word	0x0800994c
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d0c:	b094      	sub	sp, #80	@ 0x50
 8004d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d14:	2300      	movs	r3, #0
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d18:	2300      	movs	r3, #0
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d20:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x40>
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	f200 80e1 	bhi.w	8004ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x34>
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d3a:	e0db      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b73      	ldr	r3, [pc, #460]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d40:	e0db      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d42:	4b73      	ldr	r3, [pc, #460]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d46:	e0d8      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d48:	4b6f      	ldr	r3, [pc, #444]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d52:	4b6d      	ldr	r3, [pc, #436]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d063      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	2200      	movs	r2, #0
 8004d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d72:	2300      	movs	r3, #0
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f04f 0000 	mov.w	r0, #0
 8004d82:	f04f 0100 	mov.w	r1, #0
 8004d86:	0159      	lsls	r1, r3, #5
 8004d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8c:	0150      	lsls	r0, r2, #5
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4621      	mov	r1, r4
 8004d94:	1a51      	subs	r1, r2, r1
 8004d96:	6139      	str	r1, [r7, #16]
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dac:	4659      	mov	r1, fp
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004db6:	4651      	mov	r1, sl
 8004db8:	018a      	lsls	r2, r1, #6
 8004dba:	4651      	mov	r1, sl
 8004dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dda:	4690      	mov	r8, r2
 8004ddc:	4699      	mov	r9, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	eb18 0303 	adds.w	r3, r8, r3
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	462b      	mov	r3, r5
 8004de8:	eb49 0303 	adc.w	r3, r9, r3
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	024b      	lsls	r3, r1, #9
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e04:	4621      	mov	r1, r4
 8004e06:	024a      	lsls	r2, r1, #9
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0e:	2200      	movs	r2, #0
 8004e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e18:	f7fb fa6a 	bl	80002f0 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	e058      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b38      	ldr	r3, [pc, #224]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	4611      	mov	r1, r2
 8004e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0159      	lsls	r1, r3, #5
 8004e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e52:	0150      	lsls	r0, r2, #5
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e78:	ebb2 040a 	subs.w	r4, r2, sl
 8004e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00eb      	lsls	r3, r5, #3
 8004e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	4614      	mov	r4, r2
 8004e92:	461d      	mov	r5, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	18e3      	adds	r3, r4, r3
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	028b      	lsls	r3, r1, #10
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb8:	4621      	mov	r1, r4
 8004eba:	028a      	lsls	r2, r1, #10
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	61fa      	str	r2, [r7, #28]
 8004ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ecc:	f7fb fa10 	bl	80002f0 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3750      	adds	r7, #80	@ 0x50
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	007a1200 	.word	0x007a1200

08004f14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f18:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000000 	.word	0x20000000

08004f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f30:	f7ff fff0 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0a9b      	lsrs	r3, r3, #10
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	@ (8004f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	0800995c 	.word	0x0800995c

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f58:	f7ff ffdc 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0b5b      	lsrs	r3, r3, #13
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4903      	ldr	r1, [pc, #12]	@ (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40023800 	.word	0x40023800
 8004f78:	0800995c 	.word	0x0800995c

08004f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d012      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fa4:	4b69      	ldr	r3, [pc, #420]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a68      	ldr	r2, [pc, #416]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fae:	6093      	str	r3, [r2, #8]
 8004fb0:	4b66      	ldr	r3, [pc, #408]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	4964      	ldr	r1, [pc, #400]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d017      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fdc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe4:	4959      	ldr	r1, [pc, #356]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005002:	2301      	movs	r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005012:	4b4e      	ldr	r3, [pc, #312]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005018:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	494a      	ldr	r1, [pc, #296]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005030:	d101      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005032:	2301      	movs	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 808b 	beq.w	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	4b3a      	ldr	r3, [pc, #232]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	4a39      	ldr	r2, [pc, #228]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506a:	6413      	str	r3, [r2, #64]	@ 0x40
 800506c:	4b37      	ldr	r3, [pc, #220]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005078:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a34      	ldr	r2, [pc, #208]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fd f8f8 	bl	8002278 <HAL_GetTick>
 8005088:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800508a:	e008      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f7fd f8f4 	bl	8002278 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e38f      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050aa:	4b28      	ldr	r3, [pc, #160]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d035      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d02e      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c8:	4b20      	ldr	r3, [pc, #128]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d2:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050de:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	4a1a      	ldr	r2, [pc, #104]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80050ea:	4a18      	ldr	r2, [pc, #96]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050f0:	4b16      	ldr	r3, [pc, #88]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d114      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd f8bc 	bl	8002278 <HAL_GetTick>
 8005100:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005102:	e00a      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fd f8b8 	bl	8002278 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e351      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511a:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ee      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005132:	d111      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005140:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005142:	400b      	ands	r3, r1
 8005144:	4901      	ldr	r1, [pc, #4]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]
 800514a:	e00b      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800514c:	40023800 	.word	0x40023800
 8005150:	40007000 	.word	0x40007000
 8005154:	0ffffcff 	.word	0x0ffffcff
 8005158:	4bac      	ldr	r3, [pc, #688]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	4aab      	ldr	r2, [pc, #684]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005162:	6093      	str	r3, [r2, #8]
 8005164:	4ba9      	ldr	r3, [pc, #676]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005166:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005170:	49a6      	ldr	r1, [pc, #664]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005172:	4313      	orrs	r3, r2
 8005174:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d010      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005182:	4ba2      	ldr	r3, [pc, #648]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005188:	4aa0      	ldr	r2, [pc, #640]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800518e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005192:	4b9e      	ldr	r3, [pc, #632]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519c:	499b      	ldr	r1, [pc, #620]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b0:	4b96      	ldr	r3, [pc, #600]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051be:	4993      	ldr	r1, [pc, #588]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051d2:	4b8e      	ldr	r3, [pc, #568]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051e0:	498a      	ldr	r1, [pc, #552]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051f4:	4b85      	ldr	r3, [pc, #532]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005202:	4982      	ldr	r1, [pc, #520]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005216:	4b7d      	ldr	r3, [pc, #500]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800521c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005224:	4979      	ldr	r1, [pc, #484]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005238:	4b74      	ldr	r3, [pc, #464]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005246:	4971      	ldr	r1, [pc, #452]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800525a:	4b6c      	ldr	r3, [pc, #432]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	f023 020c 	bic.w	r2, r3, #12
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005268:	4968      	ldr	r1, [pc, #416]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800527c:	4b63      	ldr	r3, [pc, #396]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528a:	4960      	ldr	r1, [pc, #384]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800529e:	4b5b      	ldr	r3, [pc, #364]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ac:	4957      	ldr	r1, [pc, #348]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052c0:	4b52      	ldr	r3, [pc, #328]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	494f      	ldr	r1, [pc, #316]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052e2:	4b4a      	ldr	r3, [pc, #296]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f0:	4946      	ldr	r1, [pc, #280]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005304:	4b41      	ldr	r3, [pc, #260]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005312:	493e      	ldr	r1, [pc, #248]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005326:	4b39      	ldr	r3, [pc, #228]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005334:	4935      	ldr	r1, [pc, #212]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005348:	4b30      	ldr	r3, [pc, #192]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005356:	492d      	ldr	r1, [pc, #180]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d011      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800536a:	4b28      	ldr	r3, [pc, #160]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005378:	4924      	ldr	r1, [pc, #144]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005388:	d101      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053aa:	4b18      	ldr	r3, [pc, #96]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b8:	4914      	ldr	r1, [pc, #80]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00b      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053cc:	4b0f      	ldr	r3, [pc, #60]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053dc:	490b      	ldr	r1, [pc, #44]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80053f0:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005400:	4902      	ldr	r1, [pc, #8]	@ (800540c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005408:	e002      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800541c:	4b8a      	ldr	r3, [pc, #552]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	4986      	ldr	r1, [pc, #536]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005440:	4b81      	ldr	r3, [pc, #516]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005446:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005450:	497d      	ldr	r1, [pc, #500]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d006      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80d6 	beq.w	8005618 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800546c:	4b76      	ldr	r3, [pc, #472]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a75      	ldr	r2, [pc, #468]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005472:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005478:	f7fc fefe 	bl	8002278 <HAL_GetTick>
 800547c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005480:	f7fc fefa 	bl	8002278 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e195      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005492:	4b6d      	ldr	r3, [pc, #436]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d021      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d11d      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054b2:	4b65      	ldr	r3, [pc, #404]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80054c0:	4b61      	ldr	r3, [pc, #388]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c6:	0e1b      	lsrs	r3, r3, #24
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	019a      	lsls	r2, r3, #6
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	071b      	lsls	r3, r3, #28
 80054e6:	4958      	ldr	r1, [pc, #352]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d004      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800550c:	2b00      	cmp	r3, #0
 800550e:	d02e      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005518:	d129      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800551a:	4b4b      	ldr	r3, [pc, #300]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005528:	4b47      	ldr	r3, [pc, #284]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800552e:	0f1b      	lsrs	r3, r3, #28
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	431a      	orrs	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	493e      	ldr	r1, [pc, #248]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005556:	4b3c      	ldr	r3, [pc, #240]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800555c:	f023 021f 	bic.w	r2, r3, #31
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	3b01      	subs	r3, #1
 8005566:	4938      	ldr	r1, [pc, #224]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01d      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800557a:	4b33      	ldr	r3, [pc, #204]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005580:	0e1b      	lsrs	r3, r3, #24
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005588:	4b2f      	ldr	r3, [pc, #188]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558e:	0f1b      	lsrs	r3, r3, #28
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	019a      	lsls	r2, r3, #6
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	431a      	orrs	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	071b      	lsls	r3, r3, #28
 80055ae:	4926      	ldr	r1, [pc, #152]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d011      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	019a      	lsls	r2, r3, #6
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	061b      	lsls	r3, r3, #24
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	071b      	lsls	r3, r3, #28
 80055de:	491a      	ldr	r1, [pc, #104]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055e6:	4b18      	ldr	r3, [pc, #96]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f2:	f7fc fe41 	bl	8002278 <HAL_GetTick>
 80055f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055fa:	f7fc fe3d 	bl	8002278 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b64      	cmp	r3, #100	@ 0x64
 8005606:	d901      	bls.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e0d8      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800560c:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b01      	cmp	r3, #1
 800561c:	f040 80ce 	bne.w	80057bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005620:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a08      	ldr	r2, [pc, #32]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800562a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800562c:	f7fc fe24 	bl	8002278 <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005632:	e00b      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005634:	f7fc fe20 	bl	8002278 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	@ 0x64
 8005640:	d904      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0bb      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800564c:	4b5e      	ldr	r3, [pc, #376]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005658:	d0ec      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02e      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d12a      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005682:	4b51      	ldr	r3, [pc, #324]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005690:	4b4d      	ldr	r3, [pc, #308]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	0f1b      	lsrs	r3, r3, #28
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	019a      	lsls	r2, r3, #6
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	061b      	lsls	r3, r3, #24
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	071b      	lsls	r3, r3, #28
 80056b6:	4944      	ldr	r1, [pc, #272]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80056be:	4b42      	ldr	r3, [pc, #264]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056cc:	3b01      	subs	r3, #1
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	493d      	ldr	r1, [pc, #244]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d022      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056ec:	d11d      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056ee:	4b36      	ldr	r3, [pc, #216]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	0e1b      	lsrs	r3, r3, #24
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056fc:	4b32      	ldr	r3, [pc, #200]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	0f1b      	lsrs	r3, r3, #28
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	019a      	lsls	r2, r3, #6
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	061b      	lsls	r3, r3, #24
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	071b      	lsls	r3, r3, #28
 8005722:	4929      	ldr	r1, [pc, #164]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d028      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005736:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573c:	0e1b      	lsrs	r3, r3, #24
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005744:	4b20      	ldr	r3, [pc, #128]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	f003 0303 	and.w	r3, r3, #3
 8005750:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	019a      	lsls	r2, r3, #6
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	041b      	lsls	r3, r3, #16
 800575c:	431a      	orrs	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	061b      	lsls	r3, r3, #24
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	071b      	lsls	r3, r3, #28
 800576a:	4917      	ldr	r1, [pc, #92]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005772:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005778:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005780:	4911      	ldr	r1, [pc, #68]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005788:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0e      	ldr	r2, [pc, #56]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005794:	f7fc fd70 	bl	8002278 <HAL_GetTick>
 8005798:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800579c:	f7fc fd6c 	bl	8002278 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	@ 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e007      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ae:	4b06      	ldr	r3, [pc, #24]	@ (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ba:	d1ef      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800

080057cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e040      	b.n	8005860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fc fa7a 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	@ 0x24
 80057f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fbc2 	bl	8005f94 <UART_SetConfig>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e022      	b.n	8005860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fe1a 	bl	800645c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fea1 	bl	80065a0 <UART_CheckIdleState>
 800585e:	4603      	mov	r3, r0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08a      	sub	sp, #40	@ 0x28
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4613      	mov	r3, r2
 8005876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800587c:	2b20      	cmp	r3, #32
 800587e:	d171      	bne.n	8005964 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_UART_Transmit+0x24>
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e06a      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2221      	movs	r2, #33	@ 0x21
 800589c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589e:	f7fc fceb 	bl	8002278 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d108      	bne.n	80058d0 <HAL_UART_Transmit+0x68>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e003      	b.n	80058d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d8:	e02c      	b.n	8005934 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fea8 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e038      	b.n	8005966 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1cc      	bne.n	80058da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2200      	movs	r2, #0
 8005948:	2140      	movs	r1, #64	@ 0x40
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fe75 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e005      	b.n	8005966 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b0ba      	sub	sp, #232	@ 0xe8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005996:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800599a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800599e:	4013      	ands	r3, r2
 80059a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80059a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d115      	bne.n	80059d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d009      	beq.n	80059d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 82ac 	beq.w	8005f26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
      }
      return;
 80059d6:	e2a6      	b.n	8005f26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8117 	beq.w	8005c10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80059f2:	4b85      	ldr	r3, [pc, #532]	@ (8005c08 <HAL_UART_IRQHandler+0x298>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 810a 	beq.w	8005c10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_UART_IRQHandler+0xbc>
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00b      	beq.n	8005a2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a22:	f043 0201 	orr.w	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d011      	beq.n	8005a5c <HAL_UART_IRQHandler+0xec>
 8005a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00b      	beq.n	8005a5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a52:	f043 0204 	orr.w	r2, r3, #4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d011      	beq.n	8005a8c <HAL_UART_IRQHandler+0x11c>
 8005a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a82:	f043 0202 	orr.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005aa8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00b      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005abe:	f043 0208 	orr.w	r2, r3, #8
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <HAL_UART_IRQHandler+0x18a>
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8212 	beq.w	8005f2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b42:	2b40      	cmp	r3, #64	@ 0x40
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d04f      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fe37 	bl	80067c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b62:	2b40      	cmp	r3, #64	@ 0x40
 8005b64:	d141      	bne.n	8005bea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1d9      	bne.n	8005b66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d013      	beq.n	8005be2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbe:	4a13      	ldr	r2, [pc, #76]	@ (8005c0c <HAL_UART_IRQHandler+0x29c>)
 8005bc0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fd fc12 	bl	80033f0 <HAL_DMA_Abort_IT>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d017      	beq.n	8005c02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be0:	e00f      	b.n	8005c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9b6 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	e00b      	b.n	8005c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9b2 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	e007      	b.n	8005c02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9ae 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005c00:	e193      	b.n	8005f2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c02:	bf00      	nop
    return;
 8005c04:	e191      	b.n	8005f2a <HAL_UART_IRQHandler+0x5ba>
 8005c06:	bf00      	nop
 8005c08:	04000120 	.word	0x04000120
 8005c0c:	0800688f 	.word	0x0800688f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f040 814c 	bne.w	8005eb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8145 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 813e 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b40      	cmp	r3, #64	@ 0x40
 8005c4a:	f040 80b6 	bne.w	8005dba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8165 	beq.w	8005f2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	f080 815d 	bcs.w	8005f2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c88:	f000 8086 	beq.w	8005d98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1da      	bne.n	8005c8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce8:	f023 0301 	bic.w	r3, r3, #1
 8005cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005cfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e1      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3308      	adds	r3, #8
 8005d18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e3      	bne.n	8005d12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d68:	f023 0310 	bic.w	r3, r3, #16
 8005d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e4      	bne.n	8005d58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd fabc 	bl	8003310 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f8d8 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005db8:	e0b9      	b.n	8005f2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80ab 	beq.w	8005f32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a6 	beq.w	8005f32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e4      	bne.n	8005de6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3308      	adds	r3, #8
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e40:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e3      	bne.n	8005e1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0310 	bic.w	r3, r3, #16
 8005e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	69b9      	ldr	r1, [r7, #24]
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	617b      	str	r3, [r7, #20]
   return(result);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e4      	bne.n	8005e68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f85c 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eb0:	e03f      	b.n	8005f32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00e      	beq.n	8005edc <HAL_UART_IRQHandler+0x56c>
 8005ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f853 	bl	8005f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eda:	e02d      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01c      	beq.n	8005f36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
    }
    return;
 8005f04:	e017      	b.n	8005f36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
 8005f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fccb 	bl	80068ba <UART_EndTransmit_IT>
    return;
 8005f24:	e008      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f26:	bf00      	nop
 8005f28:	e006      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f2a:	bf00      	nop
 8005f2c:	e004      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f2e:	bf00      	nop
 8005f30:	e002      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005f32:	bf00      	nop
 8005f34:	e000      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005f36:	bf00      	nop
  }

}
 8005f38:	37e8      	adds	r7, #232	@ 0xe8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop

08005f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4ba6      	ldr	r3, [pc, #664]	@ (8006258 <UART_SetConfig+0x2c4>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a94      	ldr	r2, [pc, #592]	@ (800625c <UART_SetConfig+0x2c8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d120      	bne.n	8006052 <UART_SetConfig+0xbe>
 8006010:	4b93      	ldr	r3, [pc, #588]	@ (8006260 <UART_SetConfig+0x2cc>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d816      	bhi.n	800604c <UART_SetConfig+0xb8>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0x90>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006035 	.word	0x08006035
 8006028:	08006041 	.word	0x08006041
 800602c:	0800603b 	.word	0x0800603b
 8006030:	08006047 	.word	0x08006047
 8006034:	2301      	movs	r3, #1
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e150      	b.n	80062dc <UART_SetConfig+0x348>
 800603a:	2302      	movs	r3, #2
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e14d      	b.n	80062dc <UART_SetConfig+0x348>
 8006040:	2304      	movs	r3, #4
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e14a      	b.n	80062dc <UART_SetConfig+0x348>
 8006046:	2308      	movs	r3, #8
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e147      	b.n	80062dc <UART_SetConfig+0x348>
 800604c:	2310      	movs	r3, #16
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e144      	b.n	80062dc <UART_SetConfig+0x348>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a83      	ldr	r2, [pc, #524]	@ (8006264 <UART_SetConfig+0x2d0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d132      	bne.n	80060c2 <UART_SetConfig+0x12e>
 800605c:	4b80      	ldr	r3, [pc, #512]	@ (8006260 <UART_SetConfig+0x2cc>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d828      	bhi.n	80060bc <UART_SetConfig+0x128>
 800606a:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <UART_SetConfig+0xdc>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	080060a5 	.word	0x080060a5
 8006074:	080060bd 	.word	0x080060bd
 8006078:	080060bd 	.word	0x080060bd
 800607c:	080060bd 	.word	0x080060bd
 8006080:	080060b1 	.word	0x080060b1
 8006084:	080060bd 	.word	0x080060bd
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060bd 	.word	0x080060bd
 8006090:	080060ab 	.word	0x080060ab
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060bd 	.word	0x080060bd
 80060a0:	080060b7 	.word	0x080060b7
 80060a4:	2300      	movs	r3, #0
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e118      	b.n	80062dc <UART_SetConfig+0x348>
 80060aa:	2302      	movs	r3, #2
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e115      	b.n	80062dc <UART_SetConfig+0x348>
 80060b0:	2304      	movs	r3, #4
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e112      	b.n	80062dc <UART_SetConfig+0x348>
 80060b6:	2308      	movs	r3, #8
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e10f      	b.n	80062dc <UART_SetConfig+0x348>
 80060bc:	2310      	movs	r3, #16
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e10c      	b.n	80062dc <UART_SetConfig+0x348>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a68      	ldr	r2, [pc, #416]	@ (8006268 <UART_SetConfig+0x2d4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d120      	bne.n	800610e <UART_SetConfig+0x17a>
 80060cc:	4b64      	ldr	r3, [pc, #400]	@ (8006260 <UART_SetConfig+0x2cc>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060d6:	2b30      	cmp	r3, #48	@ 0x30
 80060d8:	d013      	beq.n	8006102 <UART_SetConfig+0x16e>
 80060da:	2b30      	cmp	r3, #48	@ 0x30
 80060dc:	d814      	bhi.n	8006108 <UART_SetConfig+0x174>
 80060de:	2b20      	cmp	r3, #32
 80060e0:	d009      	beq.n	80060f6 <UART_SetConfig+0x162>
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d810      	bhi.n	8006108 <UART_SetConfig+0x174>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <UART_SetConfig+0x15c>
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d006      	beq.n	80060fc <UART_SetConfig+0x168>
 80060ee:	e00b      	b.n	8006108 <UART_SetConfig+0x174>
 80060f0:	2300      	movs	r3, #0
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e0f2      	b.n	80062dc <UART_SetConfig+0x348>
 80060f6:	2302      	movs	r3, #2
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e0ef      	b.n	80062dc <UART_SetConfig+0x348>
 80060fc:	2304      	movs	r3, #4
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e0ec      	b.n	80062dc <UART_SetConfig+0x348>
 8006102:	2308      	movs	r3, #8
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e0e9      	b.n	80062dc <UART_SetConfig+0x348>
 8006108:	2310      	movs	r3, #16
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e0e6      	b.n	80062dc <UART_SetConfig+0x348>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a56      	ldr	r2, [pc, #344]	@ (800626c <UART_SetConfig+0x2d8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d120      	bne.n	800615a <UART_SetConfig+0x1c6>
 8006118:	4b51      	ldr	r3, [pc, #324]	@ (8006260 <UART_SetConfig+0x2cc>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006122:	2bc0      	cmp	r3, #192	@ 0xc0
 8006124:	d013      	beq.n	800614e <UART_SetConfig+0x1ba>
 8006126:	2bc0      	cmp	r3, #192	@ 0xc0
 8006128:	d814      	bhi.n	8006154 <UART_SetConfig+0x1c0>
 800612a:	2b80      	cmp	r3, #128	@ 0x80
 800612c:	d009      	beq.n	8006142 <UART_SetConfig+0x1ae>
 800612e:	2b80      	cmp	r3, #128	@ 0x80
 8006130:	d810      	bhi.n	8006154 <UART_SetConfig+0x1c0>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x1a8>
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x1b4>
 800613a:	e00b      	b.n	8006154 <UART_SetConfig+0x1c0>
 800613c:	2300      	movs	r3, #0
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e0cc      	b.n	80062dc <UART_SetConfig+0x348>
 8006142:	2302      	movs	r3, #2
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e0c9      	b.n	80062dc <UART_SetConfig+0x348>
 8006148:	2304      	movs	r3, #4
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e0c6      	b.n	80062dc <UART_SetConfig+0x348>
 800614e:	2308      	movs	r3, #8
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e0c3      	b.n	80062dc <UART_SetConfig+0x348>
 8006154:	2310      	movs	r3, #16
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e0c0      	b.n	80062dc <UART_SetConfig+0x348>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a44      	ldr	r2, [pc, #272]	@ (8006270 <UART_SetConfig+0x2dc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d125      	bne.n	80061b0 <UART_SetConfig+0x21c>
 8006164:	4b3e      	ldr	r3, [pc, #248]	@ (8006260 <UART_SetConfig+0x2cc>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800616e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006172:	d017      	beq.n	80061a4 <UART_SetConfig+0x210>
 8006174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006178:	d817      	bhi.n	80061aa <UART_SetConfig+0x216>
 800617a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800617e:	d00b      	beq.n	8006198 <UART_SetConfig+0x204>
 8006180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006184:	d811      	bhi.n	80061aa <UART_SetConfig+0x216>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <UART_SetConfig+0x1fe>
 800618a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618e:	d006      	beq.n	800619e <UART_SetConfig+0x20a>
 8006190:	e00b      	b.n	80061aa <UART_SetConfig+0x216>
 8006192:	2300      	movs	r3, #0
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e0a1      	b.n	80062dc <UART_SetConfig+0x348>
 8006198:	2302      	movs	r3, #2
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e09e      	b.n	80062dc <UART_SetConfig+0x348>
 800619e:	2304      	movs	r3, #4
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e09b      	b.n	80062dc <UART_SetConfig+0x348>
 80061a4:	2308      	movs	r3, #8
 80061a6:	77fb      	strb	r3, [r7, #31]
 80061a8:	e098      	b.n	80062dc <UART_SetConfig+0x348>
 80061aa:	2310      	movs	r3, #16
 80061ac:	77fb      	strb	r3, [r7, #31]
 80061ae:	e095      	b.n	80062dc <UART_SetConfig+0x348>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006274 <UART_SetConfig+0x2e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d125      	bne.n	8006206 <UART_SetConfig+0x272>
 80061ba:	4b29      	ldr	r3, [pc, #164]	@ (8006260 <UART_SetConfig+0x2cc>)
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061c8:	d017      	beq.n	80061fa <UART_SetConfig+0x266>
 80061ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ce:	d817      	bhi.n	8006200 <UART_SetConfig+0x26c>
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061d4:	d00b      	beq.n	80061ee <UART_SetConfig+0x25a>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061da:	d811      	bhi.n	8006200 <UART_SetConfig+0x26c>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <UART_SetConfig+0x254>
 80061e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e4:	d006      	beq.n	80061f4 <UART_SetConfig+0x260>
 80061e6:	e00b      	b.n	8006200 <UART_SetConfig+0x26c>
 80061e8:	2301      	movs	r3, #1
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e076      	b.n	80062dc <UART_SetConfig+0x348>
 80061ee:	2302      	movs	r3, #2
 80061f0:	77fb      	strb	r3, [r7, #31]
 80061f2:	e073      	b.n	80062dc <UART_SetConfig+0x348>
 80061f4:	2304      	movs	r3, #4
 80061f6:	77fb      	strb	r3, [r7, #31]
 80061f8:	e070      	b.n	80062dc <UART_SetConfig+0x348>
 80061fa:	2308      	movs	r3, #8
 80061fc:	77fb      	strb	r3, [r7, #31]
 80061fe:	e06d      	b.n	80062dc <UART_SetConfig+0x348>
 8006200:	2310      	movs	r3, #16
 8006202:	77fb      	strb	r3, [r7, #31]
 8006204:	e06a      	b.n	80062dc <UART_SetConfig+0x348>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1b      	ldr	r2, [pc, #108]	@ (8006278 <UART_SetConfig+0x2e4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d138      	bne.n	8006282 <UART_SetConfig+0x2ee>
 8006210:	4b13      	ldr	r3, [pc, #76]	@ (8006260 <UART_SetConfig+0x2cc>)
 8006212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006216:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800621a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800621e:	d017      	beq.n	8006250 <UART_SetConfig+0x2bc>
 8006220:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006224:	d82a      	bhi.n	800627c <UART_SetConfig+0x2e8>
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800622a:	d00b      	beq.n	8006244 <UART_SetConfig+0x2b0>
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006230:	d824      	bhi.n	800627c <UART_SetConfig+0x2e8>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <UART_SetConfig+0x2aa>
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623a:	d006      	beq.n	800624a <UART_SetConfig+0x2b6>
 800623c:	e01e      	b.n	800627c <UART_SetConfig+0x2e8>
 800623e:	2300      	movs	r3, #0
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e04b      	b.n	80062dc <UART_SetConfig+0x348>
 8006244:	2302      	movs	r3, #2
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e048      	b.n	80062dc <UART_SetConfig+0x348>
 800624a:	2304      	movs	r3, #4
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e045      	b.n	80062dc <UART_SetConfig+0x348>
 8006250:	2308      	movs	r3, #8
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e042      	b.n	80062dc <UART_SetConfig+0x348>
 8006256:	bf00      	nop
 8006258:	efff69f3 	.word	0xefff69f3
 800625c:	40011000 	.word	0x40011000
 8006260:	40023800 	.word	0x40023800
 8006264:	40004400 	.word	0x40004400
 8006268:	40004800 	.word	0x40004800
 800626c:	40004c00 	.word	0x40004c00
 8006270:	40005000 	.word	0x40005000
 8006274:	40011400 	.word	0x40011400
 8006278:	40007800 	.word	0x40007800
 800627c:	2310      	movs	r3, #16
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e02c      	b.n	80062dc <UART_SetConfig+0x348>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a72      	ldr	r2, [pc, #456]	@ (8006450 <UART_SetConfig+0x4bc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d125      	bne.n	80062d8 <UART_SetConfig+0x344>
 800628c:	4b71      	ldr	r3, [pc, #452]	@ (8006454 <UART_SetConfig+0x4c0>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006292:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006296:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800629a:	d017      	beq.n	80062cc <UART_SetConfig+0x338>
 800629c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062a0:	d817      	bhi.n	80062d2 <UART_SetConfig+0x33e>
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a6:	d00b      	beq.n	80062c0 <UART_SetConfig+0x32c>
 80062a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062ac:	d811      	bhi.n	80062d2 <UART_SetConfig+0x33e>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <UART_SetConfig+0x326>
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b6:	d006      	beq.n	80062c6 <UART_SetConfig+0x332>
 80062b8:	e00b      	b.n	80062d2 <UART_SetConfig+0x33e>
 80062ba:	2300      	movs	r3, #0
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e00d      	b.n	80062dc <UART_SetConfig+0x348>
 80062c0:	2302      	movs	r3, #2
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e00a      	b.n	80062dc <UART_SetConfig+0x348>
 80062c6:	2304      	movs	r3, #4
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e007      	b.n	80062dc <UART_SetConfig+0x348>
 80062cc:	2308      	movs	r3, #8
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e004      	b.n	80062dc <UART_SetConfig+0x348>
 80062d2:	2310      	movs	r3, #16
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e001      	b.n	80062dc <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e4:	d15b      	bne.n	800639e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062e6:	7ffb      	ldrb	r3, [r7, #31]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x3aa>
 80062ec:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x360>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe fe08 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 800631c:	61b8      	str	r0, [r7, #24]
        break;
 800631e:	e013      	b.n	8006348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe fe18 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 8006324:	61b8      	str	r0, [r7, #24]
        break;
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b4b      	ldr	r3, [pc, #300]	@ (8006458 <UART_SetConfig+0x4c4>)
 800632a:	61bb      	str	r3, [r7, #24]
        break;
 800632c:	e00c      	b.n	8006348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe fceb 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8006332:	61b8      	str	r0, [r7, #24]
        break;
 8006334:	e008      	b.n	8006348 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800633a:	61bb      	str	r3, [r7, #24]
        break;
 800633c:	e004      	b.n	8006348 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	77bb      	strb	r3, [r7, #30]
        break;
 8006346:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d074      	beq.n	8006438 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	005a      	lsls	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	441a      	add	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d916      	bls.n	8006398 <UART_SetConfig+0x404>
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006370:	d212      	bcs.n	8006398 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f023 030f 	bic.w	r3, r3, #15
 800637a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	b29a      	uxth	r2, r3
 8006388:	89fb      	ldrh	r3, [r7, #14]
 800638a:	4313      	orrs	r3, r2
 800638c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	89fa      	ldrh	r2, [r7, #14]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e04f      	b.n	8006438 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	77bb      	strb	r3, [r7, #30]
 800639c:	e04c      	b.n	8006438 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800639e:	7ffb      	ldrb	r3, [r7, #31]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d828      	bhi.n	80063f6 <UART_SetConfig+0x462>
 80063a4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ac <UART_SetConfig+0x418>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063d1 	.word	0x080063d1
 80063b0:	080063d9 	.word	0x080063d9
 80063b4:	080063e1 	.word	0x080063e1
 80063b8:	080063f7 	.word	0x080063f7
 80063bc:	080063e7 	.word	0x080063e7
 80063c0:	080063f7 	.word	0x080063f7
 80063c4:	080063f7 	.word	0x080063f7
 80063c8:	080063f7 	.word	0x080063f7
 80063cc:	080063ef 	.word	0x080063ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d0:	f7fe fdac 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 80063d4:	61b8      	str	r0, [r7, #24]
        break;
 80063d6:	e013      	b.n	8006400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d8:	f7fe fdbc 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e00f      	b.n	8006400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006458 <UART_SetConfig+0x4c4>)
 80063e2:	61bb      	str	r3, [r7, #24]
        break;
 80063e4:	e00c      	b.n	8006400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e6:	f7fe fc8f 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 80063ea:	61b8      	str	r0, [r7, #24]
        break;
 80063ec:	e008      	b.n	8006400 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063f2:	61bb      	str	r3, [r7, #24]
        break;
 80063f4:	e004      	b.n	8006400 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	77bb      	strb	r3, [r7, #30]
        break;
 80063fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d018      	beq.n	8006438 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	085a      	lsrs	r2, r3, #1
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	441a      	add	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d909      	bls.n	8006434 <UART_SetConfig+0x4a0>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006426:	d205      	bcs.n	8006434 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	b29a      	uxth	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	e001      	b.n	8006438 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006444:	7fbb      	ldrb	r3, [r7, #30]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40007c00 	.word	0x40007c00
 8006454:	40023800 	.word	0x40023800
 8006458:	00f42400 	.word	0x00f42400

0800645c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01a      	beq.n	8006572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d10a      	bne.n	8006572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b0:	f7fb fe62 	bl	8002278 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d10e      	bne.n	80065e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f831 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e027      	b.n	8006632 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d10e      	bne.n	800660e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f81b 	bl	800663a <UART_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e011      	b.n	8006632 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b09c      	sub	sp, #112	@ 0x70
 800663e:	af00      	add	r7, sp, #0
 8006640:	60f8      	str	r0, [r7, #12]
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800664a:	e0a7      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006652:	f000 80a3 	beq.w	800679c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006656:	f7fb fe0f 	bl	8002278 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006662:	429a      	cmp	r2, r3
 8006664:	d302      	bcc.n	800666c <UART_WaitOnFlagUntilTimeout+0x32>
 8006666:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006668:	2b00      	cmp	r3, #0
 800666a:	d13f      	bne.n	80066ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800667a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800667c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006680:	667b      	str	r3, [r7, #100]	@ 0x64
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800668a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800668c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006690:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e6      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3308      	adds	r3, #8
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066be:	64ba      	str	r2, [r7, #72]	@ 0x48
 80066c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80066cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e068      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d050      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d148      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006712:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
 8006734:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006738:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3308      	adds	r3, #8
 800674c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	613b      	str	r3, [r7, #16]
   return(result);
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006766:	623a      	str	r2, [r7, #32]
 8006768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676a:	69f9      	ldr	r1, [r7, #28]
 800676c:	6a3a      	ldr	r2, [r7, #32]
 800676e:	e841 2300 	strex	r3, r2, [r1]
 8006772:	61bb      	str	r3, [r7, #24]
   return(result);
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1e5      	bne.n	8006746 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e010      	b.n	80067be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	f43f af48 	beq.w	800664c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3770      	adds	r7, #112	@ 0x70
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b095      	sub	sp, #84	@ 0x54
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e6      	bne.n	80067ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006820:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e5      	bne.n	8006800 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006838:	2b01      	cmp	r3, #1
 800683a:	d118      	bne.n	800686e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	60bb      	str	r3, [r7, #8]
   return(result);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 0310 	bic.w	r3, r3, #16
 8006850:	647b      	str	r3, [r7, #68]	@ 0x44
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	613b      	str	r3, [r7, #16]
   return(result);
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e6      	bne.n	800683c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006882:	bf00      	nop
 8006884:	3754      	adds	r7, #84	@ 0x54
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fb51 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b2:	bf00      	nop
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	613b      	str	r3, [r7, #16]
   return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff fb1d 	bl	8005f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006906:	bf00      	nop
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006910:	b084      	sub	sp, #16
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	f107 001c 	add.w	r0, r7, #28
 800691e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d120      	bne.n	800696a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	4b20      	ldr	r3, [pc, #128]	@ (80069bc <USB_CoreInit+0xac>)
 800693a:	4013      	ands	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800694c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d105      	bne.n	800695e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa96 	bl	8006e90 <USB_CoreReset>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]
 8006968:	e010      	b.n	800698c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa8a 	bl	8006e90 <USB_CoreReset>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006984:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	2b01      	cmp	r3, #1
 8006990:	d10b      	bne.n	80069aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f043 0206 	orr.w	r2, r3, #6
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f043 0220 	orr.w	r2, r3, #32
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069b6:	b004      	add	sp, #16
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	ffbdffbf 	.word	0xffbdffbf

080069c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f023 0201 	bic.w	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d115      	bne.n	8006a30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a10:	2001      	movs	r0, #1
 8006a12:	f7fb fc3d 	bl	8002290 <HAL_Delay>
      ms++;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fa29 	bl	8006e74 <USB_GetMode>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d01e      	beq.n	8006a66 <USB_SetCurrentMode+0x84>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b31      	cmp	r3, #49	@ 0x31
 8006a2c:	d9f0      	bls.n	8006a10 <USB_SetCurrentMode+0x2e>
 8006a2e:	e01a      	b.n	8006a66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d115      	bne.n	8006a62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a42:	2001      	movs	r0, #1
 8006a44:	f7fb fc24 	bl	8002290 <HAL_Delay>
      ms++;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa10 	bl	8006e74 <USB_GetMode>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d005      	beq.n	8006a66 <USB_SetCurrentMode+0x84>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b31      	cmp	r3, #49	@ 0x31
 8006a5e:	d9f0      	bls.n	8006a42 <USB_SetCurrentMode+0x60>
 8006a60:	e001      	b.n	8006a66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e005      	b.n	8006a72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b32      	cmp	r3, #50	@ 0x32
 8006a6a:	d101      	bne.n	8006a70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e009      	b.n	8006ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3340      	adds	r3, #64	@ 0x40
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b0e      	cmp	r3, #14
 8006ab4:	d9f2      	bls.n	8006a9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11c      	bne.n	8006af6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e005      	b.n	8006b02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b08:	461a      	mov	r2, r3
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b14:	4619      	mov	r1, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	680b      	ldr	r3, [r1, #0]
 8006b20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d10c      	bne.n	8006b42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b2e:	2100      	movs	r1, #0
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f965 	bl	8006e00 <USB_SetDevSpeed>
 8006b36:	e008      	b.n	8006b4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b38:	2101      	movs	r1, #1
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f960 	bl	8006e00 <USB_SetDevSpeed>
 8006b40:	e003      	b.n	8006b4a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b42:	2103      	movs	r1, #3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f95b 	bl	8006e00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b4a:	2110      	movs	r1, #16
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f8f3 	bl	8006d38 <USB_FlushTxFifo>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f91f 	bl	8006da0 <USB_FlushRxFifo>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b72:	461a      	mov	r2, r3
 8006b74:	2300      	movs	r3, #0
 8006b76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b90:	2300      	movs	r3, #0
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	e043      	b.n	8006c1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bac:	d118      	bne.n	8006be0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e013      	b.n	8006bf2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	e008      	b.n	8006bf2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	461a      	mov	r2, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	461a      	mov	r2, r3
 8006c12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d3b7      	bcc.n	8006b96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e043      	b.n	8006cb4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c42:	d118      	bne.n	8006c76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c56:	461a      	mov	r2, r3
 8006c58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e013      	b.n	8006c88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	e008      	b.n	8006c88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c82:	461a      	mov	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	461a      	mov	r2, r3
 8006c96:	2300      	movs	r3, #0
 8006c98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d3b7      	bcc.n	8006c2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006cdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f043 0210 	orr.w	r2, r3, #16
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d30 <USB_DevInit+0x2b4>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f043 0208 	orr.w	r2, r3, #8
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d105      	bne.n	8006d20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	4b06      	ldr	r3, [pc, #24]	@ (8006d34 <USB_DevInit+0x2b8>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d2c:	b004      	add	sp, #16
 8006d2e:	4770      	bx	lr
 8006d30:	803c3800 	.word	0x803c3800
 8006d34:	40000004 	.word	0x40000004

08006d38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a13      	ldr	r2, [pc, #76]	@ (8006d9c <USB_FlushTxFifo+0x64>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d901      	bls.n	8006d58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e01b      	b.n	8006d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	daf2      	bge.n	8006d46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	019b      	lsls	r3, r3, #6
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a08      	ldr	r2, [pc, #32]	@ (8006d9c <USB_FlushTxFifo+0x64>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e006      	b.n	8006d90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	d0f0      	beq.n	8006d70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	00030d40 	.word	0x00030d40

08006da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4a11      	ldr	r2, [pc, #68]	@ (8006dfc <USB_FlushRxFifo+0x5c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e018      	b.n	8006df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	daf2      	bge.n	8006dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a08      	ldr	r2, [pc, #32]	@ (8006dfc <USB_FlushRxFifo+0x5c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e006      	b.n	8006df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f003 0310 	and.w	r3, r3, #16
 8006dea:	2b10      	cmp	r3, #16
 8006dec:	d0f0      	beq.n	8006dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	00030d40 	.word	0x00030d40

08006e00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e20:	4313      	orrs	r3, r2
 8006e22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e4c:	f023 0303 	bic.w	r3, r3, #3
 8006e50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	f003 0301 	and.w	r3, r3, #1
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a13      	ldr	r2, [pc, #76]	@ (8006ef4 <USB_CoreReset+0x64>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e01b      	b.n	8006ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	daf2      	bge.n	8006e9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4a09      	ldr	r2, [pc, #36]	@ (8006ef4 <USB_CoreReset+0x64>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e006      	b.n	8006ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d0f0      	beq.n	8006ec6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <__cvt>:
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efa:	ed2d 8b02 	vpush	{d8}
 8006efe:	eeb0 8b40 	vmov.f64	d8, d0
 8006f02:	b085      	sub	sp, #20
 8006f04:	4617      	mov	r7, r2
 8006f06:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006f08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f0a:	ee18 2a90 	vmov	r2, s17
 8006f0e:	f025 0520 	bic.w	r5, r5, #32
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	bfb6      	itet	lt
 8006f16:	222d      	movlt	r2, #45	@ 0x2d
 8006f18:	2200      	movge	r2, #0
 8006f1a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006f1e:	2d46      	cmp	r5, #70	@ 0x46
 8006f20:	460c      	mov	r4, r1
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	d004      	beq.n	8006f30 <__cvt+0x38>
 8006f26:	2d45      	cmp	r5, #69	@ 0x45
 8006f28:	d100      	bne.n	8006f2c <__cvt+0x34>
 8006f2a:	3401      	adds	r4, #1
 8006f2c:	2102      	movs	r1, #2
 8006f2e:	e000      	b.n	8006f32 <__cvt+0x3a>
 8006f30:	2103      	movs	r1, #3
 8006f32:	ab03      	add	r3, sp, #12
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	ab02      	add	r3, sp, #8
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	4622      	mov	r2, r4
 8006f3c:	4633      	mov	r3, r6
 8006f3e:	eeb0 0b48 	vmov.f64	d0, d8
 8006f42:	f000 ff25 	bl	8007d90 <_dtoa_r>
 8006f46:	2d47      	cmp	r5, #71	@ 0x47
 8006f48:	d114      	bne.n	8006f74 <__cvt+0x7c>
 8006f4a:	07fb      	lsls	r3, r7, #31
 8006f4c:	d50a      	bpl.n	8006f64 <__cvt+0x6c>
 8006f4e:	1902      	adds	r2, r0, r4
 8006f50:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f58:	bf08      	it	eq
 8006f5a:	9203      	streq	r2, [sp, #12]
 8006f5c:	2130      	movs	r1, #48	@ 0x30
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d319      	bcc.n	8006f98 <__cvt+0xa0>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f68:	1a1b      	subs	r3, r3, r0
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	b005      	add	sp, #20
 8006f6e:	ecbd 8b02 	vpop	{d8}
 8006f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f74:	2d46      	cmp	r5, #70	@ 0x46
 8006f76:	eb00 0204 	add.w	r2, r0, r4
 8006f7a:	d1e9      	bne.n	8006f50 <__cvt+0x58>
 8006f7c:	7803      	ldrb	r3, [r0, #0]
 8006f7e:	2b30      	cmp	r3, #48	@ 0x30
 8006f80:	d107      	bne.n	8006f92 <__cvt+0x9a>
 8006f82:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	bf1c      	itt	ne
 8006f8c:	f1c4 0401 	rsbne	r4, r4, #1
 8006f90:	6034      	strne	r4, [r6, #0]
 8006f92:	6833      	ldr	r3, [r6, #0]
 8006f94:	441a      	add	r2, r3
 8006f96:	e7db      	b.n	8006f50 <__cvt+0x58>
 8006f98:	1c5c      	adds	r4, r3, #1
 8006f9a:	9403      	str	r4, [sp, #12]
 8006f9c:	7019      	strb	r1, [r3, #0]
 8006f9e:	e7de      	b.n	8006f5e <__cvt+0x66>

08006fa0 <__exponent>:
 8006fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fa2:	2900      	cmp	r1, #0
 8006fa4:	bfba      	itte	lt
 8006fa6:	4249      	neglt	r1, r1
 8006fa8:	232d      	movlt	r3, #45	@ 0x2d
 8006faa:	232b      	movge	r3, #43	@ 0x2b
 8006fac:	2909      	cmp	r1, #9
 8006fae:	7002      	strb	r2, [r0, #0]
 8006fb0:	7043      	strb	r3, [r0, #1]
 8006fb2:	dd29      	ble.n	8007008 <__exponent+0x68>
 8006fb4:	f10d 0307 	add.w	r3, sp, #7
 8006fb8:	461d      	mov	r5, r3
 8006fba:	270a      	movs	r7, #10
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fc2:	fb07 1416 	mls	r4, r7, r6, r1
 8006fc6:	3430      	adds	r4, #48	@ 0x30
 8006fc8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fcc:	460c      	mov	r4, r1
 8006fce:	2c63      	cmp	r4, #99	@ 0x63
 8006fd0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	dcf1      	bgt.n	8006fbc <__exponent+0x1c>
 8006fd8:	3130      	adds	r1, #48	@ 0x30
 8006fda:	1e94      	subs	r4, r2, #2
 8006fdc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fe0:	1c41      	adds	r1, r0, #1
 8006fe2:	4623      	mov	r3, r4
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	d30a      	bcc.n	8006ffe <__exponent+0x5e>
 8006fe8:	f10d 0309 	add.w	r3, sp, #9
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	42ac      	cmp	r4, r5
 8006ff0:	bf88      	it	hi
 8006ff2:	2300      	movhi	r3, #0
 8006ff4:	3302      	adds	r3, #2
 8006ff6:	4403      	add	r3, r0
 8006ff8:	1a18      	subs	r0, r3, r0
 8006ffa:	b003      	add	sp, #12
 8006ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007002:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007006:	e7ed      	b.n	8006fe4 <__exponent+0x44>
 8007008:	2330      	movs	r3, #48	@ 0x30
 800700a:	3130      	adds	r1, #48	@ 0x30
 800700c:	7083      	strb	r3, [r0, #2]
 800700e:	70c1      	strb	r1, [r0, #3]
 8007010:	1d03      	adds	r3, r0, #4
 8007012:	e7f1      	b.n	8006ff8 <__exponent+0x58>
 8007014:	0000      	movs	r0, r0
	...

08007018 <_printf_float>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	b08d      	sub	sp, #52	@ 0x34
 800701e:	460c      	mov	r4, r1
 8007020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007024:	4616      	mov	r6, r2
 8007026:	461f      	mov	r7, r3
 8007028:	4605      	mov	r5, r0
 800702a:	f000 fdaf 	bl	8007b8c <_localeconv_r>
 800702e:	f8d0 b000 	ldr.w	fp, [r0]
 8007032:	4658      	mov	r0, fp
 8007034:	f7f9 f954 	bl	80002e0 <strlen>
 8007038:	2300      	movs	r3, #0
 800703a:	930a      	str	r3, [sp, #40]	@ 0x28
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007044:	6822      	ldr	r2, [r4, #0]
 8007046:	9005      	str	r0, [sp, #20]
 8007048:	3307      	adds	r3, #7
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	f103 0108 	add.w	r1, r3, #8
 8007052:	f8c8 1000 	str.w	r1, [r8]
 8007056:	ed93 0b00 	vldr	d0, [r3]
 800705a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80072b8 <_printf_float+0x2a0>
 800705e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007062:	eeb4 7b46 	vcmp.f64	d7, d6
 8007066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800706e:	dd24      	ble.n	80070ba <_printf_float+0xa2>
 8007070:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	d502      	bpl.n	8007080 <_printf_float+0x68>
 800707a:	232d      	movs	r3, #45	@ 0x2d
 800707c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007080:	498f      	ldr	r1, [pc, #572]	@ (80072c0 <_printf_float+0x2a8>)
 8007082:	4b90      	ldr	r3, [pc, #576]	@ (80072c4 <_printf_float+0x2ac>)
 8007084:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007088:	bf94      	ite	ls
 800708a:	4688      	movls	r8, r1
 800708c:	4698      	movhi	r8, r3
 800708e:	f022 0204 	bic.w	r2, r2, #4
 8007092:	2303      	movs	r3, #3
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	f04f 0a00 	mov.w	sl, #0
 800709c:	9700      	str	r7, [sp, #0]
 800709e:	4633      	mov	r3, r6
 80070a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 f9d1 	bl	800744c <_printf_common>
 80070aa:	3001      	adds	r0, #1
 80070ac:	f040 8089 	bne.w	80071c2 <_printf_float+0x1aa>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070b4:	b00d      	add	sp, #52	@ 0x34
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80070be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c2:	d709      	bvc.n	80070d8 <_printf_float+0xc0>
 80070c4:	ee10 3a90 	vmov	r3, s1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	bfbc      	itt	lt
 80070cc:	232d      	movlt	r3, #45	@ 0x2d
 80070ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070d2:	497d      	ldr	r1, [pc, #500]	@ (80072c8 <_printf_float+0x2b0>)
 80070d4:	4b7d      	ldr	r3, [pc, #500]	@ (80072cc <_printf_float+0x2b4>)
 80070d6:	e7d5      	b.n	8007084 <_printf_float+0x6c>
 80070d8:	6863      	ldr	r3, [r4, #4]
 80070da:	1c59      	adds	r1, r3, #1
 80070dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80070e0:	d139      	bne.n	8007156 <_printf_float+0x13e>
 80070e2:	2306      	movs	r3, #6
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070ea:	2300      	movs	r3, #0
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	9303      	str	r3, [sp, #12]
 80070f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80070f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80070f6:	ab09      	add	r3, sp, #36	@ 0x24
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	6861      	ldr	r1, [r4, #4]
 80070fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007100:	4628      	mov	r0, r5
 8007102:	f7ff fef9 	bl	8006ef8 <__cvt>
 8007106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800710a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800710c:	4680      	mov	r8, r0
 800710e:	d129      	bne.n	8007164 <_printf_float+0x14c>
 8007110:	1cc8      	adds	r0, r1, #3
 8007112:	db02      	blt.n	800711a <_printf_float+0x102>
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	4299      	cmp	r1, r3
 8007118:	dd41      	ble.n	800719e <_printf_float+0x186>
 800711a:	f1a9 0902 	sub.w	r9, r9, #2
 800711e:	fa5f f989 	uxtb.w	r9, r9
 8007122:	3901      	subs	r1, #1
 8007124:	464a      	mov	r2, r9
 8007126:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800712a:	9109      	str	r1, [sp, #36]	@ 0x24
 800712c:	f7ff ff38 	bl	8006fa0 <__exponent>
 8007130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007132:	1813      	adds	r3, r2, r0
 8007134:	2a01      	cmp	r2, #1
 8007136:	4682      	mov	sl, r0
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	dc02      	bgt.n	8007142 <_printf_float+0x12a>
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	07d2      	lsls	r2, r2, #31
 8007140:	d501      	bpl.n	8007146 <_printf_float+0x12e>
 8007142:	3301      	adds	r3, #1
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0a6      	beq.n	800709c <_printf_float+0x84>
 800714e:	232d      	movs	r3, #45	@ 0x2d
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007154:	e7a2      	b.n	800709c <_printf_float+0x84>
 8007156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800715a:	d1c4      	bne.n	80070e6 <_printf_float+0xce>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1c2      	bne.n	80070e6 <_printf_float+0xce>
 8007160:	2301      	movs	r3, #1
 8007162:	e7bf      	b.n	80070e4 <_printf_float+0xcc>
 8007164:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007168:	d9db      	bls.n	8007122 <_printf_float+0x10a>
 800716a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800716e:	d118      	bne.n	80071a2 <_printf_float+0x18a>
 8007170:	2900      	cmp	r1, #0
 8007172:	6863      	ldr	r3, [r4, #4]
 8007174:	dd0b      	ble.n	800718e <_printf_float+0x176>
 8007176:	6121      	str	r1, [r4, #16]
 8007178:	b913      	cbnz	r3, 8007180 <_printf_float+0x168>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	07d0      	lsls	r0, r2, #31
 800717e:	d502      	bpl.n	8007186 <_printf_float+0x16e>
 8007180:	3301      	adds	r3, #1
 8007182:	440b      	add	r3, r1
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007188:	f04f 0a00 	mov.w	sl, #0
 800718c:	e7db      	b.n	8007146 <_printf_float+0x12e>
 800718e:	b913      	cbnz	r3, 8007196 <_printf_float+0x17e>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	07d2      	lsls	r2, r2, #31
 8007194:	d501      	bpl.n	800719a <_printf_float+0x182>
 8007196:	3302      	adds	r3, #2
 8007198:	e7f4      	b.n	8007184 <_printf_float+0x16c>
 800719a:	2301      	movs	r3, #1
 800719c:	e7f2      	b.n	8007184 <_printf_float+0x16c>
 800719e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80071a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071a4:	4299      	cmp	r1, r3
 80071a6:	db05      	blt.n	80071b4 <_printf_float+0x19c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	6121      	str	r1, [r4, #16]
 80071ac:	07d8      	lsls	r0, r3, #31
 80071ae:	d5ea      	bpl.n	8007186 <_printf_float+0x16e>
 80071b0:	1c4b      	adds	r3, r1, #1
 80071b2:	e7e7      	b.n	8007184 <_printf_float+0x16c>
 80071b4:	2900      	cmp	r1, #0
 80071b6:	bfd4      	ite	le
 80071b8:	f1c1 0202 	rsble	r2, r1, #2
 80071bc:	2201      	movgt	r2, #1
 80071be:	4413      	add	r3, r2
 80071c0:	e7e0      	b.n	8007184 <_printf_float+0x16c>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	055a      	lsls	r2, r3, #21
 80071c6:	d407      	bmi.n	80071d8 <_printf_float+0x1c0>
 80071c8:	6923      	ldr	r3, [r4, #16]
 80071ca:	4642      	mov	r2, r8
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	d12a      	bne.n	800722c <_printf_float+0x214>
 80071d6:	e76b      	b.n	80070b0 <_printf_float+0x98>
 80071d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80071dc:	f240 80e0 	bls.w	80073a0 <_printf_float+0x388>
 80071e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80071e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80071e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ec:	d133      	bne.n	8007256 <_printf_float+0x23e>
 80071ee:	4a38      	ldr	r2, [pc, #224]	@ (80072d0 <_printf_float+0x2b8>)
 80071f0:	2301      	movs	r3, #1
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f af59 	beq.w	80070b0 <_printf_float+0x98>
 80071fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007202:	4543      	cmp	r3, r8
 8007204:	db02      	blt.n	800720c <_printf_float+0x1f4>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	07d8      	lsls	r0, r3, #31
 800720a:	d50f      	bpl.n	800722c <_printf_float+0x214>
 800720c:	9b05      	ldr	r3, [sp, #20]
 800720e:	465a      	mov	r2, fp
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f af4a 	beq.w	80070b0 <_printf_float+0x98>
 800721c:	f04f 0900 	mov.w	r9, #0
 8007220:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007224:	f104 0a1a 	add.w	sl, r4, #26
 8007228:	45c8      	cmp	r8, r9
 800722a:	dc09      	bgt.n	8007240 <_printf_float+0x228>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	f100 8107 	bmi.w	8007442 <_printf_float+0x42a>
 8007234:	68e0      	ldr	r0, [r4, #12]
 8007236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007238:	4298      	cmp	r0, r3
 800723a:	bfb8      	it	lt
 800723c:	4618      	movlt	r0, r3
 800723e:	e739      	b.n	80070b4 <_printf_float+0x9c>
 8007240:	2301      	movs	r3, #1
 8007242:	4652      	mov	r2, sl
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	f43f af30 	beq.w	80070b0 <_printf_float+0x98>
 8007250:	f109 0901 	add.w	r9, r9, #1
 8007254:	e7e8      	b.n	8007228 <_printf_float+0x210>
 8007256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc3b      	bgt.n	80072d4 <_printf_float+0x2bc>
 800725c:	4a1c      	ldr	r2, [pc, #112]	@ (80072d0 <_printf_float+0x2b8>)
 800725e:	2301      	movs	r3, #1
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	f43f af22 	beq.w	80070b0 <_printf_float+0x98>
 800726c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007270:	ea59 0303 	orrs.w	r3, r9, r3
 8007274:	d102      	bne.n	800727c <_printf_float+0x264>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	07d9      	lsls	r1, r3, #31
 800727a:	d5d7      	bpl.n	800722c <_printf_float+0x214>
 800727c:	9b05      	ldr	r3, [sp, #20]
 800727e:	465a      	mov	r2, fp
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af12 	beq.w	80070b0 <_printf_float+0x98>
 800728c:	f04f 0a00 	mov.w	sl, #0
 8007290:	f104 0b1a 	add.w	fp, r4, #26
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	425b      	negs	r3, r3
 8007298:	4553      	cmp	r3, sl
 800729a:	dc01      	bgt.n	80072a0 <_printf_float+0x288>
 800729c:	464b      	mov	r3, r9
 800729e:	e794      	b.n	80071ca <_printf_float+0x1b2>
 80072a0:	2301      	movs	r3, #1
 80072a2:	465a      	mov	r2, fp
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f af00 	beq.w	80070b0 <_printf_float+0x98>
 80072b0:	f10a 0a01 	add.w	sl, sl, #1
 80072b4:	e7ee      	b.n	8007294 <_printf_float+0x27c>
 80072b6:	bf00      	nop
 80072b8:	ffffffff 	.word	0xffffffff
 80072bc:	7fefffff 	.word	0x7fefffff
 80072c0:	0800996c 	.word	0x0800996c
 80072c4:	08009970 	.word	0x08009970
 80072c8:	08009974 	.word	0x08009974
 80072cc:	08009978 	.word	0x08009978
 80072d0:	0800997c 	.word	0x0800997c
 80072d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072da:	4553      	cmp	r3, sl
 80072dc:	bfa8      	it	ge
 80072de:	4653      	movge	r3, sl
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	4699      	mov	r9, r3
 80072e4:	dc37      	bgt.n	8007356 <_printf_float+0x33e>
 80072e6:	2300      	movs	r3, #0
 80072e8:	9307      	str	r3, [sp, #28]
 80072ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072ee:	f104 021a 	add.w	r2, r4, #26
 80072f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072f4:	9907      	ldr	r1, [sp, #28]
 80072f6:	9306      	str	r3, [sp, #24]
 80072f8:	eba3 0309 	sub.w	r3, r3, r9
 80072fc:	428b      	cmp	r3, r1
 80072fe:	dc31      	bgt.n	8007364 <_printf_float+0x34c>
 8007300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007302:	459a      	cmp	sl, r3
 8007304:	dc3b      	bgt.n	800737e <_printf_float+0x366>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	07da      	lsls	r2, r3, #31
 800730a:	d438      	bmi.n	800737e <_printf_float+0x366>
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	ebaa 0903 	sub.w	r9, sl, r3
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	ebaa 0303 	sub.w	r3, sl, r3
 8007318:	4599      	cmp	r9, r3
 800731a:	bfa8      	it	ge
 800731c:	4699      	movge	r9, r3
 800731e:	f1b9 0f00 	cmp.w	r9, #0
 8007322:	dc34      	bgt.n	800738e <_printf_float+0x376>
 8007324:	f04f 0800 	mov.w	r8, #0
 8007328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800732c:	f104 0b1a 	add.w	fp, r4, #26
 8007330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007332:	ebaa 0303 	sub.w	r3, sl, r3
 8007336:	eba3 0309 	sub.w	r3, r3, r9
 800733a:	4543      	cmp	r3, r8
 800733c:	f77f af76 	ble.w	800722c <_printf_float+0x214>
 8007340:	2301      	movs	r3, #1
 8007342:	465a      	mov	r2, fp
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	f43f aeb0 	beq.w	80070b0 <_printf_float+0x98>
 8007350:	f108 0801 	add.w	r8, r8, #1
 8007354:	e7ec      	b.n	8007330 <_printf_float+0x318>
 8007356:	4642      	mov	r2, r8
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	47b8      	blx	r7
 800735e:	3001      	adds	r0, #1
 8007360:	d1c1      	bne.n	80072e6 <_printf_float+0x2ce>
 8007362:	e6a5      	b.n	80070b0 <_printf_float+0x98>
 8007364:	2301      	movs	r3, #1
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	9206      	str	r2, [sp, #24]
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f ae9e 	beq.w	80070b0 <_printf_float+0x98>
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	9a06      	ldr	r2, [sp, #24]
 8007378:	3301      	adds	r3, #1
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	e7b9      	b.n	80072f2 <_printf_float+0x2da>
 800737e:	9b05      	ldr	r3, [sp, #20]
 8007380:	465a      	mov	r2, fp
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	d1bf      	bne.n	800730c <_printf_float+0x2f4>
 800738c:	e690      	b.n	80070b0 <_printf_float+0x98>
 800738e:	9a06      	ldr	r2, [sp, #24]
 8007390:	464b      	mov	r3, r9
 8007392:	4442      	add	r2, r8
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	47b8      	blx	r7
 800739a:	3001      	adds	r0, #1
 800739c:	d1c2      	bne.n	8007324 <_printf_float+0x30c>
 800739e:	e687      	b.n	80070b0 <_printf_float+0x98>
 80073a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80073a4:	f1b9 0f01 	cmp.w	r9, #1
 80073a8:	dc01      	bgt.n	80073ae <_printf_float+0x396>
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d536      	bpl.n	800741c <_printf_float+0x404>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4642      	mov	r2, r8
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f ae79 	beq.w	80070b0 <_printf_float+0x98>
 80073be:	9b05      	ldr	r3, [sp, #20]
 80073c0:	465a      	mov	r2, fp
 80073c2:	4631      	mov	r1, r6
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b8      	blx	r7
 80073c8:	3001      	adds	r0, #1
 80073ca:	f43f ae71 	beq.w	80070b0 <_printf_float+0x98>
 80073ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80073d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073da:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80073de:	d018      	beq.n	8007412 <_printf_float+0x3fa>
 80073e0:	464b      	mov	r3, r9
 80073e2:	f108 0201 	add.w	r2, r8, #1
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d10c      	bne.n	800740a <_printf_float+0x3f2>
 80073f0:	e65e      	b.n	80070b0 <_printf_float+0x98>
 80073f2:	2301      	movs	r3, #1
 80073f4:	465a      	mov	r2, fp
 80073f6:	4631      	mov	r1, r6
 80073f8:	4628      	mov	r0, r5
 80073fa:	47b8      	blx	r7
 80073fc:	3001      	adds	r0, #1
 80073fe:	f43f ae57 	beq.w	80070b0 <_printf_float+0x98>
 8007402:	f108 0801 	add.w	r8, r8, #1
 8007406:	45c8      	cmp	r8, r9
 8007408:	dbf3      	blt.n	80073f2 <_printf_float+0x3da>
 800740a:	4653      	mov	r3, sl
 800740c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007410:	e6dc      	b.n	80071cc <_printf_float+0x1b4>
 8007412:	f04f 0800 	mov.w	r8, #0
 8007416:	f104 0b1a 	add.w	fp, r4, #26
 800741a:	e7f4      	b.n	8007406 <_printf_float+0x3ee>
 800741c:	2301      	movs	r3, #1
 800741e:	4642      	mov	r2, r8
 8007420:	e7e1      	b.n	80073e6 <_printf_float+0x3ce>
 8007422:	2301      	movs	r3, #1
 8007424:	464a      	mov	r2, r9
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f ae3f 	beq.w	80070b0 <_printf_float+0x98>
 8007432:	f108 0801 	add.w	r8, r8, #1
 8007436:	68e3      	ldr	r3, [r4, #12]
 8007438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800743a:	1a5b      	subs	r3, r3, r1
 800743c:	4543      	cmp	r3, r8
 800743e:	dcf0      	bgt.n	8007422 <_printf_float+0x40a>
 8007440:	e6f8      	b.n	8007234 <_printf_float+0x21c>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	f104 0919 	add.w	r9, r4, #25
 800744a:	e7f4      	b.n	8007436 <_printf_float+0x41e>

0800744c <_printf_common>:
 800744c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007450:	4616      	mov	r6, r2
 8007452:	4698      	mov	r8, r3
 8007454:	688a      	ldr	r2, [r1, #8]
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800745c:	4293      	cmp	r3, r2
 800745e:	bfb8      	it	lt
 8007460:	4613      	movlt	r3, r2
 8007462:	6033      	str	r3, [r6, #0]
 8007464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	b10a      	cbz	r2, 8007472 <_printf_common+0x26>
 800746e:	3301      	adds	r3, #1
 8007470:	6033      	str	r3, [r6, #0]
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	0699      	lsls	r1, r3, #26
 8007476:	bf42      	ittt	mi
 8007478:	6833      	ldrmi	r3, [r6, #0]
 800747a:	3302      	addmi	r3, #2
 800747c:	6033      	strmi	r3, [r6, #0]
 800747e:	6825      	ldr	r5, [r4, #0]
 8007480:	f015 0506 	ands.w	r5, r5, #6
 8007484:	d106      	bne.n	8007494 <_printf_common+0x48>
 8007486:	f104 0a19 	add.w	sl, r4, #25
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	6832      	ldr	r2, [r6, #0]
 800748e:	1a9b      	subs	r3, r3, r2
 8007490:	42ab      	cmp	r3, r5
 8007492:	dc26      	bgt.n	80074e2 <_printf_common+0x96>
 8007494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	3b00      	subs	r3, #0
 800749c:	bf18      	it	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	0692      	lsls	r2, r2, #26
 80074a2:	d42b      	bmi.n	80074fc <_printf_common+0xb0>
 80074a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a8:	4641      	mov	r1, r8
 80074aa:	4638      	mov	r0, r7
 80074ac:	47c8      	blx	r9
 80074ae:	3001      	adds	r0, #1
 80074b0:	d01e      	beq.n	80074f0 <_printf_common+0xa4>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	6922      	ldr	r2, [r4, #16]
 80074b6:	f003 0306 	and.w	r3, r3, #6
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	bf02      	ittt	eq
 80074be:	68e5      	ldreq	r5, [r4, #12]
 80074c0:	6833      	ldreq	r3, [r6, #0]
 80074c2:	1aed      	subeq	r5, r5, r3
 80074c4:	68a3      	ldr	r3, [r4, #8]
 80074c6:	bf0c      	ite	eq
 80074c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074cc:	2500      	movne	r5, #0
 80074ce:	4293      	cmp	r3, r2
 80074d0:	bfc4      	itt	gt
 80074d2:	1a9b      	subgt	r3, r3, r2
 80074d4:	18ed      	addgt	r5, r5, r3
 80074d6:	2600      	movs	r6, #0
 80074d8:	341a      	adds	r4, #26
 80074da:	42b5      	cmp	r5, r6
 80074dc:	d11a      	bne.n	8007514 <_printf_common+0xc8>
 80074de:	2000      	movs	r0, #0
 80074e0:	e008      	b.n	80074f4 <_printf_common+0xa8>
 80074e2:	2301      	movs	r3, #1
 80074e4:	4652      	mov	r2, sl
 80074e6:	4641      	mov	r1, r8
 80074e8:	4638      	mov	r0, r7
 80074ea:	47c8      	blx	r9
 80074ec:	3001      	adds	r0, #1
 80074ee:	d103      	bne.n	80074f8 <_printf_common+0xac>
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	3501      	adds	r5, #1
 80074fa:	e7c6      	b.n	800748a <_printf_common+0x3e>
 80074fc:	18e1      	adds	r1, r4, r3
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	2030      	movs	r0, #48	@ 0x30
 8007502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007506:	4422      	add	r2, r4
 8007508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800750c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007510:	3302      	adds	r3, #2
 8007512:	e7c7      	b.n	80074a4 <_printf_common+0x58>
 8007514:	2301      	movs	r3, #1
 8007516:	4622      	mov	r2, r4
 8007518:	4641      	mov	r1, r8
 800751a:	4638      	mov	r0, r7
 800751c:	47c8      	blx	r9
 800751e:	3001      	adds	r0, #1
 8007520:	d0e6      	beq.n	80074f0 <_printf_common+0xa4>
 8007522:	3601      	adds	r6, #1
 8007524:	e7d9      	b.n	80074da <_printf_common+0x8e>
	...

08007528 <_printf_i>:
 8007528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	7e0f      	ldrb	r7, [r1, #24]
 800752e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007530:	2f78      	cmp	r7, #120	@ 0x78
 8007532:	4691      	mov	r9, r2
 8007534:	4680      	mov	r8, r0
 8007536:	460c      	mov	r4, r1
 8007538:	469a      	mov	sl, r3
 800753a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800753e:	d807      	bhi.n	8007550 <_printf_i+0x28>
 8007540:	2f62      	cmp	r7, #98	@ 0x62
 8007542:	d80a      	bhi.n	800755a <_printf_i+0x32>
 8007544:	2f00      	cmp	r7, #0
 8007546:	f000 80d2 	beq.w	80076ee <_printf_i+0x1c6>
 800754a:	2f58      	cmp	r7, #88	@ 0x58
 800754c:	f000 80b9 	beq.w	80076c2 <_printf_i+0x19a>
 8007550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007558:	e03a      	b.n	80075d0 <_printf_i+0xa8>
 800755a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800755e:	2b15      	cmp	r3, #21
 8007560:	d8f6      	bhi.n	8007550 <_printf_i+0x28>
 8007562:	a101      	add	r1, pc, #4	@ (adr r1, 8007568 <_printf_i+0x40>)
 8007564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007568:	080075c1 	.word	0x080075c1
 800756c:	080075d5 	.word	0x080075d5
 8007570:	08007551 	.word	0x08007551
 8007574:	08007551 	.word	0x08007551
 8007578:	08007551 	.word	0x08007551
 800757c:	08007551 	.word	0x08007551
 8007580:	080075d5 	.word	0x080075d5
 8007584:	08007551 	.word	0x08007551
 8007588:	08007551 	.word	0x08007551
 800758c:	08007551 	.word	0x08007551
 8007590:	08007551 	.word	0x08007551
 8007594:	080076d5 	.word	0x080076d5
 8007598:	080075ff 	.word	0x080075ff
 800759c:	0800768f 	.word	0x0800768f
 80075a0:	08007551 	.word	0x08007551
 80075a4:	08007551 	.word	0x08007551
 80075a8:	080076f7 	.word	0x080076f7
 80075ac:	08007551 	.word	0x08007551
 80075b0:	080075ff 	.word	0x080075ff
 80075b4:	08007551 	.word	0x08007551
 80075b8:	08007551 	.word	0x08007551
 80075bc:	08007697 	.word	0x08007697
 80075c0:	6833      	ldr	r3, [r6, #0]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075d0:	2301      	movs	r3, #1
 80075d2:	e09d      	b.n	8007710 <_printf_i+0x1e8>
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1d19      	adds	r1, r3, #4
 80075da:	6031      	str	r1, [r6, #0]
 80075dc:	0606      	lsls	r6, r0, #24
 80075de:	d501      	bpl.n	80075e4 <_printf_i+0xbc>
 80075e0:	681d      	ldr	r5, [r3, #0]
 80075e2:	e003      	b.n	80075ec <_printf_i+0xc4>
 80075e4:	0645      	lsls	r5, r0, #25
 80075e6:	d5fb      	bpl.n	80075e0 <_printf_i+0xb8>
 80075e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xd0>
 80075f0:	232d      	movs	r3, #45	@ 0x2d
 80075f2:	426d      	negs	r5, r5
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f8:	4859      	ldr	r0, [pc, #356]	@ (8007760 <_printf_i+0x238>)
 80075fa:	230a      	movs	r3, #10
 80075fc:	e011      	b.n	8007622 <_printf_i+0xfa>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	0608      	lsls	r0, r1, #24
 8007604:	f853 5b04 	ldr.w	r5, [r3], #4
 8007608:	d402      	bmi.n	8007610 <_printf_i+0xe8>
 800760a:	0649      	lsls	r1, r1, #25
 800760c:	bf48      	it	mi
 800760e:	b2ad      	uxthmi	r5, r5
 8007610:	2f6f      	cmp	r7, #111	@ 0x6f
 8007612:	4853      	ldr	r0, [pc, #332]	@ (8007760 <_printf_i+0x238>)
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	bf14      	ite	ne
 8007618:	230a      	movne	r3, #10
 800761a:	2308      	moveq	r3, #8
 800761c:	2100      	movs	r1, #0
 800761e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007622:	6866      	ldr	r6, [r4, #4]
 8007624:	60a6      	str	r6, [r4, #8]
 8007626:	2e00      	cmp	r6, #0
 8007628:	bfa2      	ittt	ge
 800762a:	6821      	ldrge	r1, [r4, #0]
 800762c:	f021 0104 	bicge.w	r1, r1, #4
 8007630:	6021      	strge	r1, [r4, #0]
 8007632:	b90d      	cbnz	r5, 8007638 <_printf_i+0x110>
 8007634:	2e00      	cmp	r6, #0
 8007636:	d04b      	beq.n	80076d0 <_printf_i+0x1a8>
 8007638:	4616      	mov	r6, r2
 800763a:	fbb5 f1f3 	udiv	r1, r5, r3
 800763e:	fb03 5711 	mls	r7, r3, r1, r5
 8007642:	5dc7      	ldrb	r7, [r0, r7]
 8007644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007648:	462f      	mov	r7, r5
 800764a:	42bb      	cmp	r3, r7
 800764c:	460d      	mov	r5, r1
 800764e:	d9f4      	bls.n	800763a <_printf_i+0x112>
 8007650:	2b08      	cmp	r3, #8
 8007652:	d10b      	bne.n	800766c <_printf_i+0x144>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07df      	lsls	r7, r3, #31
 8007658:	d508      	bpl.n	800766c <_printf_i+0x144>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	bfde      	ittt	le
 8007662:	2330      	movle	r3, #48	@ 0x30
 8007664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007668:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800766c:	1b92      	subs	r2, r2, r6
 800766e:	6122      	str	r2, [r4, #16]
 8007670:	f8cd a000 	str.w	sl, [sp]
 8007674:	464b      	mov	r3, r9
 8007676:	aa03      	add	r2, sp, #12
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fee6 	bl	800744c <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	d14a      	bne.n	800771a <_printf_i+0x1f2>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007688:	b004      	add	sp, #16
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	4833      	ldr	r0, [pc, #204]	@ (8007764 <_printf_i+0x23c>)
 8007698:	2778      	movs	r7, #120	@ 0x78
 800769a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6831      	ldr	r1, [r6, #0]
 80076a2:	061f      	lsls	r7, r3, #24
 80076a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076a8:	d402      	bmi.n	80076b0 <_printf_i+0x188>
 80076aa:	065f      	lsls	r7, r3, #25
 80076ac:	bf48      	it	mi
 80076ae:	b2ad      	uxthmi	r5, r5
 80076b0:	6031      	str	r1, [r6, #0]
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	bf44      	itt	mi
 80076b6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ba:	6023      	strmi	r3, [r4, #0]
 80076bc:	b11d      	cbz	r5, 80076c6 <_printf_i+0x19e>
 80076be:	2310      	movs	r3, #16
 80076c0:	e7ac      	b.n	800761c <_printf_i+0xf4>
 80076c2:	4827      	ldr	r0, [pc, #156]	@ (8007760 <_printf_i+0x238>)
 80076c4:	e7e9      	b.n	800769a <_printf_i+0x172>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	f023 0320 	bic.w	r3, r3, #32
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	e7f6      	b.n	80076be <_printf_i+0x196>
 80076d0:	4616      	mov	r6, r2
 80076d2:	e7bd      	b.n	8007650 <_printf_i+0x128>
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	062e      	lsls	r6, r5, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1c0>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1c6>
 80076e8:	0668      	lsls	r0, r5, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1bc>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4616      	mov	r6, r2
 80076f4:	e7bc      	b.n	8007670 <_printf_i+0x148>
 80076f6:	6833      	ldr	r3, [r6, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	6032      	str	r2, [r6, #0]
 80076fc:	681e      	ldr	r6, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4630      	mov	r0, r6
 8007704:	f7f8 fd9c 	bl	8000240 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1e6>
 800770a:	1b80      	subs	r0, r0, r6
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007718:	e7aa      	b.n	8007670 <_printf_i+0x148>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	4632      	mov	r2, r6
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ad      	beq.n	8007684 <_printf_i+0x15c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x22e>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a6      	b.n	8007688 <_printf_i+0x160>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09d      	beq.n	8007684 <_printf_i+0x15c>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x212>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x206>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x222>
 800775e:	bf00      	nop
 8007760:	0800997e 	.word	0x0800997e
 8007764:	0800998f 	.word	0x0800998f

08007768 <std>:
 8007768:	2300      	movs	r3, #0
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	e9c0 3300 	strd	r3, r3, [r0]
 8007772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007776:	6083      	str	r3, [r0, #8]
 8007778:	8181      	strh	r1, [r0, #12]
 800777a:	6643      	str	r3, [r0, #100]	@ 0x64
 800777c:	81c2      	strh	r2, [r0, #14]
 800777e:	6183      	str	r3, [r0, #24]
 8007780:	4619      	mov	r1, r3
 8007782:	2208      	movs	r2, #8
 8007784:	305c      	adds	r0, #92	@ 0x5c
 8007786:	f000 f9f9 	bl	8007b7c <memset>
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x58>)
 800778c:	6263      	str	r3, [r4, #36]	@ 0x24
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x5c>)
 8007790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <std+0x60>)
 8007794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x64>)
 8007798:	6323      	str	r3, [r4, #48]	@ 0x30
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <std+0x68>)
 800779c:	6224      	str	r4, [r4, #32]
 800779e:	429c      	cmp	r4, r3
 80077a0:	d006      	beq.n	80077b0 <std+0x48>
 80077a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077a6:	4294      	cmp	r4, r2
 80077a8:	d002      	beq.n	80077b0 <std+0x48>
 80077aa:	33d0      	adds	r3, #208	@ 0xd0
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d105      	bne.n	80077bc <std+0x54>
 80077b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 ba5c 	b.w	8007c74 <__retarget_lock_init_recursive>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	080079cd 	.word	0x080079cd
 80077c4:	080079ef 	.word	0x080079ef
 80077c8:	08007a27 	.word	0x08007a27
 80077cc:	08007a4b 	.word	0x08007a4b
 80077d0:	20002d74 	.word	0x20002d74

080077d4 <stdio_exit_handler>:
 80077d4:	4a02      	ldr	r2, [pc, #8]	@ (80077e0 <stdio_exit_handler+0xc>)
 80077d6:	4903      	ldr	r1, [pc, #12]	@ (80077e4 <stdio_exit_handler+0x10>)
 80077d8:	4803      	ldr	r0, [pc, #12]	@ (80077e8 <stdio_exit_handler+0x14>)
 80077da:	f000 b869 	b.w	80078b0 <_fwalk_sglue>
 80077de:	bf00      	nop
 80077e0:	2000000c 	.word	0x2000000c
 80077e4:	080094cd 	.word	0x080094cd
 80077e8:	2000001c 	.word	0x2000001c

080077ec <cleanup_stdio>:
 80077ec:	6841      	ldr	r1, [r0, #4]
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <cleanup_stdio+0x34>)
 80077f0:	4299      	cmp	r1, r3
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	d001      	beq.n	80077fc <cleanup_stdio+0x10>
 80077f8:	f001 fe68 	bl	80094cc <_fflush_r>
 80077fc:	68a1      	ldr	r1, [r4, #8]
 80077fe:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <cleanup_stdio+0x38>)
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <cleanup_stdio+0x1e>
 8007804:	4620      	mov	r0, r4
 8007806:	f001 fe61 	bl	80094cc <_fflush_r>
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	4b06      	ldr	r3, [pc, #24]	@ (8007828 <cleanup_stdio+0x3c>)
 800780e:	4299      	cmp	r1, r3
 8007810:	d004      	beq.n	800781c <cleanup_stdio+0x30>
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f001 be58 	b.w	80094cc <_fflush_r>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	bf00      	nop
 8007820:	20002d74 	.word	0x20002d74
 8007824:	20002ddc 	.word	0x20002ddc
 8007828:	20002e44 	.word	0x20002e44

0800782c <global_stdio_init.part.0>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <global_stdio_init.part.0+0x30>)
 8007830:	4c0b      	ldr	r4, [pc, #44]	@ (8007860 <global_stdio_init.part.0+0x34>)
 8007832:	4a0c      	ldr	r2, [pc, #48]	@ (8007864 <global_stdio_init.part.0+0x38>)
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	4620      	mov	r0, r4
 8007838:	2200      	movs	r2, #0
 800783a:	2104      	movs	r1, #4
 800783c:	f7ff ff94 	bl	8007768 <std>
 8007840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007844:	2201      	movs	r2, #1
 8007846:	2109      	movs	r1, #9
 8007848:	f7ff ff8e 	bl	8007768 <std>
 800784c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007850:	2202      	movs	r2, #2
 8007852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007856:	2112      	movs	r1, #18
 8007858:	f7ff bf86 	b.w	8007768 <std>
 800785c:	20002eac 	.word	0x20002eac
 8007860:	20002d74 	.word	0x20002d74
 8007864:	080077d5 	.word	0x080077d5

08007868 <__sfp_lock_acquire>:
 8007868:	4801      	ldr	r0, [pc, #4]	@ (8007870 <__sfp_lock_acquire+0x8>)
 800786a:	f000 ba04 	b.w	8007c76 <__retarget_lock_acquire_recursive>
 800786e:	bf00      	nop
 8007870:	20002eb5 	.word	0x20002eb5

08007874 <__sfp_lock_release>:
 8007874:	4801      	ldr	r0, [pc, #4]	@ (800787c <__sfp_lock_release+0x8>)
 8007876:	f000 b9ff 	b.w	8007c78 <__retarget_lock_release_recursive>
 800787a:	bf00      	nop
 800787c:	20002eb5 	.word	0x20002eb5

08007880 <__sinit>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	f7ff fff0 	bl	8007868 <__sfp_lock_acquire>
 8007888:	6a23      	ldr	r3, [r4, #32]
 800788a:	b11b      	cbz	r3, 8007894 <__sinit+0x14>
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f7ff bff0 	b.w	8007874 <__sfp_lock_release>
 8007894:	4b04      	ldr	r3, [pc, #16]	@ (80078a8 <__sinit+0x28>)
 8007896:	6223      	str	r3, [r4, #32]
 8007898:	4b04      	ldr	r3, [pc, #16]	@ (80078ac <__sinit+0x2c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f5      	bne.n	800788c <__sinit+0xc>
 80078a0:	f7ff ffc4 	bl	800782c <global_stdio_init.part.0>
 80078a4:	e7f2      	b.n	800788c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	080077ed 	.word	0x080077ed
 80078ac:	20002eac 	.word	0x20002eac

080078b0 <_fwalk_sglue>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4607      	mov	r7, r0
 80078b6:	4688      	mov	r8, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	2600      	movs	r6, #0
 80078bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c0:	f1b9 0901 	subs.w	r9, r9, #1
 80078c4:	d505      	bpl.n	80078d2 <_fwalk_sglue+0x22>
 80078c6:	6824      	ldr	r4, [r4, #0]
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d1f7      	bne.n	80078bc <_fwalk_sglue+0xc>
 80078cc:	4630      	mov	r0, r6
 80078ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d907      	bls.n	80078e8 <_fwalk_sglue+0x38>
 80078d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078dc:	3301      	adds	r3, #1
 80078de:	d003      	beq.n	80078e8 <_fwalk_sglue+0x38>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	4306      	orrs	r6, r0
 80078e8:	3568      	adds	r5, #104	@ 0x68
 80078ea:	e7e9      	b.n	80078c0 <_fwalk_sglue+0x10>

080078ec <iprintf>:
 80078ec:	b40f      	push	{r0, r1, r2, r3}
 80078ee:	b507      	push	{r0, r1, r2, lr}
 80078f0:	4906      	ldr	r1, [pc, #24]	@ (800790c <iprintf+0x20>)
 80078f2:	ab04      	add	r3, sp, #16
 80078f4:	6808      	ldr	r0, [r1, #0]
 80078f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fa:	6881      	ldr	r1, [r0, #8]
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	f001 fc49 	bl	8009194 <_vfiprintf_r>
 8007902:	b003      	add	sp, #12
 8007904:	f85d eb04 	ldr.w	lr, [sp], #4
 8007908:	b004      	add	sp, #16
 800790a:	4770      	bx	lr
 800790c:	20000018 	.word	0x20000018

08007910 <_puts_r>:
 8007910:	6a03      	ldr	r3, [r0, #32]
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	6884      	ldr	r4, [r0, #8]
 8007916:	4605      	mov	r5, r0
 8007918:	460e      	mov	r6, r1
 800791a:	b90b      	cbnz	r3, 8007920 <_puts_r+0x10>
 800791c:	f7ff ffb0 	bl	8007880 <__sinit>
 8007920:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d405      	bmi.n	8007932 <_puts_r+0x22>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	0598      	lsls	r0, r3, #22
 800792a:	d402      	bmi.n	8007932 <_puts_r+0x22>
 800792c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800792e:	f000 f9a2 	bl	8007c76 <__retarget_lock_acquire_recursive>
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	0719      	lsls	r1, r3, #28
 8007936:	d502      	bpl.n	800793e <_puts_r+0x2e>
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d135      	bne.n	80079aa <_puts_r+0x9a>
 800793e:	4621      	mov	r1, r4
 8007940:	4628      	mov	r0, r5
 8007942:	f000 f8c5 	bl	8007ad0 <__swsetup_r>
 8007946:	b380      	cbz	r0, 80079aa <_puts_r+0x9a>
 8007948:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800794c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d405      	bmi.n	800795e <_puts_r+0x4e>
 8007952:	89a3      	ldrh	r3, [r4, #12]
 8007954:	059b      	lsls	r3, r3, #22
 8007956:	d402      	bmi.n	800795e <_puts_r+0x4e>
 8007958:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795a:	f000 f98d 	bl	8007c78 <__retarget_lock_release_recursive>
 800795e:	4628      	mov	r0, r5
 8007960:	bd70      	pop	{r4, r5, r6, pc}
 8007962:	2b00      	cmp	r3, #0
 8007964:	da04      	bge.n	8007970 <_puts_r+0x60>
 8007966:	69a2      	ldr	r2, [r4, #24]
 8007968:	429a      	cmp	r2, r3
 800796a:	dc17      	bgt.n	800799c <_puts_r+0x8c>
 800796c:	290a      	cmp	r1, #10
 800796e:	d015      	beq.n	800799c <_puts_r+0x8c>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	7019      	strb	r1, [r3, #0]
 8007978:	68a3      	ldr	r3, [r4, #8]
 800797a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800797e:	3b01      	subs	r3, #1
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	2900      	cmp	r1, #0
 8007984:	d1ed      	bne.n	8007962 <_puts_r+0x52>
 8007986:	2b00      	cmp	r3, #0
 8007988:	da11      	bge.n	80079ae <_puts_r+0x9e>
 800798a:	4622      	mov	r2, r4
 800798c:	210a      	movs	r1, #10
 800798e:	4628      	mov	r0, r5
 8007990:	f000 f85f 	bl	8007a52 <__swbuf_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d0d7      	beq.n	8007948 <_puts_r+0x38>
 8007998:	250a      	movs	r5, #10
 800799a:	e7d7      	b.n	800794c <_puts_r+0x3c>
 800799c:	4622      	mov	r2, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f857 	bl	8007a52 <__swbuf_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1e7      	bne.n	8007978 <_puts_r+0x68>
 80079a8:	e7ce      	b.n	8007948 <_puts_r+0x38>
 80079aa:	3e01      	subs	r6, #1
 80079ac:	e7e4      	b.n	8007978 <_puts_r+0x68>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	220a      	movs	r2, #10
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e7ee      	b.n	8007998 <_puts_r+0x88>
	...

080079bc <puts>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	@ (80079c8 <puts+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f7ff bfa5 	b.w	8007910 <_puts_r>
 80079c6:	bf00      	nop
 80079c8:	20000018 	.word	0x20000018

080079cc <__sread>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	460c      	mov	r4, r1
 80079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d4:	f000 f900 	bl	8007bd8 <_read_r>
 80079d8:	2800      	cmp	r0, #0
 80079da:	bfab      	itete	ge
 80079dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079de:	89a3      	ldrhlt	r3, [r4, #12]
 80079e0:	181b      	addge	r3, r3, r0
 80079e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079e6:	bfac      	ite	ge
 80079e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079ea:	81a3      	strhlt	r3, [r4, #12]
 80079ec:	bd10      	pop	{r4, pc}

080079ee <__swrite>:
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	461f      	mov	r7, r3
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	05db      	lsls	r3, r3, #23
 80079f8:	4605      	mov	r5, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	4616      	mov	r6, r2
 80079fe:	d505      	bpl.n	8007a0c <__swrite+0x1e>
 8007a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a04:	2302      	movs	r3, #2
 8007a06:	2200      	movs	r2, #0
 8007a08:	f000 f8d4 	bl	8007bb4 <_lseek_r>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a16:	81a3      	strh	r3, [r4, #12]
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a22:	f000 b8eb 	b.w	8007bfc <_write_r>

08007a26 <__sseek>:
 8007a26:	b510      	push	{r4, lr}
 8007a28:	460c      	mov	r4, r1
 8007a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2e:	f000 f8c1 	bl	8007bb4 <_lseek_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	bf15      	itete	ne
 8007a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a42:	81a3      	strheq	r3, [r4, #12]
 8007a44:	bf18      	it	ne
 8007a46:	81a3      	strhne	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__sclose>:
 8007a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4e:	f000 b8a1 	b.w	8007b94 <_close_r>

08007a52 <__swbuf_r>:
 8007a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a54:	460e      	mov	r6, r1
 8007a56:	4614      	mov	r4, r2
 8007a58:	4605      	mov	r5, r0
 8007a5a:	b118      	cbz	r0, 8007a64 <__swbuf_r+0x12>
 8007a5c:	6a03      	ldr	r3, [r0, #32]
 8007a5e:	b90b      	cbnz	r3, 8007a64 <__swbuf_r+0x12>
 8007a60:	f7ff ff0e 	bl	8007880 <__sinit>
 8007a64:	69a3      	ldr	r3, [r4, #24]
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	071a      	lsls	r2, r3, #28
 8007a6c:	d501      	bpl.n	8007a72 <__swbuf_r+0x20>
 8007a6e:	6923      	ldr	r3, [r4, #16]
 8007a70:	b943      	cbnz	r3, 8007a84 <__swbuf_r+0x32>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 f82b 	bl	8007ad0 <__swsetup_r>
 8007a7a:	b118      	cbz	r0, 8007a84 <__swbuf_r+0x32>
 8007a7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007a80:	4638      	mov	r0, r7
 8007a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	6922      	ldr	r2, [r4, #16]
 8007a88:	1a98      	subs	r0, r3, r2
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	b2f6      	uxtb	r6, r6
 8007a8e:	4283      	cmp	r3, r0
 8007a90:	4637      	mov	r7, r6
 8007a92:	dc05      	bgt.n	8007aa0 <__swbuf_r+0x4e>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f001 fd18 	bl	80094cc <_fflush_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d1ed      	bne.n	8007a7c <__swbuf_r+0x2a>
 8007aa0:	68a3      	ldr	r3, [r4, #8]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	60a3      	str	r3, [r4, #8]
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	6022      	str	r2, [r4, #0]
 8007aac:	701e      	strb	r6, [r3, #0]
 8007aae:	6962      	ldr	r2, [r4, #20]
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d004      	beq.n	8007ac0 <__swbuf_r+0x6e>
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	07db      	lsls	r3, r3, #31
 8007aba:	d5e1      	bpl.n	8007a80 <__swbuf_r+0x2e>
 8007abc:	2e0a      	cmp	r6, #10
 8007abe:	d1df      	bne.n	8007a80 <__swbuf_r+0x2e>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f001 fd02 	bl	80094cc <_fflush_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d0d9      	beq.n	8007a80 <__swbuf_r+0x2e>
 8007acc:	e7d6      	b.n	8007a7c <__swbuf_r+0x2a>
	...

08007ad0 <__swsetup_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4b29      	ldr	r3, [pc, #164]	@ (8007b78 <__swsetup_r+0xa8>)
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b118      	cbz	r0, 8007ae4 <__swsetup_r+0x14>
 8007adc:	6a03      	ldr	r3, [r0, #32]
 8007ade:	b90b      	cbnz	r3, 8007ae4 <__swsetup_r+0x14>
 8007ae0:	f7ff fece 	bl	8007880 <__sinit>
 8007ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae8:	0719      	lsls	r1, r3, #28
 8007aea:	d422      	bmi.n	8007b32 <__swsetup_r+0x62>
 8007aec:	06da      	lsls	r2, r3, #27
 8007aee:	d407      	bmi.n	8007b00 <__swsetup_r+0x30>
 8007af0:	2209      	movs	r2, #9
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007afe:	e033      	b.n	8007b68 <__swsetup_r+0x98>
 8007b00:	0758      	lsls	r0, r3, #29
 8007b02:	d512      	bpl.n	8007b2a <__swsetup_r+0x5a>
 8007b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b06:	b141      	cbz	r1, 8007b1a <__swsetup_r+0x4a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__swsetup_r+0x46>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 fe93 	bl	800883c <_free_r>
 8007b16:	2300      	movs	r3, #0
 8007b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b94b      	cbnz	r3, 8007b4a <__swsetup_r+0x7a>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b40:	d003      	beq.n	8007b4a <__swsetup_r+0x7a>
 8007b42:	4621      	mov	r1, r4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f001 fd0f 	bl	8009568 <__smakebuf_r>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	f013 0201 	ands.w	r2, r3, #1
 8007b52:	d00a      	beq.n	8007b6a <__swsetup_r+0x9a>
 8007b54:	2200      	movs	r2, #0
 8007b56:	60a2      	str	r2, [r4, #8]
 8007b58:	6962      	ldr	r2, [r4, #20]
 8007b5a:	4252      	negs	r2, r2
 8007b5c:	61a2      	str	r2, [r4, #24]
 8007b5e:	6922      	ldr	r2, [r4, #16]
 8007b60:	b942      	cbnz	r2, 8007b74 <__swsetup_r+0xa4>
 8007b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b66:	d1c5      	bne.n	8007af4 <__swsetup_r+0x24>
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
 8007b6a:	0799      	lsls	r1, r3, #30
 8007b6c:	bf58      	it	pl
 8007b6e:	6962      	ldrpl	r2, [r4, #20]
 8007b70:	60a2      	str	r2, [r4, #8]
 8007b72:	e7f4      	b.n	8007b5e <__swsetup_r+0x8e>
 8007b74:	2000      	movs	r0, #0
 8007b76:	e7f7      	b.n	8007b68 <__swsetup_r+0x98>
 8007b78:	20000018 	.word	0x20000018

08007b7c <memset>:
 8007b7c:	4402      	add	r2, r0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d100      	bne.n	8007b86 <memset+0xa>
 8007b84:	4770      	bx	lr
 8007b86:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8a:	e7f9      	b.n	8007b80 <memset+0x4>

08007b8c <_localeconv_r>:
 8007b8c:	4800      	ldr	r0, [pc, #0]	@ (8007b90 <_localeconv_r+0x4>)
 8007b8e:	4770      	bx	lr
 8007b90:	20000158 	.word	0x20000158

08007b94 <_close_r>:
 8007b94:	b538      	push	{r3, r4, r5, lr}
 8007b96:	4d06      	ldr	r5, [pc, #24]	@ (8007bb0 <_close_r+0x1c>)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	f7fa fa74 	bl	800208c <_close>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d102      	bne.n	8007bae <_close_r+0x1a>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	b103      	cbz	r3, 8007bae <_close_r+0x1a>
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	20002eb0 	.word	0x20002eb0

08007bb4 <_lseek_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d07      	ldr	r5, [pc, #28]	@ (8007bd4 <_lseek_r+0x20>)
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	602a      	str	r2, [r5, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7fa fa89 	bl	80020da <_lseek>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_lseek_r+0x1e>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_lseek_r+0x1e>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	20002eb0 	.word	0x20002eb0

08007bd8 <_read_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	4d07      	ldr	r5, [pc, #28]	@ (8007bf8 <_read_r+0x20>)
 8007bdc:	4604      	mov	r4, r0
 8007bde:	4608      	mov	r0, r1
 8007be0:	4611      	mov	r1, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	602a      	str	r2, [r5, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f7fa fa17 	bl	800201a <_read>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_read_r+0x1e>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_read_r+0x1e>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20002eb0 	.word	0x20002eb0

08007bfc <_write_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	@ (8007c1c <_write_r+0x20>)
 8007c00:	4604      	mov	r4, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7fa fa22 	bl	8002054 <_write>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_write_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_write_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20002eb0 	.word	0x20002eb0

08007c20 <__errno>:
 8007c20:	4b01      	ldr	r3, [pc, #4]	@ (8007c28 <__errno+0x8>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000018 	.word	0x20000018

08007c2c <__libc_init_array>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007c64 <__libc_init_array+0x38>)
 8007c30:	4c0d      	ldr	r4, [pc, #52]	@ (8007c68 <__libc_init_array+0x3c>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	2600      	movs	r6, #0
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	d109      	bne.n	8007c50 <__libc_init_array+0x24>
 8007c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007c6c <__libc_init_array+0x40>)
 8007c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007c70 <__libc_init_array+0x44>)
 8007c40:	f001 fdbe 	bl	80097c0 <_init>
 8007c44:	1b64      	subs	r4, r4, r5
 8007c46:	10a4      	asrs	r4, r4, #2
 8007c48:	2600      	movs	r6, #0
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d105      	bne.n	8007c5a <__libc_init_array+0x2e>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c54:	4798      	blx	r3
 8007c56:	3601      	adds	r6, #1
 8007c58:	e7ee      	b.n	8007c38 <__libc_init_array+0xc>
 8007c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5e:	4798      	blx	r3
 8007c60:	3601      	adds	r6, #1
 8007c62:	e7f2      	b.n	8007c4a <__libc_init_array+0x1e>
 8007c64:	08009ce8 	.word	0x08009ce8
 8007c68:	08009ce8 	.word	0x08009ce8
 8007c6c:	08009ce8 	.word	0x08009ce8
 8007c70:	08009cec 	.word	0x08009cec

08007c74 <__retarget_lock_init_recursive>:
 8007c74:	4770      	bx	lr

08007c76 <__retarget_lock_acquire_recursive>:
 8007c76:	4770      	bx	lr

08007c78 <__retarget_lock_release_recursive>:
 8007c78:	4770      	bx	lr

08007c7a <quorem>:
 8007c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7e:	6903      	ldr	r3, [r0, #16]
 8007c80:	690c      	ldr	r4, [r1, #16]
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	4607      	mov	r7, r0
 8007c86:	db7e      	blt.n	8007d86 <quorem+0x10c>
 8007c88:	3c01      	subs	r4, #1
 8007c8a:	f101 0814 	add.w	r8, r1, #20
 8007c8e:	00a3      	lsls	r3, r4, #2
 8007c90:	f100 0514 	add.w	r5, r0, #20
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cb0:	d32e      	bcc.n	8007d10 <quorem+0x96>
 8007cb2:	f04f 0a00 	mov.w	sl, #0
 8007cb6:	46c4      	mov	ip, r8
 8007cb8:	46ae      	mov	lr, r5
 8007cba:	46d3      	mov	fp, sl
 8007cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cc0:	b298      	uxth	r0, r3
 8007cc2:	fb06 a000 	mla	r0, r6, r0, sl
 8007cc6:	0c02      	lsrs	r2, r0, #16
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	fb06 2303 	mla	r3, r6, r3, r2
 8007cce:	f8de 2000 	ldr.w	r2, [lr]
 8007cd2:	b280      	uxth	r0, r0
 8007cd4:	b292      	uxth	r2, r2
 8007cd6:	1a12      	subs	r2, r2, r0
 8007cd8:	445a      	add	r2, fp
 8007cda:	f8de 0000 	ldr.w	r0, [lr]
 8007cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ce8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cec:	b292      	uxth	r2, r2
 8007cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cf2:	45e1      	cmp	r9, ip
 8007cf4:	f84e 2b04 	str.w	r2, [lr], #4
 8007cf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007cfc:	d2de      	bcs.n	8007cbc <quorem+0x42>
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	58eb      	ldr	r3, [r5, r3]
 8007d02:	b92b      	cbnz	r3, 8007d10 <quorem+0x96>
 8007d04:	9b01      	ldr	r3, [sp, #4]
 8007d06:	3b04      	subs	r3, #4
 8007d08:	429d      	cmp	r5, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	d32f      	bcc.n	8007d6e <quorem+0xf4>
 8007d0e:	613c      	str	r4, [r7, #16]
 8007d10:	4638      	mov	r0, r7
 8007d12:	f001 f90d 	bl	8008f30 <__mcmp>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	db25      	blt.n	8007d66 <quorem+0xec>
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d22:	f8d1 c000 	ldr.w	ip, [r1]
 8007d26:	fa1f fe82 	uxth.w	lr, r2
 8007d2a:	fa1f f38c 	uxth.w	r3, ip
 8007d2e:	eba3 030e 	sub.w	r3, r3, lr
 8007d32:	4403      	add	r3, r0
 8007d34:	0c12      	lsrs	r2, r2, #16
 8007d36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d44:	45c1      	cmp	r9, r8
 8007d46:	f841 3b04 	str.w	r3, [r1], #4
 8007d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d4e:	d2e6      	bcs.n	8007d1e <quorem+0xa4>
 8007d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d58:	b922      	cbnz	r2, 8007d64 <quorem+0xea>
 8007d5a:	3b04      	subs	r3, #4
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	d30b      	bcc.n	8007d7a <quorem+0x100>
 8007d62:	613c      	str	r4, [r7, #16]
 8007d64:	3601      	adds	r6, #1
 8007d66:	4630      	mov	r0, r6
 8007d68:	b003      	add	sp, #12
 8007d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	3b04      	subs	r3, #4
 8007d72:	2a00      	cmp	r2, #0
 8007d74:	d1cb      	bne.n	8007d0e <quorem+0x94>
 8007d76:	3c01      	subs	r4, #1
 8007d78:	e7c6      	b.n	8007d08 <quorem+0x8e>
 8007d7a:	6812      	ldr	r2, [r2, #0]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	d1ef      	bne.n	8007d62 <quorem+0xe8>
 8007d82:	3c01      	subs	r4, #1
 8007d84:	e7ea      	b.n	8007d5c <quorem+0xe2>
 8007d86:	2000      	movs	r0, #0
 8007d88:	e7ee      	b.n	8007d68 <quorem+0xee>
 8007d8a:	0000      	movs	r0, r0
 8007d8c:	0000      	movs	r0, r0
	...

08007d90 <_dtoa_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b02 	vpush	{d8}
 8007d98:	69c7      	ldr	r7, [r0, #28]
 8007d9a:	b091      	sub	sp, #68	@ 0x44
 8007d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007da0:	ec55 4b10 	vmov	r4, r5, d0
 8007da4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007da6:	9107      	str	r1, [sp, #28]
 8007da8:	4681      	mov	r9, r0
 8007daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dac:	930d      	str	r3, [sp, #52]	@ 0x34
 8007dae:	b97f      	cbnz	r7, 8007dd0 <_dtoa_r+0x40>
 8007db0:	2010      	movs	r0, #16
 8007db2:	f000 fd8d 	bl	80088d0 <malloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	f8c9 001c 	str.w	r0, [r9, #28]
 8007dbc:	b920      	cbnz	r0, 8007dc8 <_dtoa_r+0x38>
 8007dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8008040 <_dtoa_r+0x2b0>)
 8007dc0:	21ef      	movs	r1, #239	@ 0xef
 8007dc2:	48a0      	ldr	r0, [pc, #640]	@ (8008044 <_dtoa_r+0x2b4>)
 8007dc4:	f001 fc4c 	bl	8009660 <__assert_func>
 8007dc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dcc:	6007      	str	r7, [r0, #0]
 8007dce:	60c7      	str	r7, [r0, #12]
 8007dd0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007dd4:	6819      	ldr	r1, [r3, #0]
 8007dd6:	b159      	cbz	r1, 8007df0 <_dtoa_r+0x60>
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	604a      	str	r2, [r1, #4]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4093      	lsls	r3, r2
 8007de0:	608b      	str	r3, [r1, #8]
 8007de2:	4648      	mov	r0, r9
 8007de4:	f000 fe6a 	bl	8008abc <_Bfree>
 8007de8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	1e2b      	subs	r3, r5, #0
 8007df2:	bfbb      	ittet	lt
 8007df4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007df8:	9303      	strlt	r3, [sp, #12]
 8007dfa:	2300      	movge	r3, #0
 8007dfc:	2201      	movlt	r2, #1
 8007dfe:	bfac      	ite	ge
 8007e00:	6033      	strge	r3, [r6, #0]
 8007e02:	6032      	strlt	r2, [r6, #0]
 8007e04:	4b90      	ldr	r3, [pc, #576]	@ (8008048 <_dtoa_r+0x2b8>)
 8007e06:	9e03      	ldr	r6, [sp, #12]
 8007e08:	43b3      	bics	r3, r6
 8007e0a:	d110      	bne.n	8007e2e <_dtoa_r+0x9e>
 8007e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e0e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007e18:	4323      	orrs	r3, r4
 8007e1a:	f000 84de 	beq.w	80087da <_dtoa_r+0xa4a>
 8007e1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e20:	4f8a      	ldr	r7, [pc, #552]	@ (800804c <_dtoa_r+0x2bc>)
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 84e0 	beq.w	80087e8 <_dtoa_r+0xa58>
 8007e28:	1cfb      	adds	r3, r7, #3
 8007e2a:	f000 bcdb 	b.w	80087e4 <_dtoa_r+0xa54>
 8007e2e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007e32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	d10a      	bne.n	8007e52 <_dtoa_r+0xc2>
 8007e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007e44:	b113      	cbz	r3, 8007e4c <_dtoa_r+0xbc>
 8007e46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007e48:	4b81      	ldr	r3, [pc, #516]	@ (8008050 <_dtoa_r+0x2c0>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	4f81      	ldr	r7, [pc, #516]	@ (8008054 <_dtoa_r+0x2c4>)
 8007e4e:	f000 bccb 	b.w	80087e8 <_dtoa_r+0xa58>
 8007e52:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e54:	a90f      	add	r1, sp, #60	@ 0x3c
 8007e56:	4648      	mov	r0, r9
 8007e58:	eeb0 0b48 	vmov.f64	d0, d8
 8007e5c:	f001 f918 	bl	8009090 <__d2b>
 8007e60:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007e64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e66:	9001      	str	r0, [sp, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d045      	beq.n	8007ef8 <_dtoa_r+0x168>
 8007e6c:	eeb0 7b48 	vmov.f64	d7, d8
 8007e70:	ee18 1a90 	vmov	r1, s17
 8007e74:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007e78:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007e7c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007e80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007e84:	2500      	movs	r5, #0
 8007e86:	ee07 1a90 	vmov	s15, r1
 8007e8a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007e8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008028 <_dtoa_r+0x298>
 8007e92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007e96:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008030 <_dtoa_r+0x2a0>
 8007e9a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007e9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008038 <_dtoa_r+0x2a8>
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007eaa:	eeb0 7b46 	vmov.f64	d7, d6
 8007eae:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007eb2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007eb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ebe:	ee16 8a90 	vmov	r8, s13
 8007ec2:	d508      	bpl.n	8007ed6 <_dtoa_r+0x146>
 8007ec4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ec8:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed0:	bf18      	it	ne
 8007ed2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8007ed6:	f1b8 0f16 	cmp.w	r8, #22
 8007eda:	d82b      	bhi.n	8007f34 <_dtoa_r+0x1a4>
 8007edc:	495e      	ldr	r1, [pc, #376]	@ (8008058 <_dtoa_r+0x2c8>)
 8007ede:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007ee2:	ed91 7b00 	vldr	d7, [r1]
 8007ee6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eee:	d501      	bpl.n	8007ef4 <_dtoa_r+0x164>
 8007ef0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	e01e      	b.n	8007f36 <_dtoa_r+0x1a6>
 8007ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007efa:	4413      	add	r3, r2
 8007efc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007f00:	2920      	cmp	r1, #32
 8007f02:	bfc1      	itttt	gt
 8007f04:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007f08:	408e      	lslgt	r6, r1
 8007f0a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007f0e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007f12:	bfd6      	itet	le
 8007f14:	f1c1 0120 	rsble	r1, r1, #32
 8007f18:	4331      	orrgt	r1, r6
 8007f1a:	fa04 f101 	lslle.w	r1, r4, r1
 8007f1e:	ee07 1a90 	vmov	s15, r1
 8007f22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007f26:	3b01      	subs	r3, #1
 8007f28:	ee17 1a90 	vmov	r1, s15
 8007f2c:	2501      	movs	r5, #1
 8007f2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007f32:	e7a8      	b.n	8007e86 <_dtoa_r+0xf6>
 8007f34:	2101      	movs	r1, #1
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	1e53      	subs	r3, r2, #1
 8007f3a:	9306      	str	r3, [sp, #24]
 8007f3c:	bf45      	ittet	mi
 8007f3e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007f42:	9305      	strmi	r3, [sp, #20]
 8007f44:	2300      	movpl	r3, #0
 8007f46:	2300      	movmi	r3, #0
 8007f48:	bf4c      	ite	mi
 8007f4a:	9306      	strmi	r3, [sp, #24]
 8007f4c:	9305      	strpl	r3, [sp, #20]
 8007f4e:	f1b8 0f00 	cmp.w	r8, #0
 8007f52:	910c      	str	r1, [sp, #48]	@ 0x30
 8007f54:	db18      	blt.n	8007f88 <_dtoa_r+0x1f8>
 8007f56:	9b06      	ldr	r3, [sp, #24]
 8007f58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007f5c:	4443      	add	r3, r8
 8007f5e:	9306      	str	r3, [sp, #24]
 8007f60:	2300      	movs	r3, #0
 8007f62:	9a07      	ldr	r2, [sp, #28]
 8007f64:	2a09      	cmp	r2, #9
 8007f66:	d849      	bhi.n	8007ffc <_dtoa_r+0x26c>
 8007f68:	2a05      	cmp	r2, #5
 8007f6a:	bfc4      	itt	gt
 8007f6c:	3a04      	subgt	r2, #4
 8007f6e:	9207      	strgt	r2, [sp, #28]
 8007f70:	9a07      	ldr	r2, [sp, #28]
 8007f72:	f1a2 0202 	sub.w	r2, r2, #2
 8007f76:	bfcc      	ite	gt
 8007f78:	2400      	movgt	r4, #0
 8007f7a:	2401      	movle	r4, #1
 8007f7c:	2a03      	cmp	r2, #3
 8007f7e:	d848      	bhi.n	8008012 <_dtoa_r+0x282>
 8007f80:	e8df f002 	tbb	[pc, r2]
 8007f84:	3a2c2e0b 	.word	0x3a2c2e0b
 8007f88:	9b05      	ldr	r3, [sp, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	eba3 0308 	sub.w	r3, r3, r8
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	920a      	str	r2, [sp, #40]	@ 0x28
 8007f94:	f1c8 0300 	rsb	r3, r8, #0
 8007f98:	e7e3      	b.n	8007f62 <_dtoa_r+0x1d2>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	9208      	str	r2, [sp, #32]
 8007f9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	dc39      	bgt.n	8008018 <_dtoa_r+0x288>
 8007fa4:	f04f 0b01 	mov.w	fp, #1
 8007fa8:	46da      	mov	sl, fp
 8007faa:	465a      	mov	r2, fp
 8007fac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007fb0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	2004      	movs	r0, #4
 8007fb8:	f100 0614 	add.w	r6, r0, #20
 8007fbc:	4296      	cmp	r6, r2
 8007fbe:	d930      	bls.n	8008022 <_dtoa_r+0x292>
 8007fc0:	6079      	str	r1, [r7, #4]
 8007fc2:	4648      	mov	r0, r9
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	f000 fd39 	bl	8008a3c <_Balloc>
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	4607      	mov	r7, r0
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d146      	bne.n	8008060 <_dtoa_r+0x2d0>
 8007fd2:	4b22      	ldr	r3, [pc, #136]	@ (800805c <_dtoa_r+0x2cc>)
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007fda:	e6f2      	b.n	8007dc2 <_dtoa_r+0x32>
 8007fdc:	2201      	movs	r2, #1
 8007fde:	e7dd      	b.n	8007f9c <_dtoa_r+0x20c>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	9208      	str	r2, [sp, #32]
 8007fe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fe6:	eb08 0b02 	add.w	fp, r8, r2
 8007fea:	f10b 0a01 	add.w	sl, fp, #1
 8007fee:	4652      	mov	r2, sl
 8007ff0:	2a01      	cmp	r2, #1
 8007ff2:	bfb8      	it	lt
 8007ff4:	2201      	movlt	r2, #1
 8007ff6:	e7db      	b.n	8007fb0 <_dtoa_r+0x220>
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	e7f2      	b.n	8007fe2 <_dtoa_r+0x252>
 8007ffc:	2401      	movs	r4, #1
 8007ffe:	2200      	movs	r2, #0
 8008000:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008004:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008008:	2100      	movs	r1, #0
 800800a:	46da      	mov	sl, fp
 800800c:	2212      	movs	r2, #18
 800800e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008010:	e7ce      	b.n	8007fb0 <_dtoa_r+0x220>
 8008012:	2201      	movs	r2, #1
 8008014:	9208      	str	r2, [sp, #32]
 8008016:	e7f5      	b.n	8008004 <_dtoa_r+0x274>
 8008018:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800801c:	46da      	mov	sl, fp
 800801e:	465a      	mov	r2, fp
 8008020:	e7c6      	b.n	8007fb0 <_dtoa_r+0x220>
 8008022:	3101      	adds	r1, #1
 8008024:	0040      	lsls	r0, r0, #1
 8008026:	e7c7      	b.n	8007fb8 <_dtoa_r+0x228>
 8008028:	636f4361 	.word	0x636f4361
 800802c:	3fd287a7 	.word	0x3fd287a7
 8008030:	8b60c8b3 	.word	0x8b60c8b3
 8008034:	3fc68a28 	.word	0x3fc68a28
 8008038:	509f79fb 	.word	0x509f79fb
 800803c:	3fd34413 	.word	0x3fd34413
 8008040:	080099ad 	.word	0x080099ad
 8008044:	080099c4 	.word	0x080099c4
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	080099a9 	.word	0x080099a9
 8008050:	0800997d 	.word	0x0800997d
 8008054:	0800997c 	.word	0x0800997c
 8008058:	08009ac0 	.word	0x08009ac0
 800805c:	08009a1c 	.word	0x08009a1c
 8008060:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008064:	f1ba 0f0e 	cmp.w	sl, #14
 8008068:	6010      	str	r0, [r2, #0]
 800806a:	d86f      	bhi.n	800814c <_dtoa_r+0x3bc>
 800806c:	2c00      	cmp	r4, #0
 800806e:	d06d      	beq.n	800814c <_dtoa_r+0x3bc>
 8008070:	f1b8 0f00 	cmp.w	r8, #0
 8008074:	f340 80c2 	ble.w	80081fc <_dtoa_r+0x46c>
 8008078:	4aca      	ldr	r2, [pc, #808]	@ (80083a4 <_dtoa_r+0x614>)
 800807a:	f008 010f 	and.w	r1, r8, #15
 800807e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008082:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008086:	ed92 7b00 	vldr	d7, [r2]
 800808a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800808e:	f000 80a9 	beq.w	80081e4 <_dtoa_r+0x454>
 8008092:	4ac5      	ldr	r2, [pc, #788]	@ (80083a8 <_dtoa_r+0x618>)
 8008094:	ed92 6b08 	vldr	d6, [r2, #32]
 8008098:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800809c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80080a0:	f001 010f 	and.w	r1, r1, #15
 80080a4:	2203      	movs	r2, #3
 80080a6:	48c0      	ldr	r0, [pc, #768]	@ (80083a8 <_dtoa_r+0x618>)
 80080a8:	2900      	cmp	r1, #0
 80080aa:	f040 809d 	bne.w	80081e8 <_dtoa_r+0x458>
 80080ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80080b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080ba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080c0:	2900      	cmp	r1, #0
 80080c2:	f000 80c1 	beq.w	8008248 <_dtoa_r+0x4b8>
 80080c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80080ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	f140 80b9 	bpl.w	8008248 <_dtoa_r+0x4b8>
 80080d6:	f1ba 0f00 	cmp.w	sl, #0
 80080da:	f000 80b5 	beq.w	8008248 <_dtoa_r+0x4b8>
 80080de:	f1bb 0f00 	cmp.w	fp, #0
 80080e2:	dd31      	ble.n	8008148 <_dtoa_r+0x3b8>
 80080e4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80080e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080f0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80080f4:	9104      	str	r1, [sp, #16]
 80080f6:	3201      	adds	r2, #1
 80080f8:	465c      	mov	r4, fp
 80080fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80080fe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008102:	ee07 2a90 	vmov	s15, r2
 8008106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800810a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800810e:	ee15 2a90 	vmov	r2, s11
 8008112:	ec51 0b15 	vmov	r0, r1, d5
 8008116:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800811a:	2c00      	cmp	r4, #0
 800811c:	f040 8098 	bne.w	8008250 <_dtoa_r+0x4c0>
 8008120:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008124:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008128:	ec41 0b17 	vmov	d7, r0, r1
 800812c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008134:	f300 8261 	bgt.w	80085fa <_dtoa_r+0x86a>
 8008138:	eeb1 7b47 	vneg.f64	d7, d7
 800813c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008144:	f100 80f5 	bmi.w	8008332 <_dtoa_r+0x5a2>
 8008148:	ed8d 8b02 	vstr	d8, [sp, #8]
 800814c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800814e:	2a00      	cmp	r2, #0
 8008150:	f2c0 812c 	blt.w	80083ac <_dtoa_r+0x61c>
 8008154:	f1b8 0f0e 	cmp.w	r8, #14
 8008158:	f300 8128 	bgt.w	80083ac <_dtoa_r+0x61c>
 800815c:	4b91      	ldr	r3, [pc, #580]	@ (80083a4 <_dtoa_r+0x614>)
 800815e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008162:	ed93 6b00 	vldr	d6, [r3]
 8008166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	da03      	bge.n	8008174 <_dtoa_r+0x3e4>
 800816c:	f1ba 0f00 	cmp.w	sl, #0
 8008170:	f340 80d2 	ble.w	8008318 <_dtoa_r+0x588>
 8008174:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800817c:	463e      	mov	r6, r7
 800817e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008182:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008186:	ee15 3a10 	vmov	r3, s10
 800818a:	3330      	adds	r3, #48	@ 0x30
 800818c:	f806 3b01 	strb.w	r3, [r6], #1
 8008190:	1bf3      	subs	r3, r6, r7
 8008192:	459a      	cmp	sl, r3
 8008194:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008198:	eea3 7b46 	vfms.f64	d7, d3, d6
 800819c:	f040 80f8 	bne.w	8008390 <_dtoa_r+0x600>
 80081a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80081a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ac:	f300 80dd 	bgt.w	800836a <_dtoa_r+0x5da>
 80081b0:	eeb4 7b46 	vcmp.f64	d7, d6
 80081b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b8:	d104      	bne.n	80081c4 <_dtoa_r+0x434>
 80081ba:	ee15 3a10 	vmov	r3, s10
 80081be:	07db      	lsls	r3, r3, #31
 80081c0:	f100 80d3 	bmi.w	800836a <_dtoa_r+0x5da>
 80081c4:	9901      	ldr	r1, [sp, #4]
 80081c6:	4648      	mov	r0, r9
 80081c8:	f000 fc78 	bl	8008abc <_Bfree>
 80081cc:	2300      	movs	r3, #0
 80081ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081d0:	7033      	strb	r3, [r6, #0]
 80081d2:	f108 0301 	add.w	r3, r8, #1
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8304 	beq.w	80087e8 <_dtoa_r+0xa58>
 80081e0:	601e      	str	r6, [r3, #0]
 80081e2:	e301      	b.n	80087e8 <_dtoa_r+0xa58>
 80081e4:	2202      	movs	r2, #2
 80081e6:	e75e      	b.n	80080a6 <_dtoa_r+0x316>
 80081e8:	07cc      	lsls	r4, r1, #31
 80081ea:	d504      	bpl.n	80081f6 <_dtoa_r+0x466>
 80081ec:	ed90 6b00 	vldr	d6, [r0]
 80081f0:	3201      	adds	r2, #1
 80081f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081f6:	1049      	asrs	r1, r1, #1
 80081f8:	3008      	adds	r0, #8
 80081fa:	e755      	b.n	80080a8 <_dtoa_r+0x318>
 80081fc:	d022      	beq.n	8008244 <_dtoa_r+0x4b4>
 80081fe:	f1c8 0100 	rsb	r1, r8, #0
 8008202:	4a68      	ldr	r2, [pc, #416]	@ (80083a4 <_dtoa_r+0x614>)
 8008204:	f001 000f 	and.w	r0, r1, #15
 8008208:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800820c:	ed92 7b00 	vldr	d7, [r2]
 8008210:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008214:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008218:	4863      	ldr	r0, [pc, #396]	@ (80083a8 <_dtoa_r+0x618>)
 800821a:	1109      	asrs	r1, r1, #4
 800821c:	2400      	movs	r4, #0
 800821e:	2202      	movs	r2, #2
 8008220:	b929      	cbnz	r1, 800822e <_dtoa_r+0x49e>
 8008222:	2c00      	cmp	r4, #0
 8008224:	f43f af49 	beq.w	80080ba <_dtoa_r+0x32a>
 8008228:	ed8d 7b02 	vstr	d7, [sp, #8]
 800822c:	e745      	b.n	80080ba <_dtoa_r+0x32a>
 800822e:	07ce      	lsls	r6, r1, #31
 8008230:	d505      	bpl.n	800823e <_dtoa_r+0x4ae>
 8008232:	ed90 6b00 	vldr	d6, [r0]
 8008236:	3201      	adds	r2, #1
 8008238:	2401      	movs	r4, #1
 800823a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800823e:	1049      	asrs	r1, r1, #1
 8008240:	3008      	adds	r0, #8
 8008242:	e7ed      	b.n	8008220 <_dtoa_r+0x490>
 8008244:	2202      	movs	r2, #2
 8008246:	e738      	b.n	80080ba <_dtoa_r+0x32a>
 8008248:	f8cd 8010 	str.w	r8, [sp, #16]
 800824c:	4654      	mov	r4, sl
 800824e:	e754      	b.n	80080fa <_dtoa_r+0x36a>
 8008250:	4a54      	ldr	r2, [pc, #336]	@ (80083a4 <_dtoa_r+0x614>)
 8008252:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008256:	ed12 4b02 	vldr	d4, [r2, #-8]
 800825a:	9a08      	ldr	r2, [sp, #32]
 800825c:	ec41 0b17 	vmov	d7, r0, r1
 8008260:	443c      	add	r4, r7
 8008262:	b34a      	cbz	r2, 80082b8 <_dtoa_r+0x528>
 8008264:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008268:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800826c:	463e      	mov	r6, r7
 800826e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008272:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008276:	ee35 7b47 	vsub.f64	d7, d5, d7
 800827a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800827e:	ee14 2a90 	vmov	r2, s9
 8008282:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008286:	3230      	adds	r2, #48	@ 0x30
 8008288:	ee36 6b45 	vsub.f64	d6, d6, d5
 800828c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008294:	f806 2b01 	strb.w	r2, [r6], #1
 8008298:	d438      	bmi.n	800830c <_dtoa_r+0x57c>
 800829a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800829e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80082a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a6:	d462      	bmi.n	800836e <_dtoa_r+0x5de>
 80082a8:	42a6      	cmp	r6, r4
 80082aa:	f43f af4d 	beq.w	8008148 <_dtoa_r+0x3b8>
 80082ae:	ee27 7b03 	vmul.f64	d7, d7, d3
 80082b2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80082b6:	e7e0      	b.n	800827a <_dtoa_r+0x4ea>
 80082b8:	4621      	mov	r1, r4
 80082ba:	463e      	mov	r6, r7
 80082bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082c0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80082c4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082c8:	ee14 2a90 	vmov	r2, s9
 80082cc:	3230      	adds	r2, #48	@ 0x30
 80082ce:	f806 2b01 	strb.w	r2, [r6], #1
 80082d2:	42a6      	cmp	r6, r4
 80082d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082dc:	d119      	bne.n	8008312 <_dtoa_r+0x582>
 80082de:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80082e2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80082e6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	dc3e      	bgt.n	800836e <_dtoa_r+0x5de>
 80082f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80082f4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80082f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fc:	f57f af24 	bpl.w	8008148 <_dtoa_r+0x3b8>
 8008300:	460e      	mov	r6, r1
 8008302:	3901      	subs	r1, #1
 8008304:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008308:	2b30      	cmp	r3, #48	@ 0x30
 800830a:	d0f9      	beq.n	8008300 <_dtoa_r+0x570>
 800830c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008310:	e758      	b.n	80081c4 <_dtoa_r+0x434>
 8008312:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008316:	e7d5      	b.n	80082c4 <_dtoa_r+0x534>
 8008318:	d10b      	bne.n	8008332 <_dtoa_r+0x5a2>
 800831a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800831e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008322:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008326:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832e:	f2c0 8161 	blt.w	80085f4 <_dtoa_r+0x864>
 8008332:	2400      	movs	r4, #0
 8008334:	4625      	mov	r5, r4
 8008336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008338:	43db      	mvns	r3, r3
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	463e      	mov	r6, r7
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	4621      	mov	r1, r4
 8008344:	4648      	mov	r0, r9
 8008346:	f000 fbb9 	bl	8008abc <_Bfree>
 800834a:	2d00      	cmp	r5, #0
 800834c:	d0de      	beq.n	800830c <_dtoa_r+0x57c>
 800834e:	f1b8 0f00 	cmp.w	r8, #0
 8008352:	d005      	beq.n	8008360 <_dtoa_r+0x5d0>
 8008354:	45a8      	cmp	r8, r5
 8008356:	d003      	beq.n	8008360 <_dtoa_r+0x5d0>
 8008358:	4641      	mov	r1, r8
 800835a:	4648      	mov	r0, r9
 800835c:	f000 fbae 	bl	8008abc <_Bfree>
 8008360:	4629      	mov	r1, r5
 8008362:	4648      	mov	r0, r9
 8008364:	f000 fbaa 	bl	8008abc <_Bfree>
 8008368:	e7d0      	b.n	800830c <_dtoa_r+0x57c>
 800836a:	f8cd 8010 	str.w	r8, [sp, #16]
 800836e:	4633      	mov	r3, r6
 8008370:	461e      	mov	r6, r3
 8008372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008376:	2a39      	cmp	r2, #57	@ 0x39
 8008378:	d106      	bne.n	8008388 <_dtoa_r+0x5f8>
 800837a:	429f      	cmp	r7, r3
 800837c:	d1f8      	bne.n	8008370 <_dtoa_r+0x5e0>
 800837e:	9a04      	ldr	r2, [sp, #16]
 8008380:	3201      	adds	r2, #1
 8008382:	9204      	str	r2, [sp, #16]
 8008384:	2230      	movs	r2, #48	@ 0x30
 8008386:	703a      	strb	r2, [r7, #0]
 8008388:	781a      	ldrb	r2, [r3, #0]
 800838a:	3201      	adds	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e7bd      	b.n	800830c <_dtoa_r+0x57c>
 8008390:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008394:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839c:	f47f aeef 	bne.w	800817e <_dtoa_r+0x3ee>
 80083a0:	e710      	b.n	80081c4 <_dtoa_r+0x434>
 80083a2:	bf00      	nop
 80083a4:	08009ac0 	.word	0x08009ac0
 80083a8:	08009a98 	.word	0x08009a98
 80083ac:	9908      	ldr	r1, [sp, #32]
 80083ae:	2900      	cmp	r1, #0
 80083b0:	f000 80e3 	beq.w	800857a <_dtoa_r+0x7ea>
 80083b4:	9907      	ldr	r1, [sp, #28]
 80083b6:	2901      	cmp	r1, #1
 80083b8:	f300 80c8 	bgt.w	800854c <_dtoa_r+0x7bc>
 80083bc:	2d00      	cmp	r5, #0
 80083be:	f000 80c1 	beq.w	8008544 <_dtoa_r+0x7b4>
 80083c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083c6:	9e05      	ldr	r6, [sp, #20]
 80083c8:	461c      	mov	r4, r3
 80083ca:	9304      	str	r3, [sp, #16]
 80083cc:	9b05      	ldr	r3, [sp, #20]
 80083ce:	4413      	add	r3, r2
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	9b06      	ldr	r3, [sp, #24]
 80083d4:	2101      	movs	r1, #1
 80083d6:	4413      	add	r3, r2
 80083d8:	4648      	mov	r0, r9
 80083da:	9306      	str	r3, [sp, #24]
 80083dc:	f000 fc22 	bl	8008c24 <__i2b>
 80083e0:	9b04      	ldr	r3, [sp, #16]
 80083e2:	4605      	mov	r5, r0
 80083e4:	b166      	cbz	r6, 8008400 <_dtoa_r+0x670>
 80083e6:	9a06      	ldr	r2, [sp, #24]
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	dd09      	ble.n	8008400 <_dtoa_r+0x670>
 80083ec:	42b2      	cmp	r2, r6
 80083ee:	9905      	ldr	r1, [sp, #20]
 80083f0:	bfa8      	it	ge
 80083f2:	4632      	movge	r2, r6
 80083f4:	1a89      	subs	r1, r1, r2
 80083f6:	9105      	str	r1, [sp, #20]
 80083f8:	9906      	ldr	r1, [sp, #24]
 80083fa:	1ab6      	subs	r6, r6, r2
 80083fc:	1a8a      	subs	r2, r1, r2
 80083fe:	9206      	str	r2, [sp, #24]
 8008400:	b1fb      	cbz	r3, 8008442 <_dtoa_r+0x6b2>
 8008402:	9a08      	ldr	r2, [sp, #32]
 8008404:	2a00      	cmp	r2, #0
 8008406:	f000 80bc 	beq.w	8008582 <_dtoa_r+0x7f2>
 800840a:	b19c      	cbz	r4, 8008434 <_dtoa_r+0x6a4>
 800840c:	4629      	mov	r1, r5
 800840e:	4622      	mov	r2, r4
 8008410:	4648      	mov	r0, r9
 8008412:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008414:	f000 fcc6 	bl	8008da4 <__pow5mult>
 8008418:	9a01      	ldr	r2, [sp, #4]
 800841a:	4601      	mov	r1, r0
 800841c:	4605      	mov	r5, r0
 800841e:	4648      	mov	r0, r9
 8008420:	f000 fc16 	bl	8008c50 <__multiply>
 8008424:	9901      	ldr	r1, [sp, #4]
 8008426:	9004      	str	r0, [sp, #16]
 8008428:	4648      	mov	r0, r9
 800842a:	f000 fb47 	bl	8008abc <_Bfree>
 800842e:	9a04      	ldr	r2, [sp, #16]
 8008430:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008432:	9201      	str	r2, [sp, #4]
 8008434:	1b1a      	subs	r2, r3, r4
 8008436:	d004      	beq.n	8008442 <_dtoa_r+0x6b2>
 8008438:	9901      	ldr	r1, [sp, #4]
 800843a:	4648      	mov	r0, r9
 800843c:	f000 fcb2 	bl	8008da4 <__pow5mult>
 8008440:	9001      	str	r0, [sp, #4]
 8008442:	2101      	movs	r1, #1
 8008444:	4648      	mov	r0, r9
 8008446:	f000 fbed 	bl	8008c24 <__i2b>
 800844a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844c:	4604      	mov	r4, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 81d0 	beq.w	80087f4 <_dtoa_r+0xa64>
 8008454:	461a      	mov	r2, r3
 8008456:	4601      	mov	r1, r0
 8008458:	4648      	mov	r0, r9
 800845a:	f000 fca3 	bl	8008da4 <__pow5mult>
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	2b01      	cmp	r3, #1
 8008462:	4604      	mov	r4, r0
 8008464:	f300 8095 	bgt.w	8008592 <_dtoa_r+0x802>
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 808b 	bne.w	8008586 <_dtoa_r+0x7f6>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008476:	2a00      	cmp	r2, #0
 8008478:	f040 8087 	bne.w	800858a <_dtoa_r+0x7fa>
 800847c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008480:	0d12      	lsrs	r2, r2, #20
 8008482:	0512      	lsls	r2, r2, #20
 8008484:	2a00      	cmp	r2, #0
 8008486:	f000 8082 	beq.w	800858e <_dtoa_r+0x7fe>
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	3301      	adds	r3, #1
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	9b06      	ldr	r3, [sp, #24]
 8008492:	3301      	adds	r3, #1
 8008494:	9306      	str	r3, [sp, #24]
 8008496:	2301      	movs	r3, #1
 8008498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800849a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 81af 	beq.w	8008800 <_dtoa_r+0xa70>
 80084a2:	6922      	ldr	r2, [r4, #16]
 80084a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80084a8:	6910      	ldr	r0, [r2, #16]
 80084aa:	f000 fb6f 	bl	8008b8c <__hi0bits>
 80084ae:	f1c0 0020 	rsb	r0, r0, #32
 80084b2:	9b06      	ldr	r3, [sp, #24]
 80084b4:	4418      	add	r0, r3
 80084b6:	f010 001f 	ands.w	r0, r0, #31
 80084ba:	d076      	beq.n	80085aa <_dtoa_r+0x81a>
 80084bc:	f1c0 0220 	rsb	r2, r0, #32
 80084c0:	2a04      	cmp	r2, #4
 80084c2:	dd69      	ble.n	8008598 <_dtoa_r+0x808>
 80084c4:	9b05      	ldr	r3, [sp, #20]
 80084c6:	f1c0 001c 	rsb	r0, r0, #28
 80084ca:	4403      	add	r3, r0
 80084cc:	9305      	str	r3, [sp, #20]
 80084ce:	9b06      	ldr	r3, [sp, #24]
 80084d0:	4406      	add	r6, r0
 80084d2:	4403      	add	r3, r0
 80084d4:	9306      	str	r3, [sp, #24]
 80084d6:	9b05      	ldr	r3, [sp, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dd05      	ble.n	80084e8 <_dtoa_r+0x758>
 80084dc:	9901      	ldr	r1, [sp, #4]
 80084de:	461a      	mov	r2, r3
 80084e0:	4648      	mov	r0, r9
 80084e2:	f000 fcb9 	bl	8008e58 <__lshift>
 80084e6:	9001      	str	r0, [sp, #4]
 80084e8:	9b06      	ldr	r3, [sp, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd05      	ble.n	80084fa <_dtoa_r+0x76a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	461a      	mov	r2, r3
 80084f2:	4648      	mov	r0, r9
 80084f4:	f000 fcb0 	bl	8008e58 <__lshift>
 80084f8:	4604      	mov	r4, r0
 80084fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d056      	beq.n	80085ae <_dtoa_r+0x81e>
 8008500:	9801      	ldr	r0, [sp, #4]
 8008502:	4621      	mov	r1, r4
 8008504:	f000 fd14 	bl	8008f30 <__mcmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	da50      	bge.n	80085ae <_dtoa_r+0x81e>
 800850c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008510:	9304      	str	r3, [sp, #16]
 8008512:	9901      	ldr	r1, [sp, #4]
 8008514:	2300      	movs	r3, #0
 8008516:	220a      	movs	r2, #10
 8008518:	4648      	mov	r0, r9
 800851a:	f000 faf1 	bl	8008b00 <__multadd>
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	9001      	str	r0, [sp, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 816e 	beq.w	8008804 <_dtoa_r+0xa74>
 8008528:	4629      	mov	r1, r5
 800852a:	2300      	movs	r3, #0
 800852c:	220a      	movs	r2, #10
 800852e:	4648      	mov	r0, r9
 8008530:	f000 fae6 	bl	8008b00 <__multadd>
 8008534:	f1bb 0f00 	cmp.w	fp, #0
 8008538:	4605      	mov	r5, r0
 800853a:	dc64      	bgt.n	8008606 <_dtoa_r+0x876>
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dc3e      	bgt.n	80085c0 <_dtoa_r+0x830>
 8008542:	e060      	b.n	8008606 <_dtoa_r+0x876>
 8008544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008546:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800854a:	e73c      	b.n	80083c6 <_dtoa_r+0x636>
 800854c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8008550:	42a3      	cmp	r3, r4
 8008552:	bfbf      	itttt	lt
 8008554:	1ae2      	sublt	r2, r4, r3
 8008556:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008558:	189b      	addlt	r3, r3, r2
 800855a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800855c:	bfae      	itee	ge
 800855e:	1b1c      	subge	r4, r3, r4
 8008560:	4623      	movlt	r3, r4
 8008562:	2400      	movlt	r4, #0
 8008564:	f1ba 0f00 	cmp.w	sl, #0
 8008568:	bfb5      	itete	lt
 800856a:	9a05      	ldrlt	r2, [sp, #20]
 800856c:	9e05      	ldrge	r6, [sp, #20]
 800856e:	eba2 060a 	sublt.w	r6, r2, sl
 8008572:	4652      	movge	r2, sl
 8008574:	bfb8      	it	lt
 8008576:	2200      	movlt	r2, #0
 8008578:	e727      	b.n	80083ca <_dtoa_r+0x63a>
 800857a:	9e05      	ldr	r6, [sp, #20]
 800857c:	9d08      	ldr	r5, [sp, #32]
 800857e:	461c      	mov	r4, r3
 8008580:	e730      	b.n	80083e4 <_dtoa_r+0x654>
 8008582:	461a      	mov	r2, r3
 8008584:	e758      	b.n	8008438 <_dtoa_r+0x6a8>
 8008586:	2300      	movs	r3, #0
 8008588:	e786      	b.n	8008498 <_dtoa_r+0x708>
 800858a:	9b02      	ldr	r3, [sp, #8]
 800858c:	e784      	b.n	8008498 <_dtoa_r+0x708>
 800858e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008590:	e783      	b.n	800849a <_dtoa_r+0x70a>
 8008592:	2300      	movs	r3, #0
 8008594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008596:	e784      	b.n	80084a2 <_dtoa_r+0x712>
 8008598:	d09d      	beq.n	80084d6 <_dtoa_r+0x746>
 800859a:	9b05      	ldr	r3, [sp, #20]
 800859c:	321c      	adds	r2, #28
 800859e:	4413      	add	r3, r2
 80085a0:	9305      	str	r3, [sp, #20]
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	4416      	add	r6, r2
 80085a6:	4413      	add	r3, r2
 80085a8:	e794      	b.n	80084d4 <_dtoa_r+0x744>
 80085aa:	4602      	mov	r2, r0
 80085ac:	e7f5      	b.n	800859a <_dtoa_r+0x80a>
 80085ae:	f1ba 0f00 	cmp.w	sl, #0
 80085b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80085b6:	46d3      	mov	fp, sl
 80085b8:	dc21      	bgt.n	80085fe <_dtoa_r+0x86e>
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	dd1e      	ble.n	80085fe <_dtoa_r+0x86e>
 80085c0:	f1bb 0f00 	cmp.w	fp, #0
 80085c4:	f47f aeb7 	bne.w	8008336 <_dtoa_r+0x5a6>
 80085c8:	4621      	mov	r1, r4
 80085ca:	465b      	mov	r3, fp
 80085cc:	2205      	movs	r2, #5
 80085ce:	4648      	mov	r0, r9
 80085d0:	f000 fa96 	bl	8008b00 <__multadd>
 80085d4:	4601      	mov	r1, r0
 80085d6:	4604      	mov	r4, r0
 80085d8:	9801      	ldr	r0, [sp, #4]
 80085da:	f000 fca9 	bl	8008f30 <__mcmp>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f77f aea9 	ble.w	8008336 <_dtoa_r+0x5a6>
 80085e4:	463e      	mov	r6, r7
 80085e6:	2331      	movs	r3, #49	@ 0x31
 80085e8:	f806 3b01 	strb.w	r3, [r6], #1
 80085ec:	9b04      	ldr	r3, [sp, #16]
 80085ee:	3301      	adds	r3, #1
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	e6a4      	b.n	800833e <_dtoa_r+0x5ae>
 80085f4:	f8cd 8010 	str.w	r8, [sp, #16]
 80085f8:	4654      	mov	r4, sl
 80085fa:	4625      	mov	r5, r4
 80085fc:	e7f2      	b.n	80085e4 <_dtoa_r+0x854>
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8103 	beq.w	800880c <_dtoa_r+0xa7c>
 8008606:	2e00      	cmp	r6, #0
 8008608:	dd05      	ble.n	8008616 <_dtoa_r+0x886>
 800860a:	4629      	mov	r1, r5
 800860c:	4632      	mov	r2, r6
 800860e:	4648      	mov	r0, r9
 8008610:	f000 fc22 	bl	8008e58 <__lshift>
 8008614:	4605      	mov	r5, r0
 8008616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d058      	beq.n	80086ce <_dtoa_r+0x93e>
 800861c:	6869      	ldr	r1, [r5, #4]
 800861e:	4648      	mov	r0, r9
 8008620:	f000 fa0c 	bl	8008a3c <_Balloc>
 8008624:	4606      	mov	r6, r0
 8008626:	b928      	cbnz	r0, 8008634 <_dtoa_r+0x8a4>
 8008628:	4b82      	ldr	r3, [pc, #520]	@ (8008834 <_dtoa_r+0xaa4>)
 800862a:	4602      	mov	r2, r0
 800862c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008630:	f7ff bbc7 	b.w	8007dc2 <_dtoa_r+0x32>
 8008634:	692a      	ldr	r2, [r5, #16]
 8008636:	3202      	adds	r2, #2
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	f105 010c 	add.w	r1, r5, #12
 800863e:	300c      	adds	r0, #12
 8008640:	f001 f800 	bl	8009644 <memcpy>
 8008644:	2201      	movs	r2, #1
 8008646:	4631      	mov	r1, r6
 8008648:	4648      	mov	r0, r9
 800864a:	f000 fc05 	bl	8008e58 <__lshift>
 800864e:	1c7b      	adds	r3, r7, #1
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	eb07 030b 	add.w	r3, r7, fp
 8008656:	9309      	str	r3, [sp, #36]	@ 0x24
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	46a8      	mov	r8, r5
 8008660:	9308      	str	r3, [sp, #32]
 8008662:	4605      	mov	r5, r0
 8008664:	9b05      	ldr	r3, [sp, #20]
 8008666:	9801      	ldr	r0, [sp, #4]
 8008668:	4621      	mov	r1, r4
 800866a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800866e:	f7ff fb04 	bl	8007c7a <quorem>
 8008672:	4641      	mov	r1, r8
 8008674:	9002      	str	r0, [sp, #8]
 8008676:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800867a:	9801      	ldr	r0, [sp, #4]
 800867c:	f000 fc58 	bl	8008f30 <__mcmp>
 8008680:	462a      	mov	r2, r5
 8008682:	9006      	str	r0, [sp, #24]
 8008684:	4621      	mov	r1, r4
 8008686:	4648      	mov	r0, r9
 8008688:	f000 fc6e 	bl	8008f68 <__mdiff>
 800868c:	68c2      	ldr	r2, [r0, #12]
 800868e:	4606      	mov	r6, r0
 8008690:	b9fa      	cbnz	r2, 80086d2 <_dtoa_r+0x942>
 8008692:	4601      	mov	r1, r0
 8008694:	9801      	ldr	r0, [sp, #4]
 8008696:	f000 fc4b 	bl	8008f30 <__mcmp>
 800869a:	4602      	mov	r2, r0
 800869c:	4631      	mov	r1, r6
 800869e:	4648      	mov	r0, r9
 80086a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80086a2:	f000 fa0b 	bl	8008abc <_Bfree>
 80086a6:	9b07      	ldr	r3, [sp, #28]
 80086a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086aa:	9e05      	ldr	r6, [sp, #20]
 80086ac:	ea43 0102 	orr.w	r1, r3, r2
 80086b0:	9b08      	ldr	r3, [sp, #32]
 80086b2:	4319      	orrs	r1, r3
 80086b4:	d10f      	bne.n	80086d6 <_dtoa_r+0x946>
 80086b6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80086ba:	d028      	beq.n	800870e <_dtoa_r+0x97e>
 80086bc:	9b06      	ldr	r3, [sp, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dd02      	ble.n	80086c8 <_dtoa_r+0x938>
 80086c2:	9b02      	ldr	r3, [sp, #8]
 80086c4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80086c8:	f88b a000 	strb.w	sl, [fp]
 80086cc:	e639      	b.n	8008342 <_dtoa_r+0x5b2>
 80086ce:	4628      	mov	r0, r5
 80086d0:	e7bd      	b.n	800864e <_dtoa_r+0x8be>
 80086d2:	2201      	movs	r2, #1
 80086d4:	e7e2      	b.n	800869c <_dtoa_r+0x90c>
 80086d6:	9b06      	ldr	r3, [sp, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db04      	blt.n	80086e6 <_dtoa_r+0x956>
 80086dc:	9907      	ldr	r1, [sp, #28]
 80086de:	430b      	orrs	r3, r1
 80086e0:	9908      	ldr	r1, [sp, #32]
 80086e2:	430b      	orrs	r3, r1
 80086e4:	d120      	bne.n	8008728 <_dtoa_r+0x998>
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	ddee      	ble.n	80086c8 <_dtoa_r+0x938>
 80086ea:	9901      	ldr	r1, [sp, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	4648      	mov	r0, r9
 80086f0:	f000 fbb2 	bl	8008e58 <__lshift>
 80086f4:	4621      	mov	r1, r4
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	f000 fc1a 	bl	8008f30 <__mcmp>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	dc03      	bgt.n	8008708 <_dtoa_r+0x978>
 8008700:	d1e2      	bne.n	80086c8 <_dtoa_r+0x938>
 8008702:	f01a 0f01 	tst.w	sl, #1
 8008706:	d0df      	beq.n	80086c8 <_dtoa_r+0x938>
 8008708:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800870c:	d1d9      	bne.n	80086c2 <_dtoa_r+0x932>
 800870e:	2339      	movs	r3, #57	@ 0x39
 8008710:	f88b 3000 	strb.w	r3, [fp]
 8008714:	4633      	mov	r3, r6
 8008716:	461e      	mov	r6, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800871e:	2a39      	cmp	r2, #57	@ 0x39
 8008720:	d053      	beq.n	80087ca <_dtoa_r+0xa3a>
 8008722:	3201      	adds	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e60c      	b.n	8008342 <_dtoa_r+0x5b2>
 8008728:	2a00      	cmp	r2, #0
 800872a:	dd07      	ble.n	800873c <_dtoa_r+0x9ac>
 800872c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008730:	d0ed      	beq.n	800870e <_dtoa_r+0x97e>
 8008732:	f10a 0301 	add.w	r3, sl, #1
 8008736:	f88b 3000 	strb.w	r3, [fp]
 800873a:	e602      	b.n	8008342 <_dtoa_r+0x5b2>
 800873c:	9b05      	ldr	r3, [sp, #20]
 800873e:	9a05      	ldr	r2, [sp, #20]
 8008740:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008746:	4293      	cmp	r3, r2
 8008748:	d029      	beq.n	800879e <_dtoa_r+0xa0e>
 800874a:	9901      	ldr	r1, [sp, #4]
 800874c:	2300      	movs	r3, #0
 800874e:	220a      	movs	r2, #10
 8008750:	4648      	mov	r0, r9
 8008752:	f000 f9d5 	bl	8008b00 <__multadd>
 8008756:	45a8      	cmp	r8, r5
 8008758:	9001      	str	r0, [sp, #4]
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	f04f 020a 	mov.w	r2, #10
 8008762:	4641      	mov	r1, r8
 8008764:	4648      	mov	r0, r9
 8008766:	d107      	bne.n	8008778 <_dtoa_r+0x9e8>
 8008768:	f000 f9ca 	bl	8008b00 <__multadd>
 800876c:	4680      	mov	r8, r0
 800876e:	4605      	mov	r5, r0
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	e775      	b.n	8008664 <_dtoa_r+0x8d4>
 8008778:	f000 f9c2 	bl	8008b00 <__multadd>
 800877c:	4629      	mov	r1, r5
 800877e:	4680      	mov	r8, r0
 8008780:	2300      	movs	r3, #0
 8008782:	220a      	movs	r2, #10
 8008784:	4648      	mov	r0, r9
 8008786:	f000 f9bb 	bl	8008b00 <__multadd>
 800878a:	4605      	mov	r5, r0
 800878c:	e7f0      	b.n	8008770 <_dtoa_r+0x9e0>
 800878e:	f1bb 0f00 	cmp.w	fp, #0
 8008792:	bfcc      	ite	gt
 8008794:	465e      	movgt	r6, fp
 8008796:	2601      	movle	r6, #1
 8008798:	443e      	add	r6, r7
 800879a:	f04f 0800 	mov.w	r8, #0
 800879e:	9901      	ldr	r1, [sp, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	4648      	mov	r0, r9
 80087a4:	f000 fb58 	bl	8008e58 <__lshift>
 80087a8:	4621      	mov	r1, r4
 80087aa:	9001      	str	r0, [sp, #4]
 80087ac:	f000 fbc0 	bl	8008f30 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dcaf      	bgt.n	8008714 <_dtoa_r+0x984>
 80087b4:	d102      	bne.n	80087bc <_dtoa_r+0xa2c>
 80087b6:	f01a 0f01 	tst.w	sl, #1
 80087ba:	d1ab      	bne.n	8008714 <_dtoa_r+0x984>
 80087bc:	4633      	mov	r3, r6
 80087be:	461e      	mov	r6, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a30      	cmp	r2, #48	@ 0x30
 80087c6:	d0fa      	beq.n	80087be <_dtoa_r+0xa2e>
 80087c8:	e5bb      	b.n	8008342 <_dtoa_r+0x5b2>
 80087ca:	429f      	cmp	r7, r3
 80087cc:	d1a3      	bne.n	8008716 <_dtoa_r+0x986>
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	3301      	adds	r3, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	2331      	movs	r3, #49	@ 0x31
 80087d6:	703b      	strb	r3, [r7, #0]
 80087d8:	e5b3      	b.n	8008342 <_dtoa_r+0x5b2>
 80087da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087dc:	4f16      	ldr	r7, [pc, #88]	@ (8008838 <_dtoa_r+0xaa8>)
 80087de:	b11b      	cbz	r3, 80087e8 <_dtoa_r+0xa58>
 80087e0:	f107 0308 	add.w	r3, r7, #8
 80087e4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	4638      	mov	r0, r7
 80087ea:	b011      	add	sp, #68	@ 0x44
 80087ec:	ecbd 8b02 	vpop	{d8}
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	f77f ae36 	ble.w	8008468 <_dtoa_r+0x6d8>
 80087fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008800:	2001      	movs	r0, #1
 8008802:	e656      	b.n	80084b2 <_dtoa_r+0x722>
 8008804:	f1bb 0f00 	cmp.w	fp, #0
 8008808:	f77f aed7 	ble.w	80085ba <_dtoa_r+0x82a>
 800880c:	463e      	mov	r6, r7
 800880e:	9801      	ldr	r0, [sp, #4]
 8008810:	4621      	mov	r1, r4
 8008812:	f7ff fa32 	bl	8007c7a <quorem>
 8008816:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800881a:	f806 ab01 	strb.w	sl, [r6], #1
 800881e:	1bf2      	subs	r2, r6, r7
 8008820:	4593      	cmp	fp, r2
 8008822:	ddb4      	ble.n	800878e <_dtoa_r+0x9fe>
 8008824:	9901      	ldr	r1, [sp, #4]
 8008826:	2300      	movs	r3, #0
 8008828:	220a      	movs	r2, #10
 800882a:	4648      	mov	r0, r9
 800882c:	f000 f968 	bl	8008b00 <__multadd>
 8008830:	9001      	str	r0, [sp, #4]
 8008832:	e7ec      	b.n	800880e <_dtoa_r+0xa7e>
 8008834:	08009a1c 	.word	0x08009a1c
 8008838:	080099a0 	.word	0x080099a0

0800883c <_free_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4605      	mov	r5, r0
 8008840:	2900      	cmp	r1, #0
 8008842:	d041      	beq.n	80088c8 <_free_r+0x8c>
 8008844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008848:	1f0c      	subs	r4, r1, #4
 800884a:	2b00      	cmp	r3, #0
 800884c:	bfb8      	it	lt
 800884e:	18e4      	addlt	r4, r4, r3
 8008850:	f000 f8e8 	bl	8008a24 <__malloc_lock>
 8008854:	4a1d      	ldr	r2, [pc, #116]	@ (80088cc <_free_r+0x90>)
 8008856:	6813      	ldr	r3, [r2, #0]
 8008858:	b933      	cbnz	r3, 8008868 <_free_r+0x2c>
 800885a:	6063      	str	r3, [r4, #4]
 800885c:	6014      	str	r4, [r2, #0]
 800885e:	4628      	mov	r0, r5
 8008860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008864:	f000 b8e4 	b.w	8008a30 <__malloc_unlock>
 8008868:	42a3      	cmp	r3, r4
 800886a:	d908      	bls.n	800887e <_free_r+0x42>
 800886c:	6820      	ldr	r0, [r4, #0]
 800886e:	1821      	adds	r1, r4, r0
 8008870:	428b      	cmp	r3, r1
 8008872:	bf01      	itttt	eq
 8008874:	6819      	ldreq	r1, [r3, #0]
 8008876:	685b      	ldreq	r3, [r3, #4]
 8008878:	1809      	addeq	r1, r1, r0
 800887a:	6021      	streq	r1, [r4, #0]
 800887c:	e7ed      	b.n	800885a <_free_r+0x1e>
 800887e:	461a      	mov	r2, r3
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	b10b      	cbz	r3, 8008888 <_free_r+0x4c>
 8008884:	42a3      	cmp	r3, r4
 8008886:	d9fa      	bls.n	800887e <_free_r+0x42>
 8008888:	6811      	ldr	r1, [r2, #0]
 800888a:	1850      	adds	r0, r2, r1
 800888c:	42a0      	cmp	r0, r4
 800888e:	d10b      	bne.n	80088a8 <_free_r+0x6c>
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	4401      	add	r1, r0
 8008894:	1850      	adds	r0, r2, r1
 8008896:	4283      	cmp	r3, r0
 8008898:	6011      	str	r1, [r2, #0]
 800889a:	d1e0      	bne.n	800885e <_free_r+0x22>
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	6053      	str	r3, [r2, #4]
 80088a2:	4408      	add	r0, r1
 80088a4:	6010      	str	r0, [r2, #0]
 80088a6:	e7da      	b.n	800885e <_free_r+0x22>
 80088a8:	d902      	bls.n	80088b0 <_free_r+0x74>
 80088aa:	230c      	movs	r3, #12
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	e7d6      	b.n	800885e <_free_r+0x22>
 80088b0:	6820      	ldr	r0, [r4, #0]
 80088b2:	1821      	adds	r1, r4, r0
 80088b4:	428b      	cmp	r3, r1
 80088b6:	bf04      	itt	eq
 80088b8:	6819      	ldreq	r1, [r3, #0]
 80088ba:	685b      	ldreq	r3, [r3, #4]
 80088bc:	6063      	str	r3, [r4, #4]
 80088be:	bf04      	itt	eq
 80088c0:	1809      	addeq	r1, r1, r0
 80088c2:	6021      	streq	r1, [r4, #0]
 80088c4:	6054      	str	r4, [r2, #4]
 80088c6:	e7ca      	b.n	800885e <_free_r+0x22>
 80088c8:	bd38      	pop	{r3, r4, r5, pc}
 80088ca:	bf00      	nop
 80088cc:	20002ebc 	.word	0x20002ebc

080088d0 <malloc>:
 80088d0:	4b02      	ldr	r3, [pc, #8]	@ (80088dc <malloc+0xc>)
 80088d2:	4601      	mov	r1, r0
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f000 b825 	b.w	8008924 <_malloc_r>
 80088da:	bf00      	nop
 80088dc:	20000018 	.word	0x20000018

080088e0 <sbrk_aligned>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008920 <sbrk_aligned+0x40>)
 80088e4:	460c      	mov	r4, r1
 80088e6:	6831      	ldr	r1, [r6, #0]
 80088e8:	4605      	mov	r5, r0
 80088ea:	b911      	cbnz	r1, 80088f2 <sbrk_aligned+0x12>
 80088ec:	f000 fe9a 	bl	8009624 <_sbrk_r>
 80088f0:	6030      	str	r0, [r6, #0]
 80088f2:	4621      	mov	r1, r4
 80088f4:	4628      	mov	r0, r5
 80088f6:	f000 fe95 	bl	8009624 <_sbrk_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	d103      	bne.n	8008906 <sbrk_aligned+0x26>
 80088fe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008902:	4620      	mov	r0, r4
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	1cc4      	adds	r4, r0, #3
 8008908:	f024 0403 	bic.w	r4, r4, #3
 800890c:	42a0      	cmp	r0, r4
 800890e:	d0f8      	beq.n	8008902 <sbrk_aligned+0x22>
 8008910:	1a21      	subs	r1, r4, r0
 8008912:	4628      	mov	r0, r5
 8008914:	f000 fe86 	bl	8009624 <_sbrk_r>
 8008918:	3001      	adds	r0, #1
 800891a:	d1f2      	bne.n	8008902 <sbrk_aligned+0x22>
 800891c:	e7ef      	b.n	80088fe <sbrk_aligned+0x1e>
 800891e:	bf00      	nop
 8008920:	20002eb8 	.word	0x20002eb8

08008924 <_malloc_r>:
 8008924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008928:	1ccd      	adds	r5, r1, #3
 800892a:	f025 0503 	bic.w	r5, r5, #3
 800892e:	3508      	adds	r5, #8
 8008930:	2d0c      	cmp	r5, #12
 8008932:	bf38      	it	cc
 8008934:	250c      	movcc	r5, #12
 8008936:	2d00      	cmp	r5, #0
 8008938:	4606      	mov	r6, r0
 800893a:	db01      	blt.n	8008940 <_malloc_r+0x1c>
 800893c:	42a9      	cmp	r1, r5
 800893e:	d904      	bls.n	800894a <_malloc_r+0x26>
 8008940:	230c      	movs	r3, #12
 8008942:	6033      	str	r3, [r6, #0]
 8008944:	2000      	movs	r0, #0
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a20 <_malloc_r+0xfc>
 800894e:	f000 f869 	bl	8008a24 <__malloc_lock>
 8008952:	f8d8 3000 	ldr.w	r3, [r8]
 8008956:	461c      	mov	r4, r3
 8008958:	bb44      	cbnz	r4, 80089ac <_malloc_r+0x88>
 800895a:	4629      	mov	r1, r5
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ffbf 	bl	80088e0 <sbrk_aligned>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	4604      	mov	r4, r0
 8008966:	d158      	bne.n	8008a1a <_malloc_r+0xf6>
 8008968:	f8d8 4000 	ldr.w	r4, [r8]
 800896c:	4627      	mov	r7, r4
 800896e:	2f00      	cmp	r7, #0
 8008970:	d143      	bne.n	80089fa <_malloc_r+0xd6>
 8008972:	2c00      	cmp	r4, #0
 8008974:	d04b      	beq.n	8008a0e <_malloc_r+0xea>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	4639      	mov	r1, r7
 800897a:	4630      	mov	r0, r6
 800897c:	eb04 0903 	add.w	r9, r4, r3
 8008980:	f000 fe50 	bl	8009624 <_sbrk_r>
 8008984:	4581      	cmp	r9, r0
 8008986:	d142      	bne.n	8008a0e <_malloc_r+0xea>
 8008988:	6821      	ldr	r1, [r4, #0]
 800898a:	1a6d      	subs	r5, r5, r1
 800898c:	4629      	mov	r1, r5
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ffa6 	bl	80088e0 <sbrk_aligned>
 8008994:	3001      	adds	r0, #1
 8008996:	d03a      	beq.n	8008a0e <_malloc_r+0xea>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	442b      	add	r3, r5
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	f8d8 3000 	ldr.w	r3, [r8]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	bb62      	cbnz	r2, 8008a00 <_malloc_r+0xdc>
 80089a6:	f8c8 7000 	str.w	r7, [r8]
 80089aa:	e00f      	b.n	80089cc <_malloc_r+0xa8>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	1b52      	subs	r2, r2, r5
 80089b0:	d420      	bmi.n	80089f4 <_malloc_r+0xd0>
 80089b2:	2a0b      	cmp	r2, #11
 80089b4:	d917      	bls.n	80089e6 <_malloc_r+0xc2>
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	6025      	str	r5, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	6059      	strne	r1, [r3, #4]
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	bf08      	it	eq
 80089c4:	f8c8 1000 	streq.w	r1, [r8]
 80089c8:	5162      	str	r2, [r4, r5]
 80089ca:	604b      	str	r3, [r1, #4]
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f82f 	bl	8008a30 <__malloc_unlock>
 80089d2:	f104 000b 	add.w	r0, r4, #11
 80089d6:	1d23      	adds	r3, r4, #4
 80089d8:	f020 0007 	bic.w	r0, r0, #7
 80089dc:	1ac2      	subs	r2, r0, r3
 80089de:	bf1c      	itt	ne
 80089e0:	1a1b      	subne	r3, r3, r0
 80089e2:	50a3      	strne	r3, [r4, r2]
 80089e4:	e7af      	b.n	8008946 <_malloc_r+0x22>
 80089e6:	6862      	ldr	r2, [r4, #4]
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	bf0c      	ite	eq
 80089ec:	f8c8 2000 	streq.w	r2, [r8]
 80089f0:	605a      	strne	r2, [r3, #4]
 80089f2:	e7eb      	b.n	80089cc <_malloc_r+0xa8>
 80089f4:	4623      	mov	r3, r4
 80089f6:	6864      	ldr	r4, [r4, #4]
 80089f8:	e7ae      	b.n	8008958 <_malloc_r+0x34>
 80089fa:	463c      	mov	r4, r7
 80089fc:	687f      	ldr	r7, [r7, #4]
 80089fe:	e7b6      	b.n	800896e <_malloc_r+0x4a>
 8008a00:	461a      	mov	r2, r3
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d1fb      	bne.n	8008a00 <_malloc_r+0xdc>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6053      	str	r3, [r2, #4]
 8008a0c:	e7de      	b.n	80089cc <_malloc_r+0xa8>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	6033      	str	r3, [r6, #0]
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f80c 	bl	8008a30 <__malloc_unlock>
 8008a18:	e794      	b.n	8008944 <_malloc_r+0x20>
 8008a1a:	6005      	str	r5, [r0, #0]
 8008a1c:	e7d6      	b.n	80089cc <_malloc_r+0xa8>
 8008a1e:	bf00      	nop
 8008a20:	20002ebc 	.word	0x20002ebc

08008a24 <__malloc_lock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_lock+0x8>)
 8008a26:	f7ff b926 	b.w	8007c76 <__retarget_lock_acquire_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	20002eb4 	.word	0x20002eb4

08008a30 <__malloc_unlock>:
 8008a30:	4801      	ldr	r0, [pc, #4]	@ (8008a38 <__malloc_unlock+0x8>)
 8008a32:	f7ff b921 	b.w	8007c78 <__retarget_lock_release_recursive>
 8008a36:	bf00      	nop
 8008a38:	20002eb4 	.word	0x20002eb4

08008a3c <_Balloc>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	69c6      	ldr	r6, [r0, #28]
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	b976      	cbnz	r6, 8008a64 <_Balloc+0x28>
 8008a46:	2010      	movs	r0, #16
 8008a48:	f7ff ff42 	bl	80088d0 <malloc>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	61e0      	str	r0, [r4, #28]
 8008a50:	b920      	cbnz	r0, 8008a5c <_Balloc+0x20>
 8008a52:	4b18      	ldr	r3, [pc, #96]	@ (8008ab4 <_Balloc+0x78>)
 8008a54:	4818      	ldr	r0, [pc, #96]	@ (8008ab8 <_Balloc+0x7c>)
 8008a56:	216b      	movs	r1, #107	@ 0x6b
 8008a58:	f000 fe02 	bl	8009660 <__assert_func>
 8008a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a60:	6006      	str	r6, [r0, #0]
 8008a62:	60c6      	str	r6, [r0, #12]
 8008a64:	69e6      	ldr	r6, [r4, #28]
 8008a66:	68f3      	ldr	r3, [r6, #12]
 8008a68:	b183      	cbz	r3, 8008a8c <_Balloc+0x50>
 8008a6a:	69e3      	ldr	r3, [r4, #28]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a72:	b9b8      	cbnz	r0, 8008aa4 <_Balloc+0x68>
 8008a74:	2101      	movs	r1, #1
 8008a76:	fa01 f605 	lsl.w	r6, r1, r5
 8008a7a:	1d72      	adds	r2, r6, #5
 8008a7c:	0092      	lsls	r2, r2, #2
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 fe0c 	bl	800969c <_calloc_r>
 8008a84:	b160      	cbz	r0, 8008aa0 <_Balloc+0x64>
 8008a86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a8a:	e00e      	b.n	8008aaa <_Balloc+0x6e>
 8008a8c:	2221      	movs	r2, #33	@ 0x21
 8008a8e:	2104      	movs	r1, #4
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fe03 	bl	800969c <_calloc_r>
 8008a96:	69e3      	ldr	r3, [r4, #28]
 8008a98:	60f0      	str	r0, [r6, #12]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1e4      	bne.n	8008a6a <_Balloc+0x2e>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	6802      	ldr	r2, [r0, #0]
 8008aa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ab0:	e7f7      	b.n	8008aa2 <_Balloc+0x66>
 8008ab2:	bf00      	nop
 8008ab4:	080099ad 	.word	0x080099ad
 8008ab8:	08009a2d 	.word	0x08009a2d

08008abc <_Bfree>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	69c6      	ldr	r6, [r0, #28]
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	b976      	cbnz	r6, 8008ae4 <_Bfree+0x28>
 8008ac6:	2010      	movs	r0, #16
 8008ac8:	f7ff ff02 	bl	80088d0 <malloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	61e8      	str	r0, [r5, #28]
 8008ad0:	b920      	cbnz	r0, 8008adc <_Bfree+0x20>
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <_Bfree+0x3c>)
 8008ad4:	4809      	ldr	r0, [pc, #36]	@ (8008afc <_Bfree+0x40>)
 8008ad6:	218f      	movs	r1, #143	@ 0x8f
 8008ad8:	f000 fdc2 	bl	8009660 <__assert_func>
 8008adc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae0:	6006      	str	r6, [r0, #0]
 8008ae2:	60c6      	str	r6, [r0, #12]
 8008ae4:	b13c      	cbz	r4, 8008af6 <_Bfree+0x3a>
 8008ae6:	69eb      	ldr	r3, [r5, #28]
 8008ae8:	6862      	ldr	r2, [r4, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008af0:	6021      	str	r1, [r4, #0]
 8008af2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	080099ad 	.word	0x080099ad
 8008afc:	08009a2d 	.word	0x08009a2d

08008b00 <__multadd>:
 8008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	690d      	ldr	r5, [r1, #16]
 8008b06:	4607      	mov	r7, r0
 8008b08:	460c      	mov	r4, r1
 8008b0a:	461e      	mov	r6, r3
 8008b0c:	f101 0c14 	add.w	ip, r1, #20
 8008b10:	2000      	movs	r0, #0
 8008b12:	f8dc 3000 	ldr.w	r3, [ip]
 8008b16:	b299      	uxth	r1, r3
 8008b18:	fb02 6101 	mla	r1, r2, r1, r6
 8008b1c:	0c1e      	lsrs	r6, r3, #16
 8008b1e:	0c0b      	lsrs	r3, r1, #16
 8008b20:	fb02 3306 	mla	r3, r2, r6, r3
 8008b24:	b289      	uxth	r1, r1
 8008b26:	3001      	adds	r0, #1
 8008b28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b2c:	4285      	cmp	r5, r0
 8008b2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008b32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b36:	dcec      	bgt.n	8008b12 <__multadd+0x12>
 8008b38:	b30e      	cbz	r6, 8008b7e <__multadd+0x7e>
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	42ab      	cmp	r3, r5
 8008b3e:	dc19      	bgt.n	8008b74 <__multadd+0x74>
 8008b40:	6861      	ldr	r1, [r4, #4]
 8008b42:	4638      	mov	r0, r7
 8008b44:	3101      	adds	r1, #1
 8008b46:	f7ff ff79 	bl	8008a3c <_Balloc>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	b928      	cbnz	r0, 8008b5a <__multadd+0x5a>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <__multadd+0x84>)
 8008b52:	480d      	ldr	r0, [pc, #52]	@ (8008b88 <__multadd+0x88>)
 8008b54:	21ba      	movs	r1, #186	@ 0xba
 8008b56:	f000 fd83 	bl	8009660 <__assert_func>
 8008b5a:	6922      	ldr	r2, [r4, #16]
 8008b5c:	3202      	adds	r2, #2
 8008b5e:	f104 010c 	add.w	r1, r4, #12
 8008b62:	0092      	lsls	r2, r2, #2
 8008b64:	300c      	adds	r0, #12
 8008b66:	f000 fd6d 	bl	8009644 <memcpy>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff ffa5 	bl	8008abc <_Bfree>
 8008b72:	4644      	mov	r4, r8
 8008b74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b78:	3501      	adds	r5, #1
 8008b7a:	615e      	str	r6, [r3, #20]
 8008b7c:	6125      	str	r5, [r4, #16]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b84:	08009a1c 	.word	0x08009a1c
 8008b88:	08009a2d 	.word	0x08009a2d

08008b8c <__hi0bits>:
 8008b8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b90:	4603      	mov	r3, r0
 8008b92:	bf36      	itet	cc
 8008b94:	0403      	lslcc	r3, r0, #16
 8008b96:	2000      	movcs	r0, #0
 8008b98:	2010      	movcc	r0, #16
 8008b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b9e:	bf3c      	itt	cc
 8008ba0:	021b      	lslcc	r3, r3, #8
 8008ba2:	3008      	addcc	r0, #8
 8008ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ba8:	bf3c      	itt	cc
 8008baa:	011b      	lslcc	r3, r3, #4
 8008bac:	3004      	addcc	r0, #4
 8008bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb2:	bf3c      	itt	cc
 8008bb4:	009b      	lslcc	r3, r3, #2
 8008bb6:	3002      	addcc	r0, #2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	db05      	blt.n	8008bc8 <__hi0bits+0x3c>
 8008bbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008bc0:	f100 0001 	add.w	r0, r0, #1
 8008bc4:	bf08      	it	eq
 8008bc6:	2020      	moveq	r0, #32
 8008bc8:	4770      	bx	lr

08008bca <__lo0bits>:
 8008bca:	6803      	ldr	r3, [r0, #0]
 8008bcc:	4602      	mov	r2, r0
 8008bce:	f013 0007 	ands.w	r0, r3, #7
 8008bd2:	d00b      	beq.n	8008bec <__lo0bits+0x22>
 8008bd4:	07d9      	lsls	r1, r3, #31
 8008bd6:	d421      	bmi.n	8008c1c <__lo0bits+0x52>
 8008bd8:	0798      	lsls	r0, r3, #30
 8008bda:	bf49      	itett	mi
 8008bdc:	085b      	lsrmi	r3, r3, #1
 8008bde:	089b      	lsrpl	r3, r3, #2
 8008be0:	2001      	movmi	r0, #1
 8008be2:	6013      	strmi	r3, [r2, #0]
 8008be4:	bf5c      	itt	pl
 8008be6:	6013      	strpl	r3, [r2, #0]
 8008be8:	2002      	movpl	r0, #2
 8008bea:	4770      	bx	lr
 8008bec:	b299      	uxth	r1, r3
 8008bee:	b909      	cbnz	r1, 8008bf4 <__lo0bits+0x2a>
 8008bf0:	0c1b      	lsrs	r3, r3, #16
 8008bf2:	2010      	movs	r0, #16
 8008bf4:	b2d9      	uxtb	r1, r3
 8008bf6:	b909      	cbnz	r1, 8008bfc <__lo0bits+0x32>
 8008bf8:	3008      	adds	r0, #8
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	0719      	lsls	r1, r3, #28
 8008bfe:	bf04      	itt	eq
 8008c00:	091b      	lsreq	r3, r3, #4
 8008c02:	3004      	addeq	r0, #4
 8008c04:	0799      	lsls	r1, r3, #30
 8008c06:	bf04      	itt	eq
 8008c08:	089b      	lsreq	r3, r3, #2
 8008c0a:	3002      	addeq	r0, #2
 8008c0c:	07d9      	lsls	r1, r3, #31
 8008c0e:	d403      	bmi.n	8008c18 <__lo0bits+0x4e>
 8008c10:	085b      	lsrs	r3, r3, #1
 8008c12:	f100 0001 	add.w	r0, r0, #1
 8008c16:	d003      	beq.n	8008c20 <__lo0bits+0x56>
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	4770      	bx	lr
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	4770      	bx	lr
 8008c20:	2020      	movs	r0, #32
 8008c22:	4770      	bx	lr

08008c24 <__i2b>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	460c      	mov	r4, r1
 8008c28:	2101      	movs	r1, #1
 8008c2a:	f7ff ff07 	bl	8008a3c <_Balloc>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	b928      	cbnz	r0, 8008c3e <__i2b+0x1a>
 8008c32:	4b05      	ldr	r3, [pc, #20]	@ (8008c48 <__i2b+0x24>)
 8008c34:	4805      	ldr	r0, [pc, #20]	@ (8008c4c <__i2b+0x28>)
 8008c36:	f240 1145 	movw	r1, #325	@ 0x145
 8008c3a:	f000 fd11 	bl	8009660 <__assert_func>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6144      	str	r4, [r0, #20]
 8008c42:	6103      	str	r3, [r0, #16]
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	bf00      	nop
 8008c48:	08009a1c 	.word	0x08009a1c
 8008c4c:	08009a2d 	.word	0x08009a2d

08008c50 <__multiply>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	4614      	mov	r4, r2
 8008c56:	690a      	ldr	r2, [r1, #16]
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	bfa8      	it	ge
 8008c5e:	4623      	movge	r3, r4
 8008c60:	460f      	mov	r7, r1
 8008c62:	bfa4      	itt	ge
 8008c64:	460c      	movge	r4, r1
 8008c66:	461f      	movge	r7, r3
 8008c68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	6861      	ldr	r1, [r4, #4]
 8008c74:	eb0a 0609 	add.w	r6, sl, r9
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	bfb8      	it	lt
 8008c7e:	3101      	addlt	r1, #1
 8008c80:	f7ff fedc 	bl	8008a3c <_Balloc>
 8008c84:	b930      	cbnz	r0, 8008c94 <__multiply+0x44>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b44      	ldr	r3, [pc, #272]	@ (8008d9c <__multiply+0x14c>)
 8008c8a:	4845      	ldr	r0, [pc, #276]	@ (8008da0 <__multiply+0x150>)
 8008c8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c90:	f000 fce6 	bl	8009660 <__assert_func>
 8008c94:	f100 0514 	add.w	r5, r0, #20
 8008c98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c9c:	462b      	mov	r3, r5
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4543      	cmp	r3, r8
 8008ca2:	d321      	bcc.n	8008ce8 <__multiply+0x98>
 8008ca4:	f107 0114 	add.w	r1, r7, #20
 8008ca8:	f104 0214 	add.w	r2, r4, #20
 8008cac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008cb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	1b13      	subs	r3, r2, r4
 8008cb8:	3b15      	subs	r3, #21
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	f104 0715 	add.w	r7, r4, #21
 8008cc4:	42ba      	cmp	r2, r7
 8008cc6:	bf38      	it	cc
 8008cc8:	2304      	movcc	r3, #4
 8008cca:	9301      	str	r3, [sp, #4]
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	9103      	str	r1, [sp, #12]
 8008cd0:	428b      	cmp	r3, r1
 8008cd2:	d80c      	bhi.n	8008cee <__multiply+0x9e>
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	dd03      	ble.n	8008ce0 <__multiply+0x90>
 8008cd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d05b      	beq.n	8008d98 <__multiply+0x148>
 8008ce0:	6106      	str	r6, [r0, #16]
 8008ce2:	b005      	add	sp, #20
 8008ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce8:	f843 2b04 	str.w	r2, [r3], #4
 8008cec:	e7d8      	b.n	8008ca0 <__multiply+0x50>
 8008cee:	f8b1 a000 	ldrh.w	sl, [r1]
 8008cf2:	f1ba 0f00 	cmp.w	sl, #0
 8008cf6:	d024      	beq.n	8008d42 <__multiply+0xf2>
 8008cf8:	f104 0e14 	add.w	lr, r4, #20
 8008cfc:	46a9      	mov	r9, r5
 8008cfe:	f04f 0c00 	mov.w	ip, #0
 8008d02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d06:	f8d9 3000 	ldr.w	r3, [r9]
 8008d0a:	fa1f fb87 	uxth.w	fp, r7
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d18:	f8d9 7000 	ldr.w	r7, [r9]
 8008d1c:	4463      	add	r3, ip
 8008d1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d22:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d30:	4572      	cmp	r2, lr
 8008d32:	f849 3b04 	str.w	r3, [r9], #4
 8008d36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d3a:	d8e2      	bhi.n	8008d02 <__multiply+0xb2>
 8008d3c:	9b01      	ldr	r3, [sp, #4]
 8008d3e:	f845 c003 	str.w	ip, [r5, r3]
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d48:	3104      	adds	r1, #4
 8008d4a:	f1b9 0f00 	cmp.w	r9, #0
 8008d4e:	d021      	beq.n	8008d94 <__multiply+0x144>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	f104 0c14 	add.w	ip, r4, #20
 8008d56:	46ae      	mov	lr, r5
 8008d58:	f04f 0a00 	mov.w	sl, #0
 8008d5c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d64:	fb09 770b 	mla	r7, r9, fp, r7
 8008d68:	4457      	add	r7, sl
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d70:	f84e 3b04 	str.w	r3, [lr], #4
 8008d74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d7c:	f8be 3000 	ldrh.w	r3, [lr]
 8008d80:	fb09 330a 	mla	r3, r9, sl, r3
 8008d84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d88:	4562      	cmp	r2, ip
 8008d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d8e:	d8e5      	bhi.n	8008d5c <__multiply+0x10c>
 8008d90:	9f01      	ldr	r7, [sp, #4]
 8008d92:	51eb      	str	r3, [r5, r7]
 8008d94:	3504      	adds	r5, #4
 8008d96:	e799      	b.n	8008ccc <__multiply+0x7c>
 8008d98:	3e01      	subs	r6, #1
 8008d9a:	e79b      	b.n	8008cd4 <__multiply+0x84>
 8008d9c:	08009a1c 	.word	0x08009a1c
 8008da0:	08009a2d 	.word	0x08009a2d

08008da4 <__pow5mult>:
 8008da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da8:	4615      	mov	r5, r2
 8008daa:	f012 0203 	ands.w	r2, r2, #3
 8008dae:	4607      	mov	r7, r0
 8008db0:	460e      	mov	r6, r1
 8008db2:	d007      	beq.n	8008dc4 <__pow5mult+0x20>
 8008db4:	4c25      	ldr	r4, [pc, #148]	@ (8008e4c <__pow5mult+0xa8>)
 8008db6:	3a01      	subs	r2, #1
 8008db8:	2300      	movs	r3, #0
 8008dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dbe:	f7ff fe9f 	bl	8008b00 <__multadd>
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	10ad      	asrs	r5, r5, #2
 8008dc6:	d03d      	beq.n	8008e44 <__pow5mult+0xa0>
 8008dc8:	69fc      	ldr	r4, [r7, #28]
 8008dca:	b97c      	cbnz	r4, 8008dec <__pow5mult+0x48>
 8008dcc:	2010      	movs	r0, #16
 8008dce:	f7ff fd7f 	bl	80088d0 <malloc>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	61f8      	str	r0, [r7, #28]
 8008dd6:	b928      	cbnz	r0, 8008de4 <__pow5mult+0x40>
 8008dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e50 <__pow5mult+0xac>)
 8008dda:	481e      	ldr	r0, [pc, #120]	@ (8008e54 <__pow5mult+0xb0>)
 8008ddc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008de0:	f000 fc3e 	bl	8009660 <__assert_func>
 8008de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008de8:	6004      	str	r4, [r0, #0]
 8008dea:	60c4      	str	r4, [r0, #12]
 8008dec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008df4:	b94c      	cbnz	r4, 8008e0a <__pow5mult+0x66>
 8008df6:	f240 2171 	movw	r1, #625	@ 0x271
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	f7ff ff12 	bl	8008c24 <__i2b>
 8008e00:	2300      	movs	r3, #0
 8008e02:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e06:	4604      	mov	r4, r0
 8008e08:	6003      	str	r3, [r0, #0]
 8008e0a:	f04f 0900 	mov.w	r9, #0
 8008e0e:	07eb      	lsls	r3, r5, #31
 8008e10:	d50a      	bpl.n	8008e28 <__pow5mult+0x84>
 8008e12:	4631      	mov	r1, r6
 8008e14:	4622      	mov	r2, r4
 8008e16:	4638      	mov	r0, r7
 8008e18:	f7ff ff1a 	bl	8008c50 <__multiply>
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4680      	mov	r8, r0
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7ff fe4b 	bl	8008abc <_Bfree>
 8008e26:	4646      	mov	r6, r8
 8008e28:	106d      	asrs	r5, r5, #1
 8008e2a:	d00b      	beq.n	8008e44 <__pow5mult+0xa0>
 8008e2c:	6820      	ldr	r0, [r4, #0]
 8008e2e:	b938      	cbnz	r0, 8008e40 <__pow5mult+0x9c>
 8008e30:	4622      	mov	r2, r4
 8008e32:	4621      	mov	r1, r4
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff ff0b 	bl	8008c50 <__multiply>
 8008e3a:	6020      	str	r0, [r4, #0]
 8008e3c:	f8c0 9000 	str.w	r9, [r0]
 8008e40:	4604      	mov	r4, r0
 8008e42:	e7e4      	b.n	8008e0e <__pow5mult+0x6a>
 8008e44:	4630      	mov	r0, r6
 8008e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e4a:	bf00      	nop
 8008e4c:	08009a88 	.word	0x08009a88
 8008e50:	080099ad 	.word	0x080099ad
 8008e54:	08009a2d 	.word	0x08009a2d

08008e58 <__lshift>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	6849      	ldr	r1, [r1, #4]
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e66:	68a3      	ldr	r3, [r4, #8]
 8008e68:	4607      	mov	r7, r0
 8008e6a:	4691      	mov	r9, r2
 8008e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e70:	f108 0601 	add.w	r6, r8, #1
 8008e74:	42b3      	cmp	r3, r6
 8008e76:	db0b      	blt.n	8008e90 <__lshift+0x38>
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f7ff fddf 	bl	8008a3c <_Balloc>
 8008e7e:	4605      	mov	r5, r0
 8008e80:	b948      	cbnz	r0, 8008e96 <__lshift+0x3e>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b28      	ldr	r3, [pc, #160]	@ (8008f28 <__lshift+0xd0>)
 8008e86:	4829      	ldr	r0, [pc, #164]	@ (8008f2c <__lshift+0xd4>)
 8008e88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e8c:	f000 fbe8 	bl	8009660 <__assert_func>
 8008e90:	3101      	adds	r1, #1
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	e7ee      	b.n	8008e74 <__lshift+0x1c>
 8008e96:	2300      	movs	r3, #0
 8008e98:	f100 0114 	add.w	r1, r0, #20
 8008e9c:	f100 0210 	add.w	r2, r0, #16
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	4553      	cmp	r3, sl
 8008ea4:	db33      	blt.n	8008f0e <__lshift+0xb6>
 8008ea6:	6920      	ldr	r0, [r4, #16]
 8008ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008eac:	f104 0314 	add.w	r3, r4, #20
 8008eb0:	f019 091f 	ands.w	r9, r9, #31
 8008eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008eb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ebc:	d02b      	beq.n	8008f16 <__lshift+0xbe>
 8008ebe:	f1c9 0e20 	rsb	lr, r9, #32
 8008ec2:	468a      	mov	sl, r1
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	fa00 f009 	lsl.w	r0, r0, r9
 8008ecc:	4310      	orrs	r0, r2
 8008ece:	f84a 0b04 	str.w	r0, [sl], #4
 8008ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ed6:	459c      	cmp	ip, r3
 8008ed8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008edc:	d8f3      	bhi.n	8008ec6 <__lshift+0x6e>
 8008ede:	ebac 0304 	sub.w	r3, ip, r4
 8008ee2:	3b15      	subs	r3, #21
 8008ee4:	f023 0303 	bic.w	r3, r3, #3
 8008ee8:	3304      	adds	r3, #4
 8008eea:	f104 0015 	add.w	r0, r4, #21
 8008eee:	4584      	cmp	ip, r0
 8008ef0:	bf38      	it	cc
 8008ef2:	2304      	movcc	r3, #4
 8008ef4:	50ca      	str	r2, [r1, r3]
 8008ef6:	b10a      	cbz	r2, 8008efc <__lshift+0xa4>
 8008ef8:	f108 0602 	add.w	r6, r8, #2
 8008efc:	3e01      	subs	r6, #1
 8008efe:	4638      	mov	r0, r7
 8008f00:	612e      	str	r6, [r5, #16]
 8008f02:	4621      	mov	r1, r4
 8008f04:	f7ff fdda 	bl	8008abc <_Bfree>
 8008f08:	4628      	mov	r0, r5
 8008f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f12:	3301      	adds	r3, #1
 8008f14:	e7c5      	b.n	8008ea2 <__lshift+0x4a>
 8008f16:	3904      	subs	r1, #4
 8008f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f20:	459c      	cmp	ip, r3
 8008f22:	d8f9      	bhi.n	8008f18 <__lshift+0xc0>
 8008f24:	e7ea      	b.n	8008efc <__lshift+0xa4>
 8008f26:	bf00      	nop
 8008f28:	08009a1c 	.word	0x08009a1c
 8008f2c:	08009a2d 	.word	0x08009a2d

08008f30 <__mcmp>:
 8008f30:	690a      	ldr	r2, [r1, #16]
 8008f32:	4603      	mov	r3, r0
 8008f34:	6900      	ldr	r0, [r0, #16]
 8008f36:	1a80      	subs	r0, r0, r2
 8008f38:	b530      	push	{r4, r5, lr}
 8008f3a:	d10e      	bne.n	8008f5a <__mcmp+0x2a>
 8008f3c:	3314      	adds	r3, #20
 8008f3e:	3114      	adds	r1, #20
 8008f40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f50:	4295      	cmp	r5, r2
 8008f52:	d003      	beq.n	8008f5c <__mcmp+0x2c>
 8008f54:	d205      	bcs.n	8008f62 <__mcmp+0x32>
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f5a:	bd30      	pop	{r4, r5, pc}
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d3f3      	bcc.n	8008f48 <__mcmp+0x18>
 8008f60:	e7fb      	b.n	8008f5a <__mcmp+0x2a>
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7f9      	b.n	8008f5a <__mcmp+0x2a>
	...

08008f68 <__mdiff>:
 8008f68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	4606      	mov	r6, r0
 8008f70:	4611      	mov	r1, r2
 8008f72:	4648      	mov	r0, r9
 8008f74:	4614      	mov	r4, r2
 8008f76:	f7ff ffdb 	bl	8008f30 <__mcmp>
 8008f7a:	1e05      	subs	r5, r0, #0
 8008f7c:	d112      	bne.n	8008fa4 <__mdiff+0x3c>
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4630      	mov	r0, r6
 8008f82:	f7ff fd5b 	bl	8008a3c <_Balloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	b928      	cbnz	r0, 8008f96 <__mdiff+0x2e>
 8008f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8009088 <__mdiff+0x120>)
 8008f8c:	f240 2137 	movw	r1, #567	@ 0x237
 8008f90:	483e      	ldr	r0, [pc, #248]	@ (800908c <__mdiff+0x124>)
 8008f92:	f000 fb65 	bl	8009660 <__assert_func>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	b003      	add	sp, #12
 8008fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa4:	bfbc      	itt	lt
 8008fa6:	464b      	movlt	r3, r9
 8008fa8:	46a1      	movlt	r9, r4
 8008faa:	4630      	mov	r0, r6
 8008fac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fb0:	bfba      	itte	lt
 8008fb2:	461c      	movlt	r4, r3
 8008fb4:	2501      	movlt	r5, #1
 8008fb6:	2500      	movge	r5, #0
 8008fb8:	f7ff fd40 	bl	8008a3c <_Balloc>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	b918      	cbnz	r0, 8008fc8 <__mdiff+0x60>
 8008fc0:	4b31      	ldr	r3, [pc, #196]	@ (8009088 <__mdiff+0x120>)
 8008fc2:	f240 2145 	movw	r1, #581	@ 0x245
 8008fc6:	e7e3      	b.n	8008f90 <__mdiff+0x28>
 8008fc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fcc:	6926      	ldr	r6, [r4, #16]
 8008fce:	60c5      	str	r5, [r0, #12]
 8008fd0:	f109 0310 	add.w	r3, r9, #16
 8008fd4:	f109 0514 	add.w	r5, r9, #20
 8008fd8:	f104 0e14 	add.w	lr, r4, #20
 8008fdc:	f100 0b14 	add.w	fp, r0, #20
 8008fe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	46d9      	mov	r9, fp
 8008fec:	f04f 0c00 	mov.w	ip, #0
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ff6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	fa1f f38a 	uxth.w	r3, sl
 8009000:	4619      	mov	r1, r3
 8009002:	b283      	uxth	r3, r0
 8009004:	1acb      	subs	r3, r1, r3
 8009006:	0c00      	lsrs	r0, r0, #16
 8009008:	4463      	add	r3, ip
 800900a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800900e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009012:	b29b      	uxth	r3, r3
 8009014:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009018:	4576      	cmp	r6, lr
 800901a:	f849 3b04 	str.w	r3, [r9], #4
 800901e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009022:	d8e5      	bhi.n	8008ff0 <__mdiff+0x88>
 8009024:	1b33      	subs	r3, r6, r4
 8009026:	3b15      	subs	r3, #21
 8009028:	f023 0303 	bic.w	r3, r3, #3
 800902c:	3415      	adds	r4, #21
 800902e:	3304      	adds	r3, #4
 8009030:	42a6      	cmp	r6, r4
 8009032:	bf38      	it	cc
 8009034:	2304      	movcc	r3, #4
 8009036:	441d      	add	r5, r3
 8009038:	445b      	add	r3, fp
 800903a:	461e      	mov	r6, r3
 800903c:	462c      	mov	r4, r5
 800903e:	4544      	cmp	r4, r8
 8009040:	d30e      	bcc.n	8009060 <__mdiff+0xf8>
 8009042:	f108 0103 	add.w	r1, r8, #3
 8009046:	1b49      	subs	r1, r1, r5
 8009048:	f021 0103 	bic.w	r1, r1, #3
 800904c:	3d03      	subs	r5, #3
 800904e:	45a8      	cmp	r8, r5
 8009050:	bf38      	it	cc
 8009052:	2100      	movcc	r1, #0
 8009054:	440b      	add	r3, r1
 8009056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800905a:	b191      	cbz	r1, 8009082 <__mdiff+0x11a>
 800905c:	6117      	str	r7, [r2, #16]
 800905e:	e79d      	b.n	8008f9c <__mdiff+0x34>
 8009060:	f854 1b04 	ldr.w	r1, [r4], #4
 8009064:	46e6      	mov	lr, ip
 8009066:	0c08      	lsrs	r0, r1, #16
 8009068:	fa1c fc81 	uxtah	ip, ip, r1
 800906c:	4471      	add	r1, lr
 800906e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009072:	b289      	uxth	r1, r1
 8009074:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009078:	f846 1b04 	str.w	r1, [r6], #4
 800907c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009080:	e7dd      	b.n	800903e <__mdiff+0xd6>
 8009082:	3f01      	subs	r7, #1
 8009084:	e7e7      	b.n	8009056 <__mdiff+0xee>
 8009086:	bf00      	nop
 8009088:	08009a1c 	.word	0x08009a1c
 800908c:	08009a2d 	.word	0x08009a2d

08009090 <__d2b>:
 8009090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009094:	460f      	mov	r7, r1
 8009096:	2101      	movs	r1, #1
 8009098:	ec59 8b10 	vmov	r8, r9, d0
 800909c:	4616      	mov	r6, r2
 800909e:	f7ff fccd 	bl	8008a3c <_Balloc>
 80090a2:	4604      	mov	r4, r0
 80090a4:	b930      	cbnz	r0, 80090b4 <__d2b+0x24>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b23      	ldr	r3, [pc, #140]	@ (8009138 <__d2b+0xa8>)
 80090aa:	4824      	ldr	r0, [pc, #144]	@ (800913c <__d2b+0xac>)
 80090ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80090b0:	f000 fad6 	bl	8009660 <__assert_func>
 80090b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090bc:	b10d      	cbz	r5, 80090c2 <__d2b+0x32>
 80090be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090c2:	9301      	str	r3, [sp, #4]
 80090c4:	f1b8 0300 	subs.w	r3, r8, #0
 80090c8:	d023      	beq.n	8009112 <__d2b+0x82>
 80090ca:	4668      	mov	r0, sp
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	f7ff fd7c 	bl	8008bca <__lo0bits>
 80090d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090d6:	b1d0      	cbz	r0, 800910e <__d2b+0x7e>
 80090d8:	f1c0 0320 	rsb	r3, r0, #32
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	430b      	orrs	r3, r1
 80090e2:	40c2      	lsrs	r2, r0
 80090e4:	6163      	str	r3, [r4, #20]
 80090e6:	9201      	str	r2, [sp, #4]
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	61a3      	str	r3, [r4, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	bf0c      	ite	eq
 80090f0:	2201      	moveq	r2, #1
 80090f2:	2202      	movne	r2, #2
 80090f4:	6122      	str	r2, [r4, #16]
 80090f6:	b1a5      	cbz	r5, 8009122 <__d2b+0x92>
 80090f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090fc:	4405      	add	r5, r0
 80090fe:	603d      	str	r5, [r7, #0]
 8009100:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009104:	6030      	str	r0, [r6, #0]
 8009106:	4620      	mov	r0, r4
 8009108:	b003      	add	sp, #12
 800910a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800910e:	6161      	str	r1, [r4, #20]
 8009110:	e7ea      	b.n	80090e8 <__d2b+0x58>
 8009112:	a801      	add	r0, sp, #4
 8009114:	f7ff fd59 	bl	8008bca <__lo0bits>
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	3020      	adds	r0, #32
 800911e:	2201      	movs	r2, #1
 8009120:	e7e8      	b.n	80090f4 <__d2b+0x64>
 8009122:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009126:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800912a:	6038      	str	r0, [r7, #0]
 800912c:	6918      	ldr	r0, [r3, #16]
 800912e:	f7ff fd2d 	bl	8008b8c <__hi0bits>
 8009132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009136:	e7e5      	b.n	8009104 <__d2b+0x74>
 8009138:	08009a1c 	.word	0x08009a1c
 800913c:	08009a2d 	.word	0x08009a2d

08009140 <__sfputc_r>:
 8009140:	6893      	ldr	r3, [r2, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	b410      	push	{r4}
 8009148:	6093      	str	r3, [r2, #8]
 800914a:	da08      	bge.n	800915e <__sfputc_r+0x1e>
 800914c:	6994      	ldr	r4, [r2, #24]
 800914e:	42a3      	cmp	r3, r4
 8009150:	db01      	blt.n	8009156 <__sfputc_r+0x16>
 8009152:	290a      	cmp	r1, #10
 8009154:	d103      	bne.n	800915e <__sfputc_r+0x1e>
 8009156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800915a:	f7fe bc7a 	b.w	8007a52 <__swbuf_r>
 800915e:	6813      	ldr	r3, [r2, #0]
 8009160:	1c58      	adds	r0, r3, #1
 8009162:	6010      	str	r0, [r2, #0]
 8009164:	7019      	strb	r1, [r3, #0]
 8009166:	4608      	mov	r0, r1
 8009168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800916c:	4770      	bx	lr

0800916e <__sfputs_r>:
 800916e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009170:	4606      	mov	r6, r0
 8009172:	460f      	mov	r7, r1
 8009174:	4614      	mov	r4, r2
 8009176:	18d5      	adds	r5, r2, r3
 8009178:	42ac      	cmp	r4, r5
 800917a:	d101      	bne.n	8009180 <__sfputs_r+0x12>
 800917c:	2000      	movs	r0, #0
 800917e:	e007      	b.n	8009190 <__sfputs_r+0x22>
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	463a      	mov	r2, r7
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ffda 	bl	8009140 <__sfputc_r>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d1f3      	bne.n	8009178 <__sfputs_r+0xa>
 8009190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009194 <_vfiprintf_r>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	460d      	mov	r5, r1
 800919a:	b09d      	sub	sp, #116	@ 0x74
 800919c:	4614      	mov	r4, r2
 800919e:	4698      	mov	r8, r3
 80091a0:	4606      	mov	r6, r0
 80091a2:	b118      	cbz	r0, 80091ac <_vfiprintf_r+0x18>
 80091a4:	6a03      	ldr	r3, [r0, #32]
 80091a6:	b90b      	cbnz	r3, 80091ac <_vfiprintf_r+0x18>
 80091a8:	f7fe fb6a 	bl	8007880 <__sinit>
 80091ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d405      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b2:	89ab      	ldrh	r3, [r5, #12]
 80091b4:	059a      	lsls	r2, r3, #22
 80091b6:	d402      	bmi.n	80091be <_vfiprintf_r+0x2a>
 80091b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ba:	f7fe fd5c 	bl	8007c76 <__retarget_lock_acquire_recursive>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	071b      	lsls	r3, r3, #28
 80091c2:	d501      	bpl.n	80091c8 <_vfiprintf_r+0x34>
 80091c4:	692b      	ldr	r3, [r5, #16]
 80091c6:	b99b      	cbnz	r3, 80091f0 <_vfiprintf_r+0x5c>
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7fe fc80 	bl	8007ad0 <__swsetup_r>
 80091d0:	b170      	cbz	r0, 80091f0 <_vfiprintf_r+0x5c>
 80091d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d4:	07dc      	lsls	r4, r3, #31
 80091d6:	d504      	bpl.n	80091e2 <_vfiprintf_r+0x4e>
 80091d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091dc:	b01d      	add	sp, #116	@ 0x74
 80091de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e2:	89ab      	ldrh	r3, [r5, #12]
 80091e4:	0598      	lsls	r0, r3, #22
 80091e6:	d4f7      	bmi.n	80091d8 <_vfiprintf_r+0x44>
 80091e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091ea:	f7fe fd45 	bl	8007c78 <__retarget_lock_release_recursive>
 80091ee:	e7f3      	b.n	80091d8 <_vfiprintf_r+0x44>
 80091f0:	2300      	movs	r3, #0
 80091f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f4:	2320      	movs	r3, #32
 80091f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091fe:	2330      	movs	r3, #48	@ 0x30
 8009200:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093b0 <_vfiprintf_r+0x21c>
 8009204:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009208:	f04f 0901 	mov.w	r9, #1
 800920c:	4623      	mov	r3, r4
 800920e:	469a      	mov	sl, r3
 8009210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009214:	b10a      	cbz	r2, 800921a <_vfiprintf_r+0x86>
 8009216:	2a25      	cmp	r2, #37	@ 0x25
 8009218:	d1f9      	bne.n	800920e <_vfiprintf_r+0x7a>
 800921a:	ebba 0b04 	subs.w	fp, sl, r4
 800921e:	d00b      	beq.n	8009238 <_vfiprintf_r+0xa4>
 8009220:	465b      	mov	r3, fp
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ffa1 	bl	800916e <__sfputs_r>
 800922c:	3001      	adds	r0, #1
 800922e:	f000 80a7 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009232:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009234:	445a      	add	r2, fp
 8009236:	9209      	str	r2, [sp, #36]	@ 0x24
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 809f 	beq.w	8009380 <_vfiprintf_r+0x1ec>
 8009242:	2300      	movs	r3, #0
 8009244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800924c:	f10a 0a01 	add.w	sl, sl, #1
 8009250:	9304      	str	r3, [sp, #16]
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009258:	931a      	str	r3, [sp, #104]	@ 0x68
 800925a:	4654      	mov	r4, sl
 800925c:	2205      	movs	r2, #5
 800925e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009262:	4853      	ldr	r0, [pc, #332]	@ (80093b0 <_vfiprintf_r+0x21c>)
 8009264:	f7f6 ffec 	bl	8000240 <memchr>
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	b9d8      	cbnz	r0, 80092a4 <_vfiprintf_r+0x110>
 800926c:	06d1      	lsls	r1, r2, #27
 800926e:	bf44      	itt	mi
 8009270:	2320      	movmi	r3, #32
 8009272:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009276:	0713      	lsls	r3, r2, #28
 8009278:	bf44      	itt	mi
 800927a:	232b      	movmi	r3, #43	@ 0x2b
 800927c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009280:	f89a 3000 	ldrb.w	r3, [sl]
 8009284:	2b2a      	cmp	r3, #42	@ 0x2a
 8009286:	d015      	beq.n	80092b4 <_vfiprintf_r+0x120>
 8009288:	9a07      	ldr	r2, [sp, #28]
 800928a:	4654      	mov	r4, sl
 800928c:	2000      	movs	r0, #0
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4621      	mov	r1, r4
 8009294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009298:	3b30      	subs	r3, #48	@ 0x30
 800929a:	2b09      	cmp	r3, #9
 800929c:	d94b      	bls.n	8009336 <_vfiprintf_r+0x1a2>
 800929e:	b1b0      	cbz	r0, 80092ce <_vfiprintf_r+0x13a>
 80092a0:	9207      	str	r2, [sp, #28]
 80092a2:	e014      	b.n	80092ce <_vfiprintf_r+0x13a>
 80092a4:	eba0 0308 	sub.w	r3, r0, r8
 80092a8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	46a2      	mov	sl, r4
 80092b2:	e7d2      	b.n	800925a <_vfiprintf_r+0xc6>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	1d19      	adds	r1, r3, #4
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	9103      	str	r1, [sp, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	bfbb      	ittet	lt
 80092c0:	425b      	neglt	r3, r3
 80092c2:	f042 0202 	orrlt.w	r2, r2, #2
 80092c6:	9307      	strge	r3, [sp, #28]
 80092c8:	9307      	strlt	r3, [sp, #28]
 80092ca:	bfb8      	it	lt
 80092cc:	9204      	strlt	r2, [sp, #16]
 80092ce:	7823      	ldrb	r3, [r4, #0]
 80092d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80092d2:	d10a      	bne.n	80092ea <_vfiprintf_r+0x156>
 80092d4:	7863      	ldrb	r3, [r4, #1]
 80092d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092d8:	d132      	bne.n	8009340 <_vfiprintf_r+0x1ac>
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	9203      	str	r2, [sp, #12]
 80092e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092e6:	3402      	adds	r4, #2
 80092e8:	9305      	str	r3, [sp, #20]
 80092ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093c0 <_vfiprintf_r+0x22c>
 80092ee:	7821      	ldrb	r1, [r4, #0]
 80092f0:	2203      	movs	r2, #3
 80092f2:	4650      	mov	r0, sl
 80092f4:	f7f6 ffa4 	bl	8000240 <memchr>
 80092f8:	b138      	cbz	r0, 800930a <_vfiprintf_r+0x176>
 80092fa:	9b04      	ldr	r3, [sp, #16]
 80092fc:	eba0 000a 	sub.w	r0, r0, sl
 8009300:	2240      	movs	r2, #64	@ 0x40
 8009302:	4082      	lsls	r2, r0
 8009304:	4313      	orrs	r3, r2
 8009306:	3401      	adds	r4, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800930e:	4829      	ldr	r0, [pc, #164]	@ (80093b4 <_vfiprintf_r+0x220>)
 8009310:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009314:	2206      	movs	r2, #6
 8009316:	f7f6 ff93 	bl	8000240 <memchr>
 800931a:	2800      	cmp	r0, #0
 800931c:	d03f      	beq.n	800939e <_vfiprintf_r+0x20a>
 800931e:	4b26      	ldr	r3, [pc, #152]	@ (80093b8 <_vfiprintf_r+0x224>)
 8009320:	bb1b      	cbnz	r3, 800936a <_vfiprintf_r+0x1d6>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	3307      	adds	r3, #7
 8009326:	f023 0307 	bic.w	r3, r3, #7
 800932a:	3308      	adds	r3, #8
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009330:	443b      	add	r3, r7
 8009332:	9309      	str	r3, [sp, #36]	@ 0x24
 8009334:	e76a      	b.n	800920c <_vfiprintf_r+0x78>
 8009336:	fb0c 3202 	mla	r2, ip, r2, r3
 800933a:	460c      	mov	r4, r1
 800933c:	2001      	movs	r0, #1
 800933e:	e7a8      	b.n	8009292 <_vfiprintf_r+0xfe>
 8009340:	2300      	movs	r3, #0
 8009342:	3401      	adds	r4, #1
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	4619      	mov	r1, r3
 8009348:	f04f 0c0a 	mov.w	ip, #10
 800934c:	4620      	mov	r0, r4
 800934e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009352:	3a30      	subs	r2, #48	@ 0x30
 8009354:	2a09      	cmp	r2, #9
 8009356:	d903      	bls.n	8009360 <_vfiprintf_r+0x1cc>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0c6      	beq.n	80092ea <_vfiprintf_r+0x156>
 800935c:	9105      	str	r1, [sp, #20]
 800935e:	e7c4      	b.n	80092ea <_vfiprintf_r+0x156>
 8009360:	fb0c 2101 	mla	r1, ip, r1, r2
 8009364:	4604      	mov	r4, r0
 8009366:	2301      	movs	r3, #1
 8009368:	e7f0      	b.n	800934c <_vfiprintf_r+0x1b8>
 800936a:	ab03      	add	r3, sp, #12
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	462a      	mov	r2, r5
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <_vfiprintf_r+0x228>)
 8009372:	a904      	add	r1, sp, #16
 8009374:	4630      	mov	r0, r6
 8009376:	f7fd fe4f 	bl	8007018 <_printf_float>
 800937a:	4607      	mov	r7, r0
 800937c:	1c78      	adds	r0, r7, #1
 800937e:	d1d6      	bne.n	800932e <_vfiprintf_r+0x19a>
 8009380:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d405      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	059a      	lsls	r2, r3, #22
 800938a:	d402      	bmi.n	8009392 <_vfiprintf_r+0x1fe>
 800938c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800938e:	f7fe fc73 	bl	8007c78 <__retarget_lock_release_recursive>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	065b      	lsls	r3, r3, #25
 8009396:	f53f af1f 	bmi.w	80091d8 <_vfiprintf_r+0x44>
 800939a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800939c:	e71e      	b.n	80091dc <_vfiprintf_r+0x48>
 800939e:	ab03      	add	r3, sp, #12
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	462a      	mov	r2, r5
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <_vfiprintf_r+0x228>)
 80093a6:	a904      	add	r1, sp, #16
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7fe f8bd 	bl	8007528 <_printf_i>
 80093ae:	e7e4      	b.n	800937a <_vfiprintf_r+0x1e6>
 80093b0:	08009b88 	.word	0x08009b88
 80093b4:	08009b92 	.word	0x08009b92
 80093b8:	08007019 	.word	0x08007019
 80093bc:	0800916f 	.word	0x0800916f
 80093c0:	08009b8e 	.word	0x08009b8e

080093c4 <__sflush_r>:
 80093c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	0716      	lsls	r6, r2, #28
 80093ce:	4605      	mov	r5, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	d454      	bmi.n	800947e <__sflush_r+0xba>
 80093d4:	684b      	ldr	r3, [r1, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc02      	bgt.n	80093e0 <__sflush_r+0x1c>
 80093da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	dd48      	ble.n	8009472 <__sflush_r+0xae>
 80093e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d045      	beq.n	8009472 <__sflush_r+0xae>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093ec:	682f      	ldr	r7, [r5, #0]
 80093ee:	6a21      	ldr	r1, [r4, #32]
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	d030      	beq.n	8009456 <__sflush_r+0x92>
 80093f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	0759      	lsls	r1, r3, #29
 80093fa:	d505      	bpl.n	8009408 <__sflush_r+0x44>
 80093fc:	6863      	ldr	r3, [r4, #4]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009402:	b10b      	cbz	r3, 8009408 <__sflush_r+0x44>
 8009404:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	2300      	movs	r3, #0
 800940a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800940c:	6a21      	ldr	r1, [r4, #32]
 800940e:	4628      	mov	r0, r5
 8009410:	47b0      	blx	r6
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	d106      	bne.n	8009426 <__sflush_r+0x62>
 8009418:	6829      	ldr	r1, [r5, #0]
 800941a:	291d      	cmp	r1, #29
 800941c:	d82b      	bhi.n	8009476 <__sflush_r+0xb2>
 800941e:	4a2a      	ldr	r2, [pc, #168]	@ (80094c8 <__sflush_r+0x104>)
 8009420:	410a      	asrs	r2, r1
 8009422:	07d6      	lsls	r6, r2, #31
 8009424:	d427      	bmi.n	8009476 <__sflush_r+0xb2>
 8009426:	2200      	movs	r2, #0
 8009428:	6062      	str	r2, [r4, #4]
 800942a:	04d9      	lsls	r1, r3, #19
 800942c:	6922      	ldr	r2, [r4, #16]
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	d504      	bpl.n	800943c <__sflush_r+0x78>
 8009432:	1c42      	adds	r2, r0, #1
 8009434:	d101      	bne.n	800943a <__sflush_r+0x76>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b903      	cbnz	r3, 800943c <__sflush_r+0x78>
 800943a:	6560      	str	r0, [r4, #84]	@ 0x54
 800943c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800943e:	602f      	str	r7, [r5, #0]
 8009440:	b1b9      	cbz	r1, 8009472 <__sflush_r+0xae>
 8009442:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009446:	4299      	cmp	r1, r3
 8009448:	d002      	beq.n	8009450 <__sflush_r+0x8c>
 800944a:	4628      	mov	r0, r5
 800944c:	f7ff f9f6 	bl	800883c <_free_r>
 8009450:	2300      	movs	r3, #0
 8009452:	6363      	str	r3, [r4, #52]	@ 0x34
 8009454:	e00d      	b.n	8009472 <__sflush_r+0xae>
 8009456:	2301      	movs	r3, #1
 8009458:	4628      	mov	r0, r5
 800945a:	47b0      	blx	r6
 800945c:	4602      	mov	r2, r0
 800945e:	1c50      	adds	r0, r2, #1
 8009460:	d1c9      	bne.n	80093f6 <__sflush_r+0x32>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0c6      	beq.n	80093f6 <__sflush_r+0x32>
 8009468:	2b1d      	cmp	r3, #29
 800946a:	d001      	beq.n	8009470 <__sflush_r+0xac>
 800946c:	2b16      	cmp	r3, #22
 800946e:	d11e      	bne.n	80094ae <__sflush_r+0xea>
 8009470:	602f      	str	r7, [r5, #0]
 8009472:	2000      	movs	r0, #0
 8009474:	e022      	b.n	80094bc <__sflush_r+0xf8>
 8009476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800947a:	b21b      	sxth	r3, r3
 800947c:	e01b      	b.n	80094b6 <__sflush_r+0xf2>
 800947e:	690f      	ldr	r7, [r1, #16]
 8009480:	2f00      	cmp	r7, #0
 8009482:	d0f6      	beq.n	8009472 <__sflush_r+0xae>
 8009484:	0793      	lsls	r3, r2, #30
 8009486:	680e      	ldr	r6, [r1, #0]
 8009488:	bf08      	it	eq
 800948a:	694b      	ldreq	r3, [r1, #20]
 800948c:	600f      	str	r7, [r1, #0]
 800948e:	bf18      	it	ne
 8009490:	2300      	movne	r3, #0
 8009492:	eba6 0807 	sub.w	r8, r6, r7
 8009496:	608b      	str	r3, [r1, #8]
 8009498:	f1b8 0f00 	cmp.w	r8, #0
 800949c:	dde9      	ble.n	8009472 <__sflush_r+0xae>
 800949e:	6a21      	ldr	r1, [r4, #32]
 80094a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094a2:	4643      	mov	r3, r8
 80094a4:	463a      	mov	r2, r7
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b0      	blx	r6
 80094aa:	2800      	cmp	r0, #0
 80094ac:	dc08      	bgt.n	80094c0 <__sflush_r+0xfc>
 80094ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	4407      	add	r7, r0
 80094c2:	eba8 0800 	sub.w	r8, r8, r0
 80094c6:	e7e7      	b.n	8009498 <__sflush_r+0xd4>
 80094c8:	dfbffffe 	.word	0xdfbffffe

080094cc <_fflush_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	4605      	mov	r5, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b913      	cbnz	r3, 80094dc <_fflush_r+0x10>
 80094d6:	2500      	movs	r5, #0
 80094d8:	4628      	mov	r0, r5
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	b118      	cbz	r0, 80094e6 <_fflush_r+0x1a>
 80094de:	6a03      	ldr	r3, [r0, #32]
 80094e0:	b90b      	cbnz	r3, 80094e6 <_fflush_r+0x1a>
 80094e2:	f7fe f9cd 	bl	8007880 <__sinit>
 80094e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f3      	beq.n	80094d6 <_fflush_r+0xa>
 80094ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094f0:	07d0      	lsls	r0, r2, #31
 80094f2:	d404      	bmi.n	80094fe <_fflush_r+0x32>
 80094f4:	0599      	lsls	r1, r3, #22
 80094f6:	d402      	bmi.n	80094fe <_fflush_r+0x32>
 80094f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094fa:	f7fe fbbc 	bl	8007c76 <__retarget_lock_acquire_recursive>
 80094fe:	4628      	mov	r0, r5
 8009500:	4621      	mov	r1, r4
 8009502:	f7ff ff5f 	bl	80093c4 <__sflush_r>
 8009506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009508:	07da      	lsls	r2, r3, #31
 800950a:	4605      	mov	r5, r0
 800950c:	d4e4      	bmi.n	80094d8 <_fflush_r+0xc>
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	059b      	lsls	r3, r3, #22
 8009512:	d4e1      	bmi.n	80094d8 <_fflush_r+0xc>
 8009514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009516:	f7fe fbaf 	bl	8007c78 <__retarget_lock_release_recursive>
 800951a:	e7dd      	b.n	80094d8 <_fflush_r+0xc>

0800951c <__swhatbuf_r>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	460c      	mov	r4, r1
 8009520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009524:	2900      	cmp	r1, #0
 8009526:	b096      	sub	sp, #88	@ 0x58
 8009528:	4615      	mov	r5, r2
 800952a:	461e      	mov	r6, r3
 800952c:	da0d      	bge.n	800954a <__swhatbuf_r+0x2e>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009534:	f04f 0100 	mov.w	r1, #0
 8009538:	bf14      	ite	ne
 800953a:	2340      	movne	r3, #64	@ 0x40
 800953c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009540:	2000      	movs	r0, #0
 8009542:	6031      	str	r1, [r6, #0]
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	b016      	add	sp, #88	@ 0x58
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	466a      	mov	r2, sp
 800954c:	f000 f848 	bl	80095e0 <_fstat_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	dbec      	blt.n	800952e <__swhatbuf_r+0x12>
 8009554:	9901      	ldr	r1, [sp, #4]
 8009556:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800955a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800955e:	4259      	negs	r1, r3
 8009560:	4159      	adcs	r1, r3
 8009562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009566:	e7eb      	b.n	8009540 <__swhatbuf_r+0x24>

08009568 <__smakebuf_r>:
 8009568:	898b      	ldrh	r3, [r1, #12]
 800956a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800956c:	079d      	lsls	r5, r3, #30
 800956e:	4606      	mov	r6, r0
 8009570:	460c      	mov	r4, r1
 8009572:	d507      	bpl.n	8009584 <__smakebuf_r+0x1c>
 8009574:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	6123      	str	r3, [r4, #16]
 800957c:	2301      	movs	r3, #1
 800957e:	6163      	str	r3, [r4, #20]
 8009580:	b003      	add	sp, #12
 8009582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009584:	ab01      	add	r3, sp, #4
 8009586:	466a      	mov	r2, sp
 8009588:	f7ff ffc8 	bl	800951c <__swhatbuf_r>
 800958c:	9f00      	ldr	r7, [sp, #0]
 800958e:	4605      	mov	r5, r0
 8009590:	4639      	mov	r1, r7
 8009592:	4630      	mov	r0, r6
 8009594:	f7ff f9c6 	bl	8008924 <_malloc_r>
 8009598:	b948      	cbnz	r0, 80095ae <__smakebuf_r+0x46>
 800959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959e:	059a      	lsls	r2, r3, #22
 80095a0:	d4ee      	bmi.n	8009580 <__smakebuf_r+0x18>
 80095a2:	f023 0303 	bic.w	r3, r3, #3
 80095a6:	f043 0302 	orr.w	r3, r3, #2
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	e7e2      	b.n	8009574 <__smakebuf_r+0xc>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	6020      	str	r0, [r4, #0]
 80095b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095be:	b15b      	cbz	r3, 80095d8 <__smakebuf_r+0x70>
 80095c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095c4:	4630      	mov	r0, r6
 80095c6:	f000 f81d 	bl	8009604 <_isatty_r>
 80095ca:	b128      	cbz	r0, 80095d8 <__smakebuf_r+0x70>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	f023 0303 	bic.w	r3, r3, #3
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	431d      	orrs	r5, r3
 80095dc:	81a5      	strh	r5, [r4, #12]
 80095de:	e7cf      	b.n	8009580 <__smakebuf_r+0x18>

080095e0 <_fstat_r>:
 80095e0:	b538      	push	{r3, r4, r5, lr}
 80095e2:	4d07      	ldr	r5, [pc, #28]	@ (8009600 <_fstat_r+0x20>)
 80095e4:	2300      	movs	r3, #0
 80095e6:	4604      	mov	r4, r0
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	602b      	str	r3, [r5, #0]
 80095ee:	f7f8 fd59 	bl	80020a4 <_fstat>
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	d102      	bne.n	80095fc <_fstat_r+0x1c>
 80095f6:	682b      	ldr	r3, [r5, #0]
 80095f8:	b103      	cbz	r3, 80095fc <_fstat_r+0x1c>
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	bd38      	pop	{r3, r4, r5, pc}
 80095fe:	bf00      	nop
 8009600:	20002eb0 	.word	0x20002eb0

08009604 <_isatty_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d06      	ldr	r5, [pc, #24]	@ (8009620 <_isatty_r+0x1c>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	602b      	str	r3, [r5, #0]
 8009610:	f7f8 fd58 	bl	80020c4 <_isatty>
 8009614:	1c43      	adds	r3, r0, #1
 8009616:	d102      	bne.n	800961e <_isatty_r+0x1a>
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	b103      	cbz	r3, 800961e <_isatty_r+0x1a>
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	20002eb0 	.word	0x20002eb0

08009624 <_sbrk_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d06      	ldr	r5, [pc, #24]	@ (8009640 <_sbrk_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7f8 fd60 	bl	80020f4 <_sbrk>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_sbrk_r+0x1a>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_sbrk_r+0x1a>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20002eb0 	.word	0x20002eb0

08009644 <memcpy>:
 8009644:	440a      	add	r2, r1
 8009646:	4291      	cmp	r1, r2
 8009648:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800964c:	d100      	bne.n	8009650 <memcpy+0xc>
 800964e:	4770      	bx	lr
 8009650:	b510      	push	{r4, lr}
 8009652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800965a:	4291      	cmp	r1, r2
 800965c:	d1f9      	bne.n	8009652 <memcpy+0xe>
 800965e:	bd10      	pop	{r4, pc}

08009660 <__assert_func>:
 8009660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009662:	4614      	mov	r4, r2
 8009664:	461a      	mov	r2, r3
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <__assert_func+0x2c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	68d8      	ldr	r0, [r3, #12]
 800966e:	b954      	cbnz	r4, 8009686 <__assert_func+0x26>
 8009670:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <__assert_func+0x30>)
 8009672:	461c      	mov	r4, r3
 8009674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009678:	9100      	str	r1, [sp, #0]
 800967a:	462b      	mov	r3, r5
 800967c:	4905      	ldr	r1, [pc, #20]	@ (8009694 <__assert_func+0x34>)
 800967e:	f000 f841 	bl	8009704 <fiprintf>
 8009682:	f000 f851 	bl	8009728 <abort>
 8009686:	4b04      	ldr	r3, [pc, #16]	@ (8009698 <__assert_func+0x38>)
 8009688:	e7f4      	b.n	8009674 <__assert_func+0x14>
 800968a:	bf00      	nop
 800968c:	20000018 	.word	0x20000018
 8009690:	08009bde 	.word	0x08009bde
 8009694:	08009bb0 	.word	0x08009bb0
 8009698:	08009ba3 	.word	0x08009ba3

0800969c <_calloc_r>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	fba1 5402 	umull	r5, r4, r1, r2
 80096a2:	b93c      	cbnz	r4, 80096b4 <_calloc_r+0x18>
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff f93d 	bl	8008924 <_malloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b928      	cbnz	r0, 80096ba <_calloc_r+0x1e>
 80096ae:	2600      	movs	r6, #0
 80096b0:	4630      	mov	r0, r6
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	220c      	movs	r2, #12
 80096b6:	6002      	str	r2, [r0, #0]
 80096b8:	e7f9      	b.n	80096ae <_calloc_r+0x12>
 80096ba:	462a      	mov	r2, r5
 80096bc:	4621      	mov	r1, r4
 80096be:	f7fe fa5d 	bl	8007b7c <memset>
 80096c2:	e7f5      	b.n	80096b0 <_calloc_r+0x14>

080096c4 <__ascii_mbtowc>:
 80096c4:	b082      	sub	sp, #8
 80096c6:	b901      	cbnz	r1, 80096ca <__ascii_mbtowc+0x6>
 80096c8:	a901      	add	r1, sp, #4
 80096ca:	b142      	cbz	r2, 80096de <__ascii_mbtowc+0x1a>
 80096cc:	b14b      	cbz	r3, 80096e2 <__ascii_mbtowc+0x1e>
 80096ce:	7813      	ldrb	r3, [r2, #0]
 80096d0:	600b      	str	r3, [r1, #0]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	1e10      	subs	r0, r2, #0
 80096d6:	bf18      	it	ne
 80096d8:	2001      	movne	r0, #1
 80096da:	b002      	add	sp, #8
 80096dc:	4770      	bx	lr
 80096de:	4610      	mov	r0, r2
 80096e0:	e7fb      	b.n	80096da <__ascii_mbtowc+0x16>
 80096e2:	f06f 0001 	mvn.w	r0, #1
 80096e6:	e7f8      	b.n	80096da <__ascii_mbtowc+0x16>

080096e8 <__ascii_wctomb>:
 80096e8:	4603      	mov	r3, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	b141      	cbz	r1, 8009700 <__ascii_wctomb+0x18>
 80096ee:	2aff      	cmp	r2, #255	@ 0xff
 80096f0:	d904      	bls.n	80096fc <__ascii_wctomb+0x14>
 80096f2:	228a      	movs	r2, #138	@ 0x8a
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096fa:	4770      	bx	lr
 80096fc:	700a      	strb	r2, [r1, #0]
 80096fe:	2001      	movs	r0, #1
 8009700:	4770      	bx	lr
	...

08009704 <fiprintf>:
 8009704:	b40e      	push	{r1, r2, r3}
 8009706:	b503      	push	{r0, r1, lr}
 8009708:	4601      	mov	r1, r0
 800970a:	ab03      	add	r3, sp, #12
 800970c:	4805      	ldr	r0, [pc, #20]	@ (8009724 <fiprintf+0x20>)
 800970e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	f7ff fd3d 	bl	8009194 <_vfiprintf_r>
 800971a:	b002      	add	sp, #8
 800971c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	20000018 	.word	0x20000018

08009728 <abort>:
 8009728:	b508      	push	{r3, lr}
 800972a:	2006      	movs	r0, #6
 800972c:	f000 f82c 	bl	8009788 <raise>
 8009730:	2001      	movs	r0, #1
 8009732:	f7f8 fc67 	bl	8002004 <_exit>

08009736 <_raise_r>:
 8009736:	291f      	cmp	r1, #31
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4605      	mov	r5, r0
 800973c:	460c      	mov	r4, r1
 800973e:	d904      	bls.n	800974a <_raise_r+0x14>
 8009740:	2316      	movs	r3, #22
 8009742:	6003      	str	r3, [r0, #0]
 8009744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800974c:	b112      	cbz	r2, 8009754 <_raise_r+0x1e>
 800974e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009752:	b94b      	cbnz	r3, 8009768 <_raise_r+0x32>
 8009754:	4628      	mov	r0, r5
 8009756:	f000 f831 	bl	80097bc <_getpid_r>
 800975a:	4622      	mov	r2, r4
 800975c:	4601      	mov	r1, r0
 800975e:	4628      	mov	r0, r5
 8009760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009764:	f000 b818 	b.w	8009798 <_kill_r>
 8009768:	2b01      	cmp	r3, #1
 800976a:	d00a      	beq.n	8009782 <_raise_r+0x4c>
 800976c:	1c59      	adds	r1, r3, #1
 800976e:	d103      	bne.n	8009778 <_raise_r+0x42>
 8009770:	2316      	movs	r3, #22
 8009772:	6003      	str	r3, [r0, #0]
 8009774:	2001      	movs	r0, #1
 8009776:	e7e7      	b.n	8009748 <_raise_r+0x12>
 8009778:	2100      	movs	r1, #0
 800977a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800977e:	4620      	mov	r0, r4
 8009780:	4798      	blx	r3
 8009782:	2000      	movs	r0, #0
 8009784:	e7e0      	b.n	8009748 <_raise_r+0x12>
	...

08009788 <raise>:
 8009788:	4b02      	ldr	r3, [pc, #8]	@ (8009794 <raise+0xc>)
 800978a:	4601      	mov	r1, r0
 800978c:	6818      	ldr	r0, [r3, #0]
 800978e:	f7ff bfd2 	b.w	8009736 <_raise_r>
 8009792:	bf00      	nop
 8009794:	20000018 	.word	0x20000018

08009798 <_kill_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d07      	ldr	r5, [pc, #28]	@ (80097b8 <_kill_r+0x20>)
 800979c:	2300      	movs	r3, #0
 800979e:	4604      	mov	r4, r0
 80097a0:	4608      	mov	r0, r1
 80097a2:	4611      	mov	r1, r2
 80097a4:	602b      	str	r3, [r5, #0]
 80097a6:	f7f8 fc1d 	bl	8001fe4 <_kill>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	d102      	bne.n	80097b4 <_kill_r+0x1c>
 80097ae:	682b      	ldr	r3, [r5, #0]
 80097b0:	b103      	cbz	r3, 80097b4 <_kill_r+0x1c>
 80097b2:	6023      	str	r3, [r4, #0]
 80097b4:	bd38      	pop	{r3, r4, r5, pc}
 80097b6:	bf00      	nop
 80097b8:	20002eb0 	.word	0x20002eb0

080097bc <_getpid_r>:
 80097bc:	f7f8 bc0a 	b.w	8001fd4 <_getpid>

080097c0 <_init>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr

080097cc <_fini>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr
